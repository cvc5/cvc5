diff --git a/configuration/cxx14.sh b/configuration/cxx14.sh
index a5472cd..2a3e608 100755
--- a/configuration/cxx14.sh
+++ b/configuration/cxx14.sh
@@ -51,7 +51,7 @@ int main() {
 EOF
 
 # First try with no compiler flag...
-"$CXX"  language-version.C  -o language-version  >> LogFile  2>& 1 
+"$CXX" $CXXFLAGS language-version.C  -o language-version  >> LogFile  2>& 1 
 if [ $? -ne 0 ]
 then
     echo "ERROR: compilation unexpectedly failed; is $CXX a c++ compiler?   $SCRIPT_NAME" > /dev/stderr
@@ -74,7 +74,7 @@ fi
 # Compilation without flag is not C++14 standard; try with -std=c++14
 
 CXX14="-std=c++14"
-"$CXX"  $CXX14  language-version.C  -o language-version  >> LogFile  2>& 1 
+"$CXX" $CXXFLAGS  $CXX14  language-version.C  -o language-version  >> LogFile  2>& 1 
 if [ $? -ne 0 ]
 then
     echo "ERROR: compilation with flag $CXX14 failed   $SCRIPT_NAME" > /dev/stderr
diff --git a/configuration/gmp-version.sh b/configuration/gmp-version.sh
index ebd85c7..5693280 100755
--- a/configuration/gmp-version.sh
+++ b/configuration/gmp-version.sh
@@ -73,7 +73,7 @@ int main()
 EOF
 
 # Use c++ compiler specified in CXX; no need to specify libgmp as all info is in header file!!
-$CXX -I"$COCOA_EXTLIB_DIR/include"  test-gmp-version.C  -o test-gmp-version  > LogFile 2>&1
+$CXX $CXXFLAGS -I"$COCOA_EXTLIB_DIR/include"  test-gmp-version.C  -o test-gmp-version  > LogFile 2>&1
 
 # Check whether compilation failed; if so, complain.
 if [ $? -ne 0 ]
diff --git a/configuration/verify-compiler.sh b/configuration/verify-compiler.sh
index 7a70933..c752e34 100755
--- a/configuration/verify-compiler.sh
+++ b/configuration/verify-compiler.sh
@@ -55,15 +55,6 @@ int main()
 }
 EOF
 
-# Try plain compiler (without CXXFLAGS):
-$CXX test-compiler-gnu.C -o test-compiler-gnu  > LogFile  2>&1
-if [ $? -ne 0 -o \! -f test-compiler-gnu -o \! -x test-compiler-gnu ]
-then
-  echo "ERROR: Are you sure \"$CXX\" is a C++ compiler?   $SCRIPT_NAME"  > /dev/stderr
-  exit 1
-fi
-/bin/rm test-compiler-gnu  # not necessary, just being tidy :-)
-
 # Try compiler with CXXFLAGS:
 $CXX $CXXFLAGS test-compiler-gnu.C -o test-compiler-gnu  > LogFile  2>&1
 if [ $? -ne 0 -o \! -f test-compiler-gnu -o \! -x test-compiler-gnu ]
diff --git a/configuration/shell-fns.sh b/configuration/shell-fns.sh
index 190dbb4..c8d281f 100755
--- a/configuration/shell-fns.sh
+++ b/configuration/shell-fns.sh
@@ -11,7 +11,7 @@ mktempdir()
 {
     TODAY=`date "+%Y%m%d"`
     TIME=`date "+%H%M%S"`
-    TMP_DIR="/tmp/CoCoALib-config/$USER-$TODAY/$1-$TIME-$$"
+    TMP_DIR="/tmp/CoCoALib-config-$USER/$USER-$TODAY/$1-$TIME-$$"
     /bin/rm -rf "$TMP_DIR"  &&  /bin/mkdir -p "$TMP_DIR"
     if [ $? -ne 0 ]
     then
diff --git a/include/CoCoA/TmpGPoly.H b/include/CoCoA/TmpGPoly.H
index 4c4d51e..efe50f7 100644
--- a/include/CoCoA/TmpGPoly.H
+++ b/include/CoCoA/TmpGPoly.H
@@ -29,6 +29,7 @@
 #include "CoCoA/TmpGTypes.H"
 #include "CoCoA/utils.H"
 
+#include<functional>
 #include<list>
 // using std::list; // for GPolyList; GPolyPtrList;
 #include<vector>
@@ -46,6 +47,11 @@ enum ClearMarker {clear};
 
 class GPoly;
 
+extern bool handlersEnabled;
+extern std::function<void(ConstRefRingElem p, ConstRefRingElem q, ConstRefRingElem s)> sPolyHandler;
+extern std::function<void(ConstRefRingElem p)> reductionStartHandler;
+extern std::function<void(ConstRefRingElem q)> reductionStepHandler;
+extern std::function<void(ConstRefRingElem r)> reductionEndHandler;
 
 typedef std::list<GPoly> GPolyList;
 
diff --git a/src/AlgebraicCore/PolyRing-content.C b/src/AlgebraicCore/PolyRing-content.C
index c5d0a0a..36d6d2b 100644
--- a/src/AlgebraicCore/PolyRing-content.C
+++ b/src/AlgebraicCore/PolyRing-content.C
@@ -33,6 +33,7 @@
 #include "CoCoA/convert.H"
 #include "CoCoA/error.H"
 #include "CoCoA/utils.H"  // for len
+#include "CoCoA/TmpGPoly.H"
 
 
 #include <vector>
@@ -128,7 +129,9 @@ namespace CoCoA
   {
     const PolyRing Rx = owner(f);
     RingElem ans(Rx);
+    if (handlersEnabled) reductionStartHandler(f);
     Rx->myMonic(raw(ans), raw(f));
+    if (handlersEnabled) reductionEndHandler(ans);
     return ans;
   }
 
diff --git a/src/AlgebraicCore/SparsePolyOps-reduce.C b/src/AlgebraicCore/SparsePolyOps-reduce.C
index b5b8b43..11687f0 100644
--- a/src/AlgebraicCore/SparsePolyOps-reduce.C
+++ b/src/AlgebraicCore/SparsePolyOps-reduce.C
@@ -134,6 +134,7 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
       v.myGRingInfo().myCheckForTimeout("ReduceActiveLM");
       s->myUpdate(F, *g);
       F->myReduce(poly(*g), NumTerms(*g));
+      if ( handlersEnabled ) reductionStepHandler(poly(*g));
     }//while
   }//ReduceActiveLM
 
@@ -269,6 +270,7 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
   void GPoly::myReduce(const Reductors& theReductors)
   {
     if ( IsZero(*this) ) return;
+    if ( handlersEnabled ) reductionStartHandler(myPoly());
     ReductionCog F = ChooseReductionCogGeobucket(myGRingInfo());
     F->myAssignReset(myPolyValue, myNumTerms); // myPolyValue gets 0
     reduce(F, mySugar, theReductors); // mySugar updated
@@ -278,6 +280,7 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
     if ( !IsZero(*this) && !IsOne(myLCValue) ) // makes myPolyValue monic
       if ( myGRingInfo().myCoeffRingType()==CoeffEncoding::Field )
         myGRingInfo().myNewSPR()->myDivByCoeff(raw(myPolyValue), raw(myLCValue));
+    if ( handlersEnabled ) reductionEndHandler(myPoly());
     // if CoeffEncoding::Field myRelease does NOT make poly monic
     // if CoeffEncoding::FrFldOfGCDDomain myRelease makes poly content free
   }
diff --git a/src/AlgebraicCore/TmpGPoly.C b/src/AlgebraicCore/TmpGPoly.C
index ea250d4..3447d86 100644
--- a/src/AlgebraicCore/TmpGPoly.C
+++ b/src/AlgebraicCore/TmpGPoly.C
@@ -47,6 +47,11 @@ using std::vector;
 namespace CoCoA
 {  
 
+  bool handlersEnabled = false;
+  std::function<void(ConstRefRingElem p, ConstRefRingElem q, ConstRefRingElem s)> sPolyHandler = nullptr;
+  std::function<void(ConstRefRingElem p)> reductionStartHandler = nullptr;
+  std::function<void(ConstRefRingElem q)> reductionStepHandler = nullptr;
+  std::function<void(ConstRefRingElem r)> reductionEndHandler = nullptr;
 
   //---------class GPoly-------------------------------
 
@@ -301,7 +306,10 @@ void GPoly::myUpdateLenLPPLCDegComp()
     if (the_gp.IsInputPoly())
       myPolyValue = poly(the_gp.myFirstGPoly());
     else
+    {
       myPolySetSPoly(the_gp.myFirstGPoly(), the_gp.mySecondGPoly());
+      if ( handlersEnabled ) sPolyHandler(the_gp.myFirstGPoly().myPoly(), the_gp.mySecondGPoly().myPoly(), myPoly());
+    }
     myUpdateLenLPPLCDegComp();
     myAge = the_age;
     // MAX: do these things only if necessary.
diff --git a/configuration/gmp-check-cxxflags.sh b/configuration/gmp-check-cxxflags.sh
index f34c10d..6c167a3 100755
--- a/configuration/gmp-check-cxxflags.sh
+++ b/configuration/gmp-check-cxxflags.sh
@@ -59,7 +59,7 @@ fi
 
 
 GMP_LDLIB=-lgmp
-if [ -f "$COCOA_EXTLIB_DIR"/lib/libgmp-symlink.a ]
+if [ -f "$COCOA_EXTLIB_DIR"/lib/libgmp-symlink."$GMP_LIB_EXTN" ]
 then
   GMP_LDLIB=-lgmp-symlink
 fi
diff --git a/configure b/configure
index 769750d..5ac5e90 100755
--- a/configure
+++ b/configure
@@ -336,6 +336,7 @@ fi
 # Next two lines required by the scripts which check GMP (see below).
 export CXX
 export CXXFLAGS
+export GMP_LIB_EXTN
 
 # Check compiler and flags are sane.
 # If all is well, result is either "gnu" or "not gnu" & return code is 0.
@@ -467,6 +468,7 @@ else
       # gmp-find.sh script worked, so message is full path of GMP library
       /bin/ln -s "$GMP_MESG" $EXTLIBS/lib/libgmp-symlink.a
       GMP_LIB="$GMP_MESG"
+      GMP_LIB_EXTN="a"
     fi
   fi
 fi
