/*********************                                                        */
/*! \file bv_solver_intblast.h
 ** \verbatim
 ** Top contributors (to current version):
 **   Mathias Preiner, Andrew Reynolds
 ** This file is part of the CVC4 project.
 ** Copyright (c) 2009-2020 by the authors listed in the file AUTHORS
 ** in the top-level source directory and their institutional affiliations.
 ** All rights reserved.  See the file COPYING in the top-level source
 ** directory for licensing information.\endverbatim
 **
 ** \brief Simple int-blast solver
 **
 ** Int-blast solver that uses IntBlaster to translate BV atoms to Integers.
 **/

#include "cvc4_private.h"

#ifndef CVC4__THEORY__BV__BV_SOLVER_INTBLAST_H
#define CVC4__THEORY__BV__BV_SOLVER_INTBLAST_H

#include <unordered_map>

#include "theory/bv/bv_solver.h"
#include "theory/bv/int_blaster.h"
#include "theory/bv/proof_checker.h"
#include "theory/eager_proof_generator.h"

namespace CVC4 {

namespace theory {
namespace bv {

/**
 * Int-blasting solver that sends int-blasting lemmas.
 *
 * Sends lemmas atom <=> ib(atom) on preNotifyFact().
 */
class BVSolverIntblast : public BVSolver
{
 public:
  BVSolverIntblast(TheoryState* state,
                   TheoryInferenceManager& inferMgr,
                   ProofNodeManager* pnm);
  ~BVSolverIntblast() = default;

  void preRegisterTerm(TNode n) override {}

  bool preNotifyFact(TNode atom,
                     bool pol,
                     TNode fact,
                     bool isPrereg,
                     bool isInternal) override;

  std::string identify() const override { return "BVSolverIntblast"; };

  Theory::PPAssertStatus ppAssert(
      TrustNode in, TrustSubstitutionMap& outSubstitutions) override
  {
    return Theory::PPAssertStatus::PP_ASSERT_STATUS_UNSOLVED;
  }

  bool collectModelValues(TheoryModel* m,
                          const std::set<Node>& termSet) override;

 private:
  /** Sends a int-blasting lemma fact to the inference manager.  */
  void addIBLemma(TNode fact);

  /** Int-blaster used to int-blast atoms/terms. */
  std::unique_ptr<IntBlaster> d_intblaster;

  /** Skolem map populated by `d_intblaster` and used for model construction. */
  std::map<Node, Node> d_skolems;

  /** Proof generator that manages proofs for lemmas generated by this class. */
  std::unique_ptr<EagerProofGenerator> d_epg;

  BVProofRuleChecker d_bvProofChecker;
};

}  // namespace bv
}  // namespace theory
}  // namespace CVC4

#endif
