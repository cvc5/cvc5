/******************************************************************************
 * Modified version of
 * https://github.com/AlloyTools/org.alloytools.alloy/blob/master/org.alloytools.kodkod.nativesat/src/main/java/org/alloytools/nativecode/util/NativeCode.java
 * with license
 * https://github.com/AlloyTools/org.alloytools.alloy/blob/master/LICENSE
 * ****************************************************************************
 *
 * The cvc5 java API.
 */

package io.github.cvc5.api;

import java.io.File;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Enumeration;
import java.util.regex.Pattern;

abstract class Platform
{
  public Platform(String nameRegex, String archRegex, String dir)
  {
    this.osName = Pattern.compile(nameRegex, Pattern.CASE_INSENSITIVE);
    this.osArch = Pattern.compile(archRegex, Pattern.CASE_INSENSITIVE);
    this.dir = dir;
  }
  final Pattern osName;
  final Pattern osArch;
  final String dir;

  static Platform findPlatform()
  {
    String os = System.getProperty("os.name");
    String arch = System.getProperty("os.arch");
    Platform[] platforms = {LinuxAmd64.LINUX_AMD64, MacX86_64.MAC_X86_64, Windows64.WINDOWS_AMD64};
    for (Platform p : platforms)
    {
      if (p.osArch.matcher(arch).matches() && p.osName.matcher(os).matches())
      {
        System.out.println("arch-os: " + p.dir);
        return p;
      }
    }
    throw new RuntimeException("Unsupported platform: " + os + "-" + arch);
  }

  abstract String[] getLibraries();

  /**
   * Copy libraries from the jar file to home directory
   */
  void copyLibraries(String dir, String prefix)
  {
    try
    {
      for (String library : getLibraries())
      {
        String file = dir + "/" + library;
        Enumeration<URL> resources = NativeCode.class.getClassLoader().getResources(file);
        if (!resources.hasMoreElements())
        {
          System.out.println("Could not find native lib " + file);
          return;
        }
        URL resource = resources.nextElement();
        String destination = prefix + library;
        if (Files.notExists(Paths.get(destination)))
        {
          Files.copy(
              resource.openStream(), Paths.get(destination), StandardCopyOption.REPLACE_EXISTING);
        }
      }
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
}

/** Linux AMD 64 */
class LinuxAmd64 extends Platform
{
  static LinuxAmd64 LINUX_AMD64 = new LinuxAmd64();
  private LinuxAmd64()
  {
    super("linux", "amd64", "linux-amd64");
  }

  @Override String[] getLibraries()
  {
    return new String[] {"libcvc5.so.1", "libcvc5jni.so", "libpoly.so.0.1.11", "libpolyxx.so.0.1.11"};
  }

  @Override void copyLibraries(String dir, String prefix)
  {
    try
    {
      super.copyLibraries(dir, prefix);
      // symbolic links
      Runtime.getRuntime().exec("ln -s " + prefix + "libcvc5.so.1 " + prefix + "libcvc5.so");
      Runtime.getRuntime().exec("ln -s " + prefix + "libpoly.so.0.1.11 " + prefix + "libpoly.so.0");
      Runtime.getRuntime().exec(
          "ln -s " + prefix + "libpolyxx.so.0.1.11 " + prefix + "libpolyxx.so.0");
      Runtime.getRuntime().exec("ln -s " + prefix + "libpoly.so.0 " + prefix + "libpoly.so");
      Runtime.getRuntime().exec("ln -s " + prefix + "libpolyxx.so.0 " + prefix + "libpolyxx.so");
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
}

/** MAC X86_64 */
class MacX86_64 extends Platform
{
  static MacX86_64 MAC_X86_64 = new MacX86_64();
  private MacX86_64()
  {
    //super("Mac*", "x86_64", "mac-x86_64");
    super("mac\\s*os.*", "ppc|power|powerpc.*|x86.*", "mac-86_64");
  }
  @Override String[] getLibraries()
  {
    return new String[] {
        "libcvc5.1.dylib", "libcvc5jni.dylib", "libpoly.0.1.11.dylib", "libpolyxx.0.1.11.dylib"};
  }
  @Override void copyLibraries(String dir, String prefix)
  {
    try
    {
      super.copyLibraries(dir, prefix);
      // symbolic links
      Runtime.getRuntime().exec("ln -s " + prefix + "libcvc5.1.dylib " + prefix + "libcvc5.so");
      Runtime.getRuntime().exec("ln -s " + prefix + "libpoly.0.1.11.dylib " + prefix + "libpoly.0.dylib");
      Runtime.getRuntime().exec(
          "ln -s " + prefix + "libpolyxx.0.1.11.dylib " + prefix + "libpolyxx.0.dylib");
      Runtime.getRuntime().exec("ln -s " + prefix + "libpoly.0.dylib " + prefix + "libpoly.dylib");
      Runtime.getRuntime().exec("ln -s " + prefix + "libpolyxx.0.dylib " + prefix + "libpolyxx.dylib");
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
}

/** Windows 64 */
class Windows64 extends Platform
{
  static Windows64 WINDOWS_AMD64 = new Windows64();
  private Windows64()
  {
    super("Win.*", "amd64", "win-amd64");
  }
  @Override String[] getLibraries()
  {
    return new String[] {"cvc5.dll", "cvc5jni.dll", "poly.dll", "polyxx.dll"};
  }
}
/**
 * class for loading native libraries
 */
public class NativeCode
{
  /** native platform */
  public static Platform platform = Platform.findPlatform();

  /** cvc5 version */
  public static final String version = "${CVC5_VERSION}";

  /** cvc5 name */
  public static final String homeName = "cvc5";

  /**
   * This variable caches the result of home() function call.
   */
  private static String home = null;

  /**
   * The system-specific file separator (/ or \)
   */
  private static final char fs = File.separatorChar;

  /**
   * Find a temporary directory to store cvc5 files; it's guaranteed to be a
   * canonical absolute path.
   */
  private static synchronized String home()
  {
    if (home != null)
    {
      return home;
    }
    else
    {
      String tmpPath = System.getProperty("java.io.tmpdir");
      if (tmpPath == null || tmpPath.length() == 0)
      {
        System.out.println(
            "Error. JVM need to specify a temporary directory using java.io.tmpdir property.");
      }
      // e.g. /tmp/cvc5/0.0.0/amd64-linux
      String tmp = tmpPath + fs + homeName + fs + version + fs + platform.dir;
      File tmpDirectory = new File(tmp);
      tmpDirectory.mkdirs();
      home = tmpDirectory.getAbsolutePath();
    }
    System.out.println("cvc5 home: " + home);
    return home;
  }

  /** load jni library with the given name */
  public static void loadLibrary(String name) throws RuntimeException
  {
    try
    {
      String libraryPath = home() + fs + name;
      System.load(libraryPath);
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }

  /** Load jni libraries */
  public static void loadLibraries()
  {
    String prefix = home() + fs;
    platform.copyLibraries(platform.dir, prefix);
    System.setProperty("java.library.path", home());
    for (String name : platform.getLibraries())
    {
      NativeCode.loadLibrary(name);
    }
  }
}
