/******************************************************************************
 * Top contributors (to current version):
 *   Andrew Reynolds
 *
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2009-2023 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * sygus_enumerator
 */

#include "cvc5_private.h"

#ifndef CVC5__EXPR__SYGUS_ENUMERATOR_H
#define CVC5__EXPR__SYGUS_ENUMERATOR_H

#include "theory/quantifiers/sygus/sygus_enumerator.h"

namespace cvc5::internal {

/**
 * SygusEnumerator
 *
 * This class is used for enumerating all terms of a sygus datatype type. At
 * a high level, it is used as an alternative approach to sygus datatypes
 * solver as a candidate generator in a synthesis loop. It filters terms based
 * on redundancy criteria, for instance, it does not generate two terms whose
 * builtin terms (TermDb::sygusToBuiltin) can be shown to be equivalent via
 * rewriting. It enumerates terms in order of sygus term size
 * (TermDb::getSygusTermSize).
 *
 * It also can be configured to enumerates sygus terms with free variables,
 * (as opposed to variables bound in the formal arguments list of the
 * function-to-synthesize), where each free variable appears in exactly one
 * subterm. For grammar:
 *   S -> 0 | 1 | x | S+S
 * this enumerator will generate the stream:
 *   z1, C_0, C_1, C_x, C_+(z1, z2), C_+(z1, C_1), C_+(C_1, C_1) ...
 * and so on, where z1 and z2 are variables of sygus datatype type S. We call
 * these "shapes". This feature can be enabled by setting enumShapes to true
 * in the constructor below.
 */
class SygusEnumerator : public EnumValGenerator
{
 public:
  /**
   * @param env Reference to the environment
   * @param tn The sygus datatype that encodes the grammar
   * @param sec Pointer to the callback, required e.g. if we wish to do
   * conjecture-specific symmetry breaking
   * @param enumShapes If true, this enumerator will generate terms having any
   * number of free variables
   * @param enumAnyConstHoles If true, this enumerator will generate terms where
   * free variables are the arguments to any-constant constructors.
   * @param numConstants The number of interpreted constants to consider for
   * each size
   */
  SygusEnumerator(Env& env,
                  const TypeNode& tn,
                  SygusEnumeratorCallback* sec = nullptr,
                  bool enumShapes = false,
                  bool enumAnyConstHoles = false,
                  size_t numConstants = 5);
  ~SygusEnumerator() {}
  /** Are we enumerating shapes? */
  Node getNext();
  /** increment */
  bool increment();
  /** Get the next concrete value generated by this class. */
  Node getCurrent();

 private:
  /** Convert sygus-to-builtin */
  static Node getSygusToBuiltin(const Node& n);
  /** */
  theory::quantifiers::SygusEnumerator d_internal;
  /** The enumerator, a dummy skolem passed to the above class */
  Node d_enum;
  /** The first term */
  Node d_first;
};

}  // namespace cvc5::internal

#endif /* CVC5__EXPR__SYGUS_ENUMERATOR_H */
