(include "../programs/Utils.smt3")

; Note that the Bool sort is native to ALF

(declare-const ite (-> (! Type :var A :implicit) Bool A A A))
(declare-const not (-> Bool Bool))

(declare-const or (-> Bool Bool Bool)
   :right-assoc-nil false
)
(declare-const and (-> Bool Bool Bool)
   :right-assoc-nil true
)
(declare-const => (-> Bool Bool Bool)
   :right-assoc
)
(declare-const xor (-> Bool Bool Bool)
   :left-assoc
)

(declare-const = (-> (! Type :var A :implicit) A A Bool)
   :chainable and
)

(declare-const lambda (-> (! Type :var A :implicit) (! Type :var B :implicit) A B (-> A B)))

(declare-const distinct (-> (! Type :var A :implicit) A A Bool) :pairwise and)

; generic variables
; NOTE: does not check that U is a numeral
(declare-const const (-> (! Type :var U :implicit) U (! Type :var T) T))

(declare-const skolem (-> (! Type :var A :implicit) A A))

; We construct all skolems by wrapping them in an application of `skolem`.
; The argument is either
; (1) an application of an internal function symbol @k.ID where ID is the
; skolem function id,
; (2) a term t, in the case of purify skolems, where t is the term.

; For example, the array diff skolem for arrays A and B is:
;   (skolem (@k.ARRAY_DIFF A B))
; where we have:
;   (declare-const @k.ARRAY_DIFF
;      (-> (! Type :var T :implicit) (! Type :var U :implicit) (Array T U) (Array T U) T))

