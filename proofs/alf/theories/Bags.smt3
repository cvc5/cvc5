(include "../programs/Utils.smt3")
(include "../theories/Builtin.smt3")
(include "../theories/Arith.smt3")

(declare-sort Bag 1)

; NOTE: permits non-set types
(declare-const bag.empty (-> (! Type :var T) T))

(declare-const bag.union_max (-> (! Type :var T :implicit) (Bag T) (Bag T) (Bag T)))
(declare-const bag.union_disjoint (-> (! Type :var T :implicit) (Bag T) (Bag T) (Bag T)))
(declare-const bag.inter_min (-> (! Type :var T :implicit) (Bag T) (Bag T) (Bag T)))
(declare-const bag.difference_subtract (-> (! Type :var T :implicit) (Bag T) (Bag T) (Bag T)))
(declare-const bag.difference_remove (-> (! Type :var T :implicit) (Bag T) (Bag T) (Bag T)))
(declare-const bag.subbag (-> (! Type :var T :implicit) (Bag T) (Bag T) Bool))
(declare-const bag.count (-> (! Type :var T :implicit) T (Bag T) Int))
(declare-const bag (-> (! Type :var T :implicit) T Int (Bag T)))
(declare-const bag.member (-> (! Type :var T :implicit) T (Bag T) Bool))
(declare-const bag.card (-> (! Type :var T :implicit) (Bag T) Int))
(declare-const bag.choose (-> (! Type :var T :implicit) (Bag T) T))
(declare-const bag.duplicate_removal (-> (! Type :var T :implicit) (Bag T) (Bag T)))
(declare-const bag.is_singleton (-> (! Type :var T :implicit) (Bag T) Bool))

(declare-const bag.filter (-> (! Type :var T :implicit) (-> T Bool) (Bag T) (Bag T)))
(declare-const bag.map (-> (! Type :var T :implicit) (! Type :var U :implicit) (-> T U) (Bag T) (Bag U)))
(declare-const bag.fold (-> (! Type :var T :implicit) (! Type :var U :implicit) (-> T U U) U (Bag T) U))
(declare-const table.product (-> (! Type :var T :implicit) (! Type :var U :implicit) (Bag T) (Bag U) (Bag (alf.concat Tuple U T))))
(declare-const table.group (-> (! Type :var T :implicit) @List (Bag T) (Bag (Bag T))))

; Skolems for the theory of bags.
(declare-const @k.BAGS_DEQ_DIFF (-> (! Type :var T :implicit) (Bag T) (Bag T) T))
(declare-const @k.TABLES_GROUP_PART (-> (! Type :var T :implicit) (Bag (Bag T)) T (Bag T)))
(declare-const @k.TABLES_GROUP_PART_ELEMENT (-> (! Type :var T :implicit) (Bag (Bag T)) (Bag T) T))

;(declare-const bag.from_set (# x term (apply f_bag.from_set x)))
;(declare-const bag.to_set (# x term (apply f_bag.to_set x)))

; The following skolems are not handled currently:
;BAGS_CARD_CARDINALITY
;BAGS_CARD_ELEMENTS
;BAGS_CARD_N
;BAGS_CARD_UNION_DISJOINT
;BAGS_CHOOSE
;BAGS_FOLD_CARD
;BAGS_FOLD_COMBINE
;BAGS_FOLD_ELEMENTS
;BAGS_FOLD_UNION_DISJOINT
;BAGS_MAP_PREIMAGE
;BAGS_MAP_PREIMAGE_SIZE
;BAGS_MAP_PREIMAGE_INDEX
;BAGS_MAP_SUM
