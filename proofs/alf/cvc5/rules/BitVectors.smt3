(include "../programs/BitVectors.smt3")

; ---------------- ProofRewriteRule::BV_BITBLAST_STEP

(program $bv_mk_bitblast_step_eq ((T Type) (U Type) (W Type) (b1 Bool) (b2 Bool) (a1 W :list) (a2 W :list))
  (T T) Bool
  (
  (($bv_mk_bitblast_step_eq @bv_empty @bv_empty)        true)
  (($bv_mk_bitblast_step_eq (@bbT b1 a1) (@bbT b2 a2))  (alf.cons and (= b1 b2) ($bv_mk_bitblast_step_eq a1 a2)))
  )
)

(define $bv_mk_bitblast_step_extract ((n Int :implicit) (u Int) (l Int) (a1 (BitVec n)))
  (nary.subsequence @bbT @bv_empty l u a1))

(program $bv_mk_bitblast_step_concat_rec ((n Int) (a1 (BitVec n)) (m Int) (a2 (BitVec m) :list))
  ((BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_concat_rec @bv_empty)      @bv_empty)
  (($bv_mk_bitblast_step_concat_rec (concat a1 a2)) (alf.list_concat @bbT a1 ($bv_mk_bitblast_step_concat_rec a2)))
  )
)

(define $bv_mk_bitblast_step_concat ((n Int :implicit) (a (BitVec n)))
  ($bv_mk_bitblast_step_concat_rec (nary.reverse a)))

(define $bv_mk_bitblast_step_const ((n Int :implicit) (a (BitVec n)))
  (nary.reverse ($bv_const_to_bitlist a)))

(program $bv_mk_bitblast_step_var_rec ((n Int) (a (BitVec n)) (i Int))
  ((BitVec n) Int) (BitVec n)
  (
    (($bv_mk_bitblast_step_var_rec a -1)  @bv_empty)
    (($bv_mk_bitblast_step_var_rec a i)   (alf.cons @bbT (@bitOf i a) ($bv_mk_bitblast_step_var_rec a (alf.add i -1))))
  )
)

(define $bv_mk_bitblast_step_var ((n Int :implicit) (a (BitVec n)))
  (nary.reverse ($bv_mk_bitblast_step_var_rec a (alf.add ($bv_bitwidth (alf.typeof a)) -1))))

(define $bv_mk_bitblast_step ((T Type :implicit) (a T))
  (alf.match ((n Int) (a1 (BitVec n)) (a2 (BitVec n) :list) (u Int) (l Int) (m Int) (a3 (BitVec m) :list))
  a
  (
  ((= a1 a2)        ($singleton_elim ($bv_mk_bitblast_step_eq a1 a2)))
  ((extract u l a1) ($bv_mk_bitblast_step_extract u l a1))
  ((concat a1 a3)   ($bv_mk_bitblast_step_concat a))
  (a1               (alf.ite ($is_bin_literal a) 
                      ($bv_mk_bitblast_step_const a)
                      ($bv_mk_bitblast_step_var a)))    ; otherwise assume a variable
  ))
)

(declare-rule bv_bitblast_step
  ((n Int) (a (BitVec n)) (b (BitVec n)))
  :args ((= a b))
  :requires ((($bv_mk_bitblast_step a) b))
  :conclusion (= a b)
)

