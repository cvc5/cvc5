(include "../theories/Sets.smt3")

(define $set_is_empty_eval ((T Type :implicit) (t (Set T)))
  (alf.match ((U Type) (x U) (s (Set U)))
    t
    (
    ((set.empty U) true)
    ((set.singleton x) false)
    ((set.union (set.singleton x) s) false)
    )
  )
)

(declare-rule sets-is-empty-eval ((T Type) (t (Set T)) (b Bool))
  :args ((= (set.is_empty t) b))
  :requires ((($set_is_empty_eval t) b))
  :conclusion (= (set.is_empty t) b)
)
