(include "../theories/Builtin.smt3")
(include "../theories/Reals.smt3")
(include "../theories/Ints.smt3")
(include "../programs/Arith.smt3")
(include "../programs/Utils.smt3")

; @program $arith_rel_sum
; @arg r1 : T. The first arithmetic relation.
; @arg r2 : U. The second arithmetic relation.
; @return the relation that is implied when applications of the relations r1 and
; r2 are added together for ProofRule::ARITH_SUM_UB.
(program $arith_rel_sum ((T Type) (U Type) (S Type) (r1 T) (r2 U))
  (T U) S
  (
    (($arith_rel_sum < <) <)
    (($arith_rel_sum < =) <)
    (($arith_rel_sum < <=) <)
    (($arith_rel_sum <= <) <)
    (($arith_rel_sum <= =) <=)
    (($arith_rel_sum <= <=) <=)
    (($arith_rel_sum = <) <)
    (($arith_rel_sum = =) <=)  ; could be =, but internal proof checker does <=
    (($arith_rel_sum = <=) <=)
  )
)

; @program $arith_mk_zero
; @arg u : Type. The type of the zero, which should be Int or Real.
; @return the zero for the given type.
(program $arith_mk_zero ((T Type))
  (Type) T
  (
    (($arith_mk_zero Real) 0.0)
    (($arith_mk_zero Int)  0)
  )
)

; @program $mk_arith_sum_ub
; @arg F : Bool. A conjunction of arithmetic relations.
; @return the arithmetic relation that is implied by adding each of the
; relations in F together.
(program $mk_arith_sum_ub ((T Type) (U Type) (r (-> T U Bool)) (a T) (b U) (tail Bool :list))
    (Bool) Bool
    (
        (($mk_arith_sum_ub true)               (= 0 0))
        (($mk_arith_sum_ub (and (r a b) tail)) 
          (alf.match ((S Type) (V Type) (r2 (-> S V Bool)) (a2 S :list) (b2 V :list))
            ($mk_arith_sum_ub tail)
            (((r2 a2 b2) (_ ($arith_rel_sum r r2) (+ a a2) (+ b b2))))))
    )
)

; @rule arith_sum_ub implements ProofRule::ARITH_SUM_UB
; @premises F : Bool. A conjunction of arithmetic relations.
; @conclusion The arithmetic relation that is implied by adding each of the
; relations in F together.
(declare-rule arith_sum_ub ((F Bool))
  :premise-list F and
  :conclusion ($mk_arith_sum_ub F)
)

; Computes the conclusion of the ProofRule::ARITH_MULT_POS rule.
(program $mk_arith_mult_pos ((T Type) (U Type) (S Type) (r (-> T U Bool)) (a T) (b U) (m S))
  (S Bool) Bool
  (
    (($mk_arith_mult_pos m (r a b)) (r (* m a) (* m b)))
  )
)

; @rule arith_mult_pos implements ProofRule::ARITH_MULT_POS
(declare-rule arith_mult_pos ((T Type) (m T) (F Bool))
  :args (m F)
  :conclusion (=> (and (> m ($arith_mk_zero (alf.typeof m))) F) ($mk_arith_mult_pos m F))
)

(program $arith_rel_inv ((T Type) (U Type) (S Type))
  (T) S
  (
    (($arith_rel_inv =) =)
    (($arith_rel_inv <) >)
    (($arith_rel_inv <=) >=)
    (($arith_rel_inv >) <)
    (($arith_rel_inv >=) <=)
  )
)

; Computes the conclusion of the ProofRule::ARITH_MULT_NEG rule.
(program $mk_arith_mult_neg ((T Type) (U Type) (S Type) (r (-> T U Bool)) (a T) (b U) (m S))
  (S Bool) Bool
  (
    (($mk_arith_mult_neg m (r a b)) (_ ($arith_rel_inv r) (* m a) (* m b)))
  )
)

; @rule arith_mult_neg implements ProofRule::ARITH_MULT_NEG
(declare-rule arith_mult_neg ((T Type) (m T) (F Bool))
  :args (m F)
  :conclusion (=> (and (< m ($arith_mk_zero (alf.typeof m))) F) ($mk_arith_mult_neg m F))
)

(program arith_rel_trichotomy ((T Type) (U Type) (S Type))
  (T U) S
  (
    ((arith_rel_trichotomy = <) >)
    ((arith_rel_trichotomy = >) <)
    ((arith_rel_trichotomy > =) <)
    ((arith_rel_trichotomy < =) >)
    ((arith_rel_trichotomy > <) =)
    ((arith_rel_trichotomy < >) =)
  )
)

(program arith_rel_neg ((T Type) (U Type) (S Type))
  (T) S
  (
    ((arith_rel_neg <) >=)
    ((arith_rel_neg <=) >)
    ((arith_rel_neg >) <=)
    ((arith_rel_neg >=) <)
  )
)

(program arith_normalize_lit ((T Type) (U Type) (r (-> T U Bool)) (a T) (b U))
  (Bool) Bool
  (
    ((arith_normalize_lit (not (not (r a b)))) (r a b))
    ((arith_normalize_lit (not (r a b)))       (_ (arith_rel_neg r) a b))
    ((arith_normalize_lit (r a b))             (r a b))
  )
)

; Computes the conclusion of the ProofRule::ARITH_TRICHOTOMY rule.
(program $mk_arith_trichotomy ((T Type) (U Type) (S Type) (r1 (-> T U Bool)) (r2 (-> T U Bool)) (a T) (b U) (m S))
  (Bool S) Bool
  (
    (($mk_arith_trichotomy (r1 a b) (r2 a b)) (_ (arith_rel_trichotomy r1 r2) a b))
  )
)

; @rule arith_trichotomy implements ProofRule::ARITH_TRICHOTOMY
(declare-rule arith_trichotomy ((F1 Bool) (F2 Bool))
  :premises (F1 F2)
  :conclusion ($mk_arith_trichotomy (arith_normalize_lit (not F1)) (arith_normalize_lit (not F2)))
)

; Returns the greatest integer less than (integer or real) c.
(program $greatest_int_lt ((R Type) (c R))
  (R) Int
  (
    (($greatest_int_lt c) (let ((ci (alf.to_z c)))
                               (alf.ite (alf.is_eq (alf.to_q c) (alf.to_q ci))
                                 (alf.add -1 ci)
                                 ci)))
  )
)

; @rule int_tight_ub implements ProofRule::INT_TIGHT_UB
(declare-rule int_tight_ub ((R Type) (s Int) (t R))
  :premises ((< s t))
  :conclusion (<= s ($greatest_int_lt t))
)

; Returns the least integer greater than (integer or real) c.
(program $least_int_gt ((R Type) (c R))
  (R) Int
  (
    (($least_int_gt c) (alf.add 1 (alf.to_z c)))
  )
)

; @rule int_tight_lb implements ProofRule::INT_TIGHT_LB
(declare-rule int_tight_lb ((R Type) (s Int) (t R))
  :premises ((> s t))
  :conclusion (>= s ($least_int_gt t))
)
