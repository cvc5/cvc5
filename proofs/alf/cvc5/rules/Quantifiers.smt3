(include "../programs/Quantifiers.smt3")
(include "../theories/Quantifiers.smt3")


(declare-rule instantiate ((F Bool) (xs @List) (ts @List))
  :premises ((forall xs F))
  :args (ts)
  :conclusion (substitute_list xs ts F))

; returns the list of skolems for F
(program mk_skolems ((x @List) (xs @List :list) (F Bool))
  (@List Bool) @List
  (
    ((mk_skolems (@list x xs) F) (alf.cons @list (@quantifiers_skolemize F x) (mk_skolems xs F)))
    ((mk_skolems @list.nil F)    @list.nil)
  )
)

(declare-rule skolemize ((F Bool))
  :premises (F)
  :conclusion
    (alf.match ((T Type) (x @List) (G Bool))
        F
        (
          ((exists x G)       (substitute_list x (mk_skolems x F) G))
          ((not (forall x G)) (substitute_list x (mk_skolems x (exists x (not G))) (not G)))
        ))
)

(declare-rule skolem_intro ((T Type) (x T))
  :args ((@purify x))
  :conclusion (= (@purify x) x)
)

; B is the formula to apply to
; vs is a list of variables to substitution for the variable list ts
; Note we don't currently check whether this is valid renaming.
(declare-rule alpha_equiv ((B Bool) (vs @List) (ts @List))
  :args (B vs ts)
  :conclusion (= B (substitute_list vs ts B))
)

; rule: beta_reduce implements ProofRewriteRule::BETA_REDUCE
; args:
; - eq : Bool. The equality to prove between terms a and b.
; requires: Showing that a beta-reduces to b.
; conclusion: The given equality.
(declare-rule beta-reduce ((T Type) (a T) (b T))
  :args ((= a b))
  :requires ((($beta_reduce a @list.nil) b))
  :conclusion (= a b)
)
