(include "../theories/Arith.smt3")

; Evaluation function for mixed addition
(define arith_eval_add ((T Type :implicit) (U Type :implicit) (x T) (y U))
  (let ((xq (alf.to_q x)))
  (let ((yq (alf.to_q y)))
    (alf.ite (alf.is_eq x xq)
      (alf.add xq yq)
      (alf.ite (alf.is_eq y yq)
        (alf.add xq yq)
        (alf.add x y)))))
)

; Evaluation function for mixed subtraction
(define arith_eval_sub ((U Type :implicit) (T Type :implicit) (x U) (y T))
  (arith_eval_add x (alf.neg y))
)

; Evaluation function for mixed multiplication
(define arith_eval_mul ((T Type :implicit) (U Type :implicit) (x T) (y U))
  (let ((xq (alf.to_q x)))
  (let ((yq (alf.to_q y)))
    (alf.ite (alf.is_eq x xq)
      (alf.mul xq yq)
      (alf.ite (alf.is_eq y yq)
        (alf.mul xq yq)
        (alf.mul x y)))))
)

; Evaluates the difference (- x y) as a rational.
; Note this returns a rational value even if x and y are numeral values.
(define arith_eval_qsub ((U Type :implicit) (T Type :implicit) (x U) (y T))
  (alf.add (alf.to_q x) (alf.neg (alf.to_q y)))
)
