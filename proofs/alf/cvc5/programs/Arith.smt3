(include "../theories/Arith.smt3")
(include "../programs/Utils.smt3")

; Evaluation function for mixed addition
(define arith_eval_add ((T Type :implicit) (U Type :implicit) (x T) (y U))
  (let ((xq (alf.to_q x)))
  (let ((yq (alf.to_q y)))
    (alf.ite (alf.is_eq x xq)
      (alf.add xq yq)
      (alf.ite (alf.is_eq y yq)
        (alf.add xq yq)
        (alf.add x y)))))
)

; Evaluation function for mixed subtraction
(define arith_eval_sub ((U Type :implicit) (T Type :implicit) (x U) (y T))
  (arith_eval_add x (alf.neg y))
)

; Evaluation function for mixed multiplication
(define arith_eval_mul ((T Type :implicit) (U Type :implicit) (x T) (y U))
  (let ((xq (alf.to_q x)))
  (let ((yq (alf.to_q y)))
    (alf.ite (alf.is_eq x xq)
      (alf.mul xq yq)
      (alf.ite (alf.is_eq y yq)
        (alf.mul xq yq)
        (alf.mul x y)))))
)

; Evaluates the difference (- x y) as a rational.
; Note this returns a rational value even if x and y are numeral values.
(define arith_eval_qsub ((U Type :implicit) (T Type :implicit) (x U) (y T))
  (alf.add (alf.to_q x) (alf.neg (alf.to_q y)))
)

;; =============== for ARITH_POLY_NORM

; Definitions of monomials and polynomials.
; A monomial is a list of terms that are ordered by `compare_var` and a rational coefficient.
; A polynomial is a list of monomials whose monomials are ordered by `compare_var`.
(declare-sort @Monomial 0)
(declare-const @mon (-> (! Type :var T :implicit) T Real @Monomial))

(declare-sort @Polynomial 0)
(declare-const @poly.zero @Polynomial)
(declare-const @poly (-> @Monomial @Polynomial @Polynomial) :right-assoc-nil @poly.zero)

; Negate a polynomial.
(program poly_neg ((T Type) (c Real) (a T) (p @Polynomial :list))
  (@Polynomial) @Polynomial
  (
    ((poly_neg @poly.zero)           @poly.zero)
    ((poly_neg (@poly (@mon a c) p)) (alf.cons @poly (@mon a (alf.neg c)) (poly_neg p)))
  )
)

; Add two polynomials.
(program poly_add ((T Type) (U Type) (c1 Real) (a1 T) (c2 Real) (a2 U) (p @Polynomial) (p1 @Polynomial :list) (p2 @Polynomial :list))
  (@Polynomial @Polynomial) @Polynomial
  (
    ((poly_add (@poly (@mon a1 c1) p1) (@poly (@mon a2 c2) p2)) (alf.ite (alf.is_eq a1 a2)
                                                                  (let ((ca (alf.add c1 c2)) (pa (poly_add p1 p2)))
                                                                  ; check if cancels
                                                                  (alf.ite (alf.is_eq ca 0.0) pa (alf.cons @poly (@mon a1 ca) pa)))
                                                                (alf.ite (compare_var a1 a2)
                                                                  (alf.cons @poly (@mon a1 c1) (poly_add p1 (@poly (@mon a2 c2) p2)))
                                                                  (alf.cons @poly (@mon a2 c2) (poly_add (@poly (@mon a1 c1) p1) p2)))))
    ((poly_add @poly.zero p)                                    p)
    ((poly_add p @poly.zero)                                    p)
  )
)

; Multiply the variables of two monomials.
(program mvar_mul_mvar ((T Type) (U Type) (V Type) (W Type) (X Type) (Y Type) (Z Type) (a1 T) (a2 U :list) (b1 V) (b2 W :list))
  (X Y) Z
  (
    ((mvar_mul_mvar (* a1 a2) (* b1 b2))  (alf.ite (compare_var a1 b1)
                                            (alf.cons * a1 (mvar_mul_mvar a2 (* b1 b2)))
                                            (alf.cons * b1 (mvar_mul_mvar (* a1 a2) b2))))
    ((mvar_mul_mvar (* a1 a2) 1)          (* a1 a2))
    ((mvar_mul_mvar 1 (* b1 b2))          (* b1 b2))
    ((mvar_mul_mvar 1 1)                  1)
  )
)

; Multiply two monomials.
(program mon_mul_mon ((T Type) (U Type) (V Type) (W Type) (a1 T) (a2 U) (b1 V) (b2 W) (c1 Real) (c2 Real))
  (@Monomial @Monomial) @Monomial
  (
    ((mon_mul_mon (@mon a1 c1) (@mon a2 c2))  (@mon (mvar_mul_mvar a1 a2) (alf.mul c1 c2)))
  )
)

; Multiply a polynomial by a monomial.
(program poly_mul_mon ((m1 @Monomial) (m2 @Monomial) (p2 @Polynomial :list))
  (@Monomial @Polynomial) @Polynomial
  (
    ((poly_mul_mon m1 (@poly m2 p2)) (poly_add (@poly (mon_mul_mon m1 m2)) (poly_mul_mon m1 p2)))   ; NOTE: this amounts to an insertion sort
    ((poly_mul_mon m1 @poly.zero)    @poly.zero)
  )
)

; Multiply two polynomials.
(program poly_mul ((m @Monomial) (p1 @Polynomial :list) (p @Polynomial))
  (@Polynomial @Polynomial) @Polynomial
  (
    ((poly_mul (@poly m p1) p) (poly_add (poly_mul_mon m p) (poly_mul p1 p)))
    ((poly_mul @poly.zero p)   @poly.zero)
    ((poly_mul p @poly.zero)   @poly.zero)
  )
)

; Get the polynomial for an arithmetic term
(program get_poly_norm ((T Type) (U Type) (V Type) (a T) (a1 U) (a2 V :list))
  (T) @Polynomial
  (
    ((get_poly_norm (- a1))       (poly_neg (get_poly_norm a1)))
    ((get_poly_norm (+ a1 a2))    (poly_add (get_poly_norm a1) (get_poly_norm a2)))
    ((get_poly_norm (- a1 a2))    (poly_add (get_poly_norm a1) (poly_neg (get_poly_norm a2))))
    ((get_poly_norm (* a1 a2))    (poly_mul (get_poly_norm a1) (get_poly_norm a2)))
    ((get_poly_norm (to_real a1)) (get_poly_norm a1))
    ((get_poly_norm a)            (let ((aq (alf.to_q a)))
                                  ; if it is a constant, which can be tested if to_q is idempotent after the first
                                  (alf.ite (alf.is_eq aq (alf.to_q aq))
                                    ; if it is zero, it cancels, otherwise it is 1 with itself as coefficient
                                    (alf.ite (alf.is_eq aq 0.0)
                                      @poly.zero
                                      (@poly (@mon 1 aq)))
                                  (@poly (@mon (* a) 1.0)))))    ; introduces list
  )
)

; Helper for the method below.
(program poly_is_equal_mod_c_rec ((c Real) (T Type) (c1 Real) (a T) (c2 Real) (p1 @Polynomial :list) (p2 @Polynomial :list))
  (Real @Polynomial @Polynomial) Bool
  (
    ((poly_is_equal_mod_c_rec c @poly.zero @poly.zero)                          true)
    ((poly_is_equal_mod_c_rec c (@poly (@mon a c1) p1) (@poly (@mon a c2) p2))  (alf.requires c (alf.qdiv c2 c1) (poly_is_equal_mod_c_rec c p1 p2)))
  )
)

; Returns true if a and b normalize to the same polynomial
(define is_poly_norm_arith ((T Type :implicit) (a T) (b T))
  (alf.is_eq (get_poly_norm a) (get_poly_norm b))
)

; Returns true if the two given polynomials are equivalent up to modulus by a (non-zero, positive if reqPos is true) coefficient.
(program poly_is_equal_mod_c ((T Type) (c1 Real) (a T) (c2 Real) (p1 @Polynomial :list) (p2 @Polynomial :list) (reqPos Bool))
  (@Polynomial @Polynomial Bool) Bool
  (
    ((poly_is_equal_mod_c @poly.zero @poly.zero reqPos)                         true)
    ((poly_is_equal_mod_c (@poly (@mon a c1) p1) (@poly (@mon a c2) p2) reqPos) (let ((c (alf.qdiv c2 c1))) 
                                                                                (alf.requires (alf.and reqPos (alf.is_neg c)) false
                                                                                (poly_is_equal_mod_c_rec c p1 p2))))
  )
)

; Returns true if a and b normalize to polynomials that are same up to modulus by a (non-zero, positive if reqPos is true) coefficient.
(define is_poly_norm_arith_mod_c ((T Type :implicit) (a T) (b T) (reqPos Bool))
  (poly_is_equal_mod_c (get_poly_norm a) (get_poly_norm b) reqPos)
)
