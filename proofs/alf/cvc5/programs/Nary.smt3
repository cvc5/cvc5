(include "../programs/Utils.smt3")

; =============================================
;  Right-associative null-terminated operators
; =============================================
; The following functions work with right-associative symbols with a defined
; null terminator, i.e. attribute :right-assoc-nil.  Those behave somewhat
; similar to functional programming lists. Therefore, the symbol will typically
; be called `cons` in the following and its nil terminator will be `nil`.


; nary.is_subset cons nil c l
; Retuns `true` if l nary.ctn c.
(program nary.is_subset
    ((L Type) (cons (-> L L L)) (nil L) (c L) (t L) (xs L :list))
    ((-> L L L) L L L) Bool
    (
        ((nary.is_subset cons nil (cons c xs) t) (alf.ite (alf.is_neg (alf.list_find cons t c)) false (nary.is_subset cons nil xs t)))
        ((nary.is_subset cons nil nil t)         true)
    )
)

; nary.remove cons c xs
; Removes the first occurrence of `c` from `xs`.
(program nary.remove
    ((L Type) (cons (-> L L L)) (nil L) (c L) (y L) (xs L :list))
    ((-> L L L) L L L) L
    (
        ((nary.remove cons nil c (cons c xs)) xs)
        ((nary.remove cons nil c (cons y xs)) (alf.cons cons y (nary.remove cons nil c xs)))
        ((nary.remove cons nil c nil)         nil)
    )
)

; Helper for reverse
(program nary.reverseRec
    ((L Type) (cons (-> L L L)) (nil L) (x L) (xs L :list) (l L :list))
    ((-> L L L) L L L) L
    (
        ((nary.reverseRec cons nil (cons x xs) l) (nary.reverseRec cons nil xs (alf.cons cons x l)))
        ((nary.reverseRec cons nil nil l)         l)
    )
)

; nary.reverse cons nil xs
; Reverses the list `xs`.
(program nary.reverse
    ((L Type) (cons (-> L L L)) (x L) (xs L :list))
    (L) L
    (
        ((nary.reverse (cons x xs)) (let ((nil (alf.nil cons x xs))) (nary.reverseRec cons nil (cons x xs) nil)))
        ((nary.reverse x)           x)
    )
)

; returns the number of children of the input
(program nary.nchild
    ((L Type) (I Type) (cons (-> L L L)) (nil L) (i I) (x L) (xs L :list))
    ((-> L L L) L L) I
    (
        ((nary.nchild cons nil (cons x xs)) (alf.add 1 (nary.nchild cons nil xs)))
        ((nary.nchild cons nil nil)         0)
        ((nary.nchild cons nil x)           1) ; if not in list form
    )
)

; nary.is_prefix cons t s
; Retuns `true` if t is a prefix of s
(program nary.is_prefix
    ((L Type) (cons (-> L L L)) (nil L) (t L) (c1 L) (c2 L) (xs1 L :list) (xs2 L :list))
    ((-> L L L) L L L) Bool
    (
        ((nary.is_prefix cons nil nil t)                       true)
        ((nary.is_prefix cons nil t nil)                       false)
        ((nary.is_prefix cons nil (cons c1 xs1) (cons c2 xs2)) (alf.ite (alf.is_eq c1 c2) (nary.is_prefix cons nil xs1 xs2) false))
    )
)

; nary.is_compatible cons t s
; Retuns `true` if t is a prefix of s, or s is a prefix of t.
(program nary.is_compatible
    ((L Type) (cons (-> L L L)) (nil L) (t L) (c1 L) (c2 L) (xs1 L :list) (xs2 L :list))
    ((-> L L L) L L L) Bool
    (
        ((nary.is_compatible cons nil nil t)                       true)
        ((nary.is_compatible cons nil t nil)                       true)
        ((nary.is_compatible cons nil (cons c1 xs1) (cons c2 xs2)) (alf.ite (alf.is_eq c1 c2) (nary.is_compatible cons nil xs1 xs2) false))
    )
)

; program: nary.prefix
; args:
; - cons (-> L L L): The n-ary function symbol.
; - nil L: The nil terminator of cons.
; - l Int: The number of elements in the prefix left to extract.
; - t L: The term to process, which is expected to be a cons-list.
; return: the prefix of t consisting of at most l children.
(program nary.prefix
    ((L Type) (cons (-> L L L)) (nil L) (t L) (c1 L) (c2 L :list) (l Int))
    ((-> L L L) L Int L) Bool
    (
        ((nary.prefix cons nil l nil)             nil)
        ((nary.prefix cons nil 0 t)               nil)
        ((nary.prefix cons nil l (cons c1 c2))    (alf.cons cons c1 (nary.prefix cons nil (alf.add l -1) c2)))
    )
)

; program: nary.subsequence
; args:
; - cons (-> L L L): The n-ary function symbol.
; - nil L: The nil terminator of cons.
; - l Int: The starting index, inclusive, of elements of t to extract.
; - u Int: The end index, inclusive, of elements of t to extract.
; - t L: The term to process, which is expected to be a cons-list.
; return: >
;   The subsequent of t between indices l and u inclusive. Indices that
;   fall out of bounds of the number of children of t are ignored.
(program nary.subsequence
    ((L Type) (cons (-> L L L)) (nil L) (t L) (c1 L) (c2 L :list) (u Int) (l Int))
    ((-> L L L) L Int Int L) Bool
    (
        ((nary.subsequence cons nil l u nil)            nil)
        ((nary.subsequence cons nil 0 u t)              (nary.prefix cons nil (alf.add u 1) t))
        ((nary.subsequence cons nil l u (cons c1 c2))   (nary.subsequence cons nil (alf.add l -1) (alf.add u -1) c2))
    )
)

; nary.join
(program nary.join
    ((L Type) (cons (-> L L L)) (nil L) (elim-nil L) (c L) (x L) (xs L :list) (y L) (ys L :list))
    ((-> L L L) L L L) L
    (
        ((nary.join cons nil (cons x nil) (cons x ys)) ys)
        ((nary.join cons nil (cons x xs) y)            (cons x (nary.join cons nil xs y)))
    )
)
