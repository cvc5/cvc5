(include "../theories/BitVectors.smt3")


(program $bv_get_const_child ((n Int) (m Int) (k Int) (f (-> (BitVec n) (BitVec m) (BitVec k))) (a (BitVec n)) (b (BitVec m) :list))
  ((BitVec n)) (BitVec n)
  (
    (($bv_get_const_child (f a b))  (alf.ite ($is_bin_literal a) a ($bv_get_const_child b)))
    (($bv_get_const_child a)        @bv_empty)    ; indicates no child
  )
)

(define $bv_bit_set ((n Int :implicit) (a (BitVec n)) (i Int))
  (alf.is_eq (alf.extract a i i) #b1))

(program $bv_const_to_bitlist_rec ((n Int) (a (BitVec n)) (i Int))
  ((BitVec n) Int) (BitVec n)
  (
    (($bv_const_to_bitlist_rec a -1)  @bv_empty)
    (($bv_const_to_bitlist_rec a i)   (alf.cons @bbT ($bv_bit_set a i) ($bv_const_to_bitlist_rec a (alf.add i -1))))
  )
)

(define $bv_const_to_bitlist ((n Int :implicit) (c (BitVec n)))
  ($bv_const_to_bitlist_rec c (alf.add (alf.len c) -1)))
  

(define $nary_app ((T Type :implicit) (U Type :implicit) (V Type :implicit) (f (-> T U V)) (a T) (b U))
  (f a (f b (alf.nil f a b))))
