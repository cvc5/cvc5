
(include "../theories/Builtin.smt3")
(include "../programs/Nary.smt3")

(include "../theories/Arith.smt3")
(include "../theories/Strings.smt3")

; This signature is used for both strings and sequences, where we often
; write "string" in the documentation to refer to a string or sequence.

; Return true if s is the empty string or sequence.
(program $str_is_empty ((U Type) (x U))
  (U) Bool
  (
    (($str_is_empty (seq.empty U)) true)
    (($str_is_empty "") true)
    (($str_is_empty x) false)
  )
)

; Return the character type of the string-like type T
(define $char_type_of ((T Type)) 
  (alf.match ((U Type)) T (((Seq U) U)))
)

; Return the concatenation of strings x and y, treated as lists.
(define $str_concat ((T Type :implicit) (x (Seq T)) (y (Seq T)))
  (alf.list_concat str.++ x y)
)

; Return the result of prepending of string x to string y where the latter is
; treated as a list.
(define $str_cons ((T Type :implicit) (x (Seq T)) (y (Seq T)))
  (alf.cons str.++ x y)
)

; Return true if n is a valid code point [0, 196607].
(define $str_is_code_point ((n Int))
  (alf.ite (alf.is_z n)
  (alf.ite ($compare_geq 196608 n)
    (alf.not (alf.is_neg n))
    false)
  false))

; Return t if it corresponds to the empty string, otherwise evaluates
; to an unevaluated alf.requires term.
(define $str_self_if_empty ((T Type :implicit) (t T))
  (alf.requires t (mk_emptystr (alf.typeof t)) t)
)

; Return the fixed length for the regular expression if it can be inferred.
(program $str_fixed_len_re ((r RegLan) (s1 String) (s2 String) (r1 RegLan :list))
  (RegLan) Int
  (
  (($str_fixed_len_re (re.++ r r1))     (alf.add ($str_fixed_len_re r) ($str_fixed_len_re r1)))
  (($str_fixed_len_re re.allchar)       1)
  (($str_fixed_len_re (re.range s1 s2)) 1)
  (($str_fixed_len_re (str.to_re s1))   (alf.len s1))
  (($str_fixed_len_re (re.union r r1))  (let ((n ($str_fixed_len_re r)))
                                          (alf.ite (alf.is_eq r1 re.none)
                                            n
                                            (alf.requires ($str_fixed_len_re r1) n n))))
  (($str_fixed_len_re (re.inter r r1))  (let ((n ($str_fixed_len_re r)))
                                          (alf.ite (alf.is_eq r1 re.all)
                                            n
                                            (alf.requires ($str_fixed_len_re r1) n n))))
  )
)

; `$str_is_char_range s1 s2` returns true if (re.range s1 s2) is a character
; range (i.e. s1 and s2 are strings of length 1).
(define $str_is_char_range ((s1 String) (s2 String))
  (alf.and (alf.is_eq (alf.len s1) 1) (alf.is_eq (alf.len s2) 1))
)

;;-------------------- RE evaluation

(declare-const @re.null RegLan)

; *** NOTE: This method has an exponential runtime. It is a placeholder for a
; more efficient algorithm (via NFAs) to be written later.
; The call ($str_eval_str_in_re_rec s 0 r1 @re.null) returns true if s is in r1.
; The call ($str_eval_str_in_re_rec s n r1 r2) returns true if s = s1 ++ s2 for some s1, s2 such that:
; - s1 in r1
; - s2 in r2
; - s1 contains at least n characters.
(program $str_eval_str_in_re_rec ((s String) (s1 String) (s2 String) (n Int) (r1 RegLan) (rr RegLan :list) (r2 RegLan) (sr String))
  (String Int RegLan RegLan) Bool
  (
  (($str_eval_str_in_re_rec s 0 (re.++ r1 rr) @re.null)     ($str_eval_str_in_re_rec s 0 r1 rr))
  (($str_eval_str_in_re_rec s 0 (re.inter r1 rr) @re.null)  (alf.ite ($str_eval_str_in_re_rec s 0 r1 @re.null)
                                                              ($str_eval_str_in_re_rec s 0 rr @re.null)
                                                              false))
  (($str_eval_str_in_re_rec s 0 (re.union r1 rr) @re.null)  (alf.ite ($str_eval_str_in_re_rec s 0 r1 @re.null)
                                                              true
                                                              ($str_eval_str_in_re_rec s 0 rr @re.null)))
  (($str_eval_str_in_re_rec s 0 (re.* r1) @re.null)         (alf.ite (alf.is_eq s "")
                                                              true
                                                              ; to make progress, first component must be non-empty
                                                              ($str_eval_str_in_re_rec s 1 r1 (re.* r1))))
  (($str_eval_str_in_re_rec s 0 (str.to_re sr) @re.null)    (alf.is_eq s sr))
  (($str_eval_str_in_re_rec s 0 (re.range s1 s2) @re.null)  (let ((cs (alf.to_z s)))
                                                            (alf.requires (alf.len s1) 1
                                                            (alf.requires (alf.len s2) 1
                                                            (alf.ite (alf.is_eq (alf.len s) 1)
                                                                (alf.and ($compare_geq cs (alf.to_z s1))
                                                                         ($compare_geq (alf.to_z s2) cs))
                                                                false)))))
  (($str_eval_str_in_re_rec s 0 re.allchar @re.null)        (alf.is_eq (alf.len s) 1))
  (($str_eval_str_in_re_rec s 0 re.all @re.null)            true)
  (($str_eval_str_in_re_rec s 0 re.none @re.null)           false)
  (($str_eval_str_in_re_rec s 0 (re.comp r1) @re.null)      (alf.not ($str_eval_str_in_re_rec s 0 r1 @re.null)))
  (($str_eval_str_in_re_rec s n r1 r2)                      (let ((ls (alf.len s)))
                                                            (let ((ss1 (alf.extract s 0 (alf.add n -1))))
                                                            (let ((ss2 (alf.extract s n ls)))
                                                            (let ((res (alf.ite ($str_eval_str_in_re_rec ss1 0 r1 @re.null)
                                                                       (alf.ite ($str_eval_str_in_re_rec ss2 0 r2 @re.null)
                                                                         true false)
                                                                       false)))
                                                            (alf.ite res true
                                                            (alf.ite (alf.is_eq n ls) false
                                                              ($str_eval_str_in_re_rec s (alf.add n 1) r1 r2))))))))
  )
)

; Returns true if s is in regular expression r.
; Does not evaluate if s is not a string literal.
(define $str_eval_str_in_re ((s String) (r RegLan))
  (alf.ite (alf.is_str s)
    ($str_eval_str_in_re_rec s 0 r @re.null)
    (str.in_re s r)))

;;-------------------- Skolem terms

; The following side conditions are used for computing terms that define
; Skolems, which are used in reductions. Notice that Skolem terms may use
; terms that are not in original form, meaning that the definitions of Skolems
; may themselves contain Skolems. This is to avoid the use of a side condition
; for computing the original form of a term in the ALF signature, which
; naively is exponential.

; Get the term corresponding to the prefix of term s of fixed length n.
(define skolem_prefix ((U Type :implicit) (s (Seq U)) (n Int))
  (str.substr s 0 n)
)

; Get the term corresponding to the suffix of term s starting from position n.
(define skolem_suffix_rem ((U Type :implicit) (s (Seq U)) (n Int))
  (str.substr s n (- (str.len s) n))
)

; Get the term corresponding to the prefix of term s except for length n.
(define $str_prefix_wo_len ((U Type :implicit) (s (Seq U)) (n Int))
  (str.substr s 0 (- (str.len s) n))
)

; Get the term corresponding to the suffix of term s of length n.
(define $str_suffix_w_len ((U Type :implicit) (s (Seq U)) (n Int))
  (str.substr s (- (str.len s) n) n)
)

; The unified splitting term for t and s, which is the term that denotes the
; prefix (or suffix if rev is true) remainder of t (resp. s) in the case that
; t (resp. s) is the longer string.
(program skolem_unify_split ((U Type) (t (Seq U)) (s (Seq U)) (rev Bool))
  ((Seq U) (Seq U) Bool) (Seq U)
  (
    ((skolem_unify_split t s true)  (ite (>= (str.len t) (str.len s))
                                      (skolem_prefix t (- (str.len t) (str.len s)))
                                      (skolem_prefix s (- (str.len s) (str.len t)))))
    ((skolem_unify_split t s false) (ite (>= (str.len t) (str.len s))
                                      (skolem_suffix_rem t (str.len s))
                                      (skolem_suffix_rem s (str.len t))))
  )
)

; Get the term corresponding to the prefix of s before the first occurrence of
; t in s.
(define skolem_first_ctn_pre ((U Type :implicit) (s (Seq U)) (t (Seq U)))
  (skolem_prefix s (str.indexof s t 0)))

; Get the term corresponding to the suffix of s after the first occurrence of
; t in s.
(define skolem_first_ctn_post ((U Type :implicit) (s (Seq U)) (t (Seq U)))
  (skolem_suffix_rem s (+ (str.len (@purify (skolem_first_ctn_pre s t))) (str.len t))))

;;-------------------- Utilities

; Return reverse of t if rev = true, return t unchanged otherwise.
(define $str_rev ((U Type :implicit) (rev Bool) (t U)) 
  (alf.ite rev (nary.reverse t) t))

; String nary-intro, which ensures that the input t is a str.++ application.
; In particular, if it is not a str.++ and not the empty string, then we return
; (str.++ t empty) where empty is the empty string for the type of t.
(program $str_nary_intro
    ((T Type) (t (Seq T)) (ss (Seq T) :list))
    ((Seq T)) (Seq T)
    (
        (($str_nary_intro (str.++ t ss)) (str.++ t ss))
        (($str_nary_intro t)             (let ((nil (mk_emptystr (alf.typeof t))))
                                            (alf.ite (alf.is_eq t nil) t ($str_cons t nil))))
    )
)

; Regular expression nary-intro, which ensures that the input t is a re.++
; application. In particular, if it is not a re.++ and not the empty regular
; expression, then we return (re.++ t @re.empty).
(program $re_nary_intro ((t RegLan) (ss RegLan :list))
    (RegLan) RegLan
    (
        (($re_nary_intro (re.++ t ss))    (re.++ t ss))
        (($re_nary_intro @re.empty)       @re.empty)
        (($re_nary_intro t)               (alf.cons re.++ t @re.empty))
    )
)

; String nary-elimination, which ensures that the input t is not a str.++
; application. In particular, if t is of the form (str.++ t1 empty) where empty
; is the empty string for the type of t, we return t1.
(program $str_nary_elim
    ((T Type) (t (Seq T)) (ss (Seq T) :list))
    ((Seq T)) (Seq T)
    (
        (($str_nary_elim (str.++ t ss)) (let ((nil (mk_emptystr (alf.typeof t))))
                                           (alf.ite (alf.is_eq ss nil) t (str.++ t ss))))
        (($str_nary_elim t)             ($str_self_if_empty t))
    )
)

; Regular expression nary-elimination, which ensures that the input t is not a
; re.++ application. In particular, if t is of the form (re.++ t1 @re.empty),
; we return t1.
(program $re_nary_elim ((t RegLan) (ss RegLan :list))
    (RegLan) RegLan
    (
        (($re_nary_elim (re.++ t ss)) (alf.ite (alf.is_eq ss @re.empty) t (re.++ t ss)))
        (($re_nary_elim t)            t)
    )
)

;;-------------------- Reductions

; In the following, a "reduction predicate" refers to a formula that is used
; to axiomatize an extended string program in terms of (simpler) programs.

; Compute the reduction predicate for (str.substr x n m) of sort U.
(program string_reduction_substr ((U Type) (x (Seq U)) (n Int) (m Int))
  ((Seq U) Int Int) Bool
  (
    ((string_reduction_substr x n m)
      (let ((k (@purify (str.substr x n m))))
      (let ((npm (+ n m)))
      (let ((k1 (@purify (skolem_prefix x n))))
      (let ((k2 (@purify (skolem_suffix_rem x npm))))
      (ite
        ; condition
        (and (>= n 0)(> (str.len x) n) (> m 0))
        ; if branch
        (and (= x (str.++ k1 k k2))
            (= (str.len k1) n)
            (or (= (str.len k2) (- (str.len x) npm))
                (= (str.len k2) 0))
            (<= (str.len k) m))
        ; else branch
        (= k (mk_emptystr (alf.typeof x)))
        ))))))
  )
)

; Compute the reduction predicate for (str.indexof x y n) of sort U.
(program string_reduction_indexof ((U Type) (x (Seq U)) (y (Seq U)) (n Int))
  ((Seq U) (Seq U) Int) Bool
  (
    ((string_reduction_indexof x y n)
      (let ((k (@purify (str.indexof x y n))))
      (let ((xn (str.substr x n (- (str.len x) n))))
      (let ((k1 (@purify (skolem_first_ctn_pre xn y))))
      (let ((k2 (@purify (skolem_first_ctn_post xn y))))
      (ite
        (or (not (str.contains xn y)) (> n (str.len x)) (> 0 n))
        (= k (alf.neg 1))
        (ite
          (= y (mk_emptystr (alf.typeof x)))
          (= k n)
          (and (= xn (str.++ k1 y k2))
              (not (str.contains
                        (str.++ k1 (str.substr y 0 (- (str.len y) 1))) y))
              (= k (+ n (str.len k1)))))))))))
  )
)

; Compute the reduction predicate for term t of sort s. Note that the operators
; listed in comments are missing from the signature currently.
(program string_reduction_pred ((U Type) (x (Seq U)) (y (Seq U)) (n Int) (m Int))
  ((Seq U)) Bool
  (
    ((string_reduction_pred (str.substr x n m)) (string_reduction_substr x n m))
    ((string_reduction_pred (str.indexof x y n)) (string_reduction_indexof x y n))
    ; str.update
    ; str.from_int
    ; str.to_int
    ; seq.nth
    ; str.replaceall
    ; str.replace_re
    ; str.replace_re_all
    ; str.to_lower
    ; str.to_upper
    ; str.rev
    ; str.leq
  )
)

; Compute the eager reduction predicate for (str.contains t r) where s
; is the sort of t and r.
; This is the formula:
;    (ite (str.contains t r) (= t (str.++ sk1 r sk2)) (not (= t r)))
(program string_eager_reduction_contains ((U Type) (t (Seq U)) (r (Seq U)))
  ((Seq U) (Seq U)) Bool
  (
    ((string_eager_reduction_contains t r)
        (let ((k1 (@purify (skolem_first_ctn_pre t r))))
        (let ((k2 (@purify (skolem_first_ctn_post t r))))
        (ite
          (str.contains t r)
          (= t (str.++ k1 r k2))
          (not (= t r)))
        )))
  )
)

; Compute the eager reduction predicate for (str.code s)
(define string_eager_reduction_to_code ((s String))
  (let ((t (str.to_code s)))
  (ite
    (= (str.len s) 1)
    (and (>= t 0) (< t 196608))
    (= t (alf.neg 1))))
)

; Compute the eager reduction predicate for (str.indexof x y n)
(program string_eager_reduction_indexof ((U Type) (x U) (y U) (n Int))
  (U U Int) Bool
  (
    ((string_eager_reduction_indexof x y n)
        (let ((t (str.indexof x y n)))
        (and (or (= t (alf.neg 1)) (>= t n))
             (<= t (str.len x)))))
  )
)

(program string_eager_reduction_in_re ((U Type) (x (Seq U)) (r RegLan))
  (U RegLan) Bool
  (
    ((string_eager_reduction_in_re x r) (=> (str.in_re x r) (= (str.len x) ($str_fixed_len_re r))))
  )
)

; Compute the eager reduction predicate of term t of type U.
(program mk_string_eager_reduction ((U Type) (x U) (y U) (r RegLan) (n Int) (m Int))
  (U) Bool
  (
    ((mk_string_eager_reduction (str.to_code x)) (string_eager_reduction_to_code x))
    ((mk_string_eager_reduction (str.contains x y)) (string_eager_reduction_contains x y))
    ((mk_string_eager_reduction (str.indexof x y n)) (string_eager_reduction_indexof x y n))
    ((mk_string_eager_reduction (str.in_re x r)) (string_eager_reduction_in_re x r))
  )
)

; A helper method for computing the conclusion of ProofRule::RE_UNFOLD_POS.
; For a regular expression (re.++ R1 ... Rn), re_unfold_pos_concat returns a pair of terms
; where the first term is a concatenation (str.++ t1 ... tn) and the second
; is a conjunction M of literals of the form (str.in_re ti Ri), such that
;   (str.in_re x (re.++ R1 ... Rn))
; is equivalent to
;   (and (= x (str.++ t1 ... tn)) M)
; We use the optimization that Rj may be (str.to_re tj); otherwise tj is an
; application of the unfolding skolem program @re_unfold_pos_component.
(program re_unfold_pos_concat_rec ((t String) (r1 RegLan) (r2 RegLan :list) (ro RegLan) (i Int))
  (String RegLan RegLan Int) (@Pair String Bool)
  (
    ((re_unfold_pos_concat_rec t @re.empty ro i)       (@pair "" true))
    ((re_unfold_pos_concat_rec t (re.++ r1 r2) ro i)
      ; match recursive call
      (alf.match ((c String :list) (M Bool :list))
        (re_unfold_pos_concat_rec t r2 ro (alf.add i 1))
        (((@pair c M)
          ; match on what r1 is
          (alf.match ((s String) (r RegLan))
            r1
            (
              ; a constant regular expression, append s
              ((str.to_re s) (@pair (str.++ s c) M))
              ; otherwise, make the skolem and append with constraint
              (r            (let ((k (@re_unfold_pos_component t ro i)))
                            (@pair (str.++ k c) (and (str.in_re k r) M))))
            )
          )
        ))
      )
    )
  )
)

(define re_unfold_pos_concat ((t String) (r RegLan))
  (re_unfold_pos_concat_rec t r r 0)
)

; Returns a formula corresponding to a conjunction saying that each of the
; elements of str.++ application t is empty. For example for
;   (str.++ x (str.++ y ""))
; this returns:
;  (and (= x "") (and (= y "") true))
(program non_empty_concats ((U Type) (t (Seq U)) (s U :list))
  (U) Bool
  (
    ((non_empty_concats t)             ($str_self_if_empty t))
    ((non_empty_concats (str.++ t s))  (alf.cons and (not (= t (mk_emptystr (alf.typeof t)))) (non_empty_concats s)))
  )
)

; Returns true if the length of s evaluates to one, false otherwise.
(define string_check_length_one ((s String)) (alf.is_eq (alf.len s) 1))

; Returns true if the length of s evaluates to greater than one, false otherwise.
(define check_length_gt_one ((s String)) (alf.is_eq (alf.is_neg (alf.add 1 (alf.neg (alf.len s)))) true))

; Get first character or empty string from term t.
; If t is of the form (str.++ s ...), return t.
; If t is an empty string, return t.
(program string_head_or_empty ((U Type) (t (Seq U)) (tail (Seq U) :list))
  ((Seq U)) (Seq U)
  (
    ((string_head_or_empty (str.++ t tail)) t)
    ((string_head_or_empty t)               ($str_self_if_empty t))
  )
)

; Flatten constants in str.++ application s. Notice that the rewritten form
; of strings in cvc5 are such that constants are grouped into constants of
; length >=1 which we call "word" constants. For example, the cvc5 rewritten
; form of (str.++ "A" "B" x) is (str.++ "AB" x). Similarly for sequences,
; the rewriten form of (str.++ (seq.unit 0) (seq.unit 1) x) is
; (str.++ (str.++ (seq.unit 0) (seq.unit 1)) x).
; Many string rules rely on processing the prefix of strings, which
; involves reasoning about the characters one-by-one. Since the above term
; has a level of nesting when word constants of size > 1 are involved, this
; method is used to "flatten" str.++ applications so that we have a uniform
; way of reasoning about them in proof rules. In this method, we take a
; str.++ application corresponding to a string term in cvc5 rewritten form.
; It returns the flattened form such that there are no nested applications of
; str.++. For example, given input:
;    (str.++ "AB" (str.++ x ""))
; we return:
;    (str.++ "A" (str.++ "B" (str.++ x "")))
; Notice that this is done for all word constants in the chain recursively.
; It does not insist that the nested concatenations are over characters only.
; This rule may fail if s is not a str.++ application corresponding to a term
; in cvc5 rewritten form.

; Helper for below, assumes t is a non-empty word constant.
; For example, given "AB", this returns (str.++ "A" (str.++ "B" "")).
(program $str_flatten_word ((t String))
  (String) String
  (
    (($str_flatten_word t) 
      (alf.ite (string_check_length_one t)
        ($str_cons t "")
        ($str_cons (alf.extract t 0 0) ($str_flatten_word (alf.extract t 1 (alf.len t))))))
  )
)
(program $str_flatten ((U Type) (t (Seq U)) (tail (Seq U) :list) (tail2 (Seq U) :list))
  ((Seq U)) (Seq U)
  (
    ; required for sequences
    (($str_flatten (str.++ (str.++ t tail2) tail)) 
        ($str_concat (str.++ t tail2) ($str_flatten tail)))
    (($str_flatten (str.++ t tail))
        ; otherwise, check whether t is a word constant of length greater than one
        (alf.ite (check_length_gt_one t)
          ; if so, we flatten the word using the method above and concatenate it.
          ($str_concat ($str_flatten_word t) ($str_flatten tail))
          ; if not, we just append it to the result of the recursive call
          ($str_cons t ($str_flatten tail))))
    (($str_flatten t)   ($str_self_if_empty t))
  )
)

; Helper for collecting adjacent constants. This side condition takes as input
; a str.++ application s. It returns a pair whose concatenation is equal to s,
; whose first component corresponds to a word constant, and whose second
; component is a str.++ application whose first element is not a character.
; For example, for:
;   (str.++ "A" (str.++ "B" (str.++ x "")))
; We return:
;   (@pair "AB" (str.++ x ""))
(program string_collect_acc ((U Type) (t (Seq U)) (tail (Seq U) :list))
  ((Seq U)) (@Pair (Seq U) (Seq U))
  (
    ; sequence not handled yet
    ; Check if t is a word constant
    ((string_collect_acc (str.++ t tail))
      (alf.ite (string_check_length_one t)
        (alf.match ((s1 (Seq U)) (s2 (Seq U))) 
          (string_collect_acc tail)
          (
            ((@pair "" s2)  (@pair t s2))
            ((@pair s1 s2)  (@pair (alf.concat t s1) s2))    ; concatenate the constant
          )
        )
        (@pair "" (str.++ t tail))))
    ((string_collect_acc "")            (@pair "" ""))
  )
)

; Collect adjacent constants for the prefix of string s. For example:
;    (str.++ "A" (str.++ "B" (str.++ x "")))
; we return:
;    (str.++ (str.++ "A" (str.++ "B" "")) (str.++ x ""))
; This side condition may fail if s is not a str.++ application.
; Notice that the collection of constants is done for all word constants in the
; term s recursively.
(program string_collect ((U Type) (t (Seq U)) (s (Seq U) :list))
  ((Seq U)) (Seq U)
  (
    ((string_collect (str.++ t s))
      (alf.match ((s1 (Seq U)) (s2 (Seq U)))
        (string_collect_acc (str.++ t s))
        (
          ; did not strip a constant prefix, just append t to the result of processing s
          ((@pair "" s2)
            ($str_cons t (string_collect s)))
          ; stripped a constant prefix, append it to second term in the pair
          ((@pair s1 s2)
            ($str_cons s1 (string_collect s2)))
        )
      )
    )
    ((string_collect t)       ($str_self_if_empty t))
  )
)

; Strip equal prefix of s and t. This returns the pair corresponding to s and
; t after dropping the maximal equal prefix removed. For example, for:
;   (str.++ x (str.++ y (str.++ z "")))
;   (str.++ x (str.++ w ""))
; This method will return:
;   (pair (str.++ y (str.++ z "")) (str.++ w ""))
; This side condition may fail if s or t is not a str.++ application.
(program strip_prefix ((U Type) (t (Seq U)) (s (Seq U)) (t2 (Seq U) :list) (s2 (Seq U) :list))
  ((Seq U) (Seq U)) (@Pair (Seq U) (Seq U))
  (
    ((strip_prefix (str.++ t t2) (str.++ t s2)) (strip_prefix t2 s2))
    ((strip_prefix t s)                         (@pair t s))
  )
)

; Helper for $str_overlap.
(program $str_overlap_rec ((U Type) (s (Seq U)) (s1 (Seq U) :list) (t (Seq U)) (nil (Seq U)))
  ((Seq U) (Seq U) (Seq U)) Int
  (
  (($str_overlap_rec nil (str.++ s s1) t) (alf.ite (nary.is_compatible str.++ nil (str.++ s s1) t)
                                            0
                                            (alf.add 1 ($str_overlap_rec nil s1 t))))
  (($str_overlap_rec nil s t)             0)
  )
)

; Returns the minimum number of characters that must be skipped in s before
; string t can be compatible with it. For example:
;   $str_overlap (str.++ "A" "B" "C" "") (str.++ "B" "C" "D" "") = 1
;   $str_overlap (str.++ "A" "B" "C" "") (str.++ "B" "") = 1
;   $str_overlap (str.++ "A" "B" "C" "") (str.++ "E" "") = 3
;   $str_overlap (str.++ "A" "B" "C" "") (str.++ "A" "A" "") = 3
;   $str_overlap (str.++ "A" "B" "C" "") (str.++ "A" "") = 0
; Expects s and t to be in nary (flattened) form.
(define $str_overlap ((U Type :implicit) (s (Seq U)) (t (Seq U)))
  ($str_overlap_rec (mk_emptystr (alf.typeof s)) s t))

; Helper for $str_mk_re_loop_elim.
; When we call `$str_mk_re_loop_elim n d r rr`, we first decrement n until it
; is zero, while accumulating rr. When it is zero, then rr is r^n.
; We then decrement d until it is zero, while adding regular expressions
; to a union, giving us (re.union r^n ... r^{n+d}).
(program $str_mk_re_loop_elim_rec ((n Int) (d Int) (r RegLan) (rr RegLan :list))
  (Int Int RegLan RegLan) RegLan
  (
    (($str_mk_re_loop_elim_rec 0 0 r rr) (alf.cons re.union ($singleton_elim rr) re.none))
    (($str_mk_re_loop_elim_rec 0 d r rr) (alf.cons re.union ($singleton_elim rr) ($str_mk_re_loop_elim_rec 0 (alf.add d -1) r (re.++ r rr))))
    (($str_mk_re_loop_elim_rec n d r rr) ($str_mk_re_loop_elim_rec (alf.add n -1) d r (re.++ r rr)))
  )
)

; `$str_mk_re_loop_elim n d r` returns the reduction of the regular expression
;   (re.loop n n+d r)
; where d>0. This is the regular expression:
;   (re.union r^n ... r^{n+d})
; where r^k is (re.++ r ... r), where r is repeated k times when k>1, or
; r if k=1 or @re.empty if k=0.
(define $str_mk_re_loop_elim ((n Int) (d Int) (r RegLan))
  ($singleton_elim ($str_mk_re_loop_elim_rec n d r @re.empty))
)

; Helper for ProofRewriteRule::STR_IN_RE_CONCAT_STAR_CHAR.
; Note that we do not require a singleton elimination step since the original input should be a concatenation term.
(program $str_mk_str_in_re_concat_star_char ((s1 String) (s2 String :list) (r RegLan))
  (String RegLan) Bool
  (
    (($str_mk_str_in_re_concat_star_char (str.++ s1 s2) r) (alf.cons and (str.in_re s1 r) ($str_mk_str_in_re_concat_star_char s2 r)))
    (($str_mk_str_in_re_concat_star_char "" r)             true)
  )
)


; Helper for $str_mk_str_in_re_sigma.
; Calling `$str_mk_str_in_re_sigma_rec s r n b` means we have s in r, we have stripped
; off n re.allchar from r so far. If `b` is false, then we have stripped off
; a (re.* re.allchar).
(program $str_mk_str_in_re_sigma_rec ((s String) (r RegLan :list) (n Int) (b Bool))
  (String RegLan Int Bool) Bool
  (
    (($str_mk_str_in_re_sigma_rec s @re.empty n b)                    (alf.ite b (= (str.len s) n) (>= (str.len s) n)))
    (($str_mk_str_in_re_sigma_rec s (re.++ re.allchar r) n b)         ($str_mk_str_in_re_sigma_rec s r (alf.add n 1) b))
    (($str_mk_str_in_re_sigma_rec s (re.++ (re.* re.allchar) r) n b)  ($str_mk_str_in_re_sigma_rec s r n false))
  )
)

; Helper for ProofRewriteRule::STR_IN_RE_SIGMA.
(define $str_mk_str_in_re_sigma ((s String) (r RegLan))
  ($str_mk_str_in_re_sigma_rec s r 0 true))

; Helper for $str_mk_str_in_re_sigma.
; Calling `$str_mk_str_in_re_sigma_star_rec s r n` means we have s in r, we have
; stripped off n re.allchar from r so far.
(program $str_mk_str_in_re_sigma_star_rec ((s String) (r RegLan :list) (n Int))
  (String RegLan Int) Bool
  (
    (($str_mk_str_in_re_sigma_star_rec s @re.empty n)                    (= (mod (str.len s) n) 0))
    (($str_mk_str_in_re_sigma_star_rec s (re.++ re.allchar r) n)         ($str_mk_str_in_re_sigma_star_rec s r (alf.add n 1)))
  )
)

; Helper for ProofRewriteRule::STR_IN_RE_SIGMA_STAR, r is the body of the star.
(define $str_mk_str_in_re_sigma_star ((s String) (r RegLan))
  ($str_mk_str_in_re_sigma_star_rec s r 0))

; Converts a str.++ application into "flat form" so that we are ready to
; process its prefix. This consists of the following steps:
; (1) convert s to n-ary form if it is not already a str.++ application,
; (2) flatten so that its constant prefix,
; (3) (optionally) reverse.
(define string_to_flat_form ((U Type :implicit) (s (Seq U)) (rev Bool))
  ; intro, flatten, reverse
  ($str_rev rev ($str_flatten ($str_nary_intro s)))
)

; `$re_str_to_flat_form rev r` convert the strings s occurring as direct
; children (str.to_re s) of regular expression concatenation r to their flat
; form, reversing if rev is true.
(program $re_str_to_flat_form ((r1 RegLan) (r2 RegLan :list) (s String) (rev Bool))
  (Bool RegLan) RegLan
  (
    (($re_str_to_flat_form rev (re.++ (str.to_re s) r2))  (alf.cons re.++ (str.to_re (string_to_flat_form s rev)) ($re_str_to_flat_form rev r2)))
    (($re_str_to_flat_form rev (re.++ r1 r2))             (alf.cons re.++ r1 ($re_str_to_flat_form rev r2)))
    (($re_str_to_flat_form rev r1)                        r1)
  )
)

; Converts a regular expression term to "flat form". This consists of the
; following steps:
; (1) convert r to n-ary form if it not already a re.++ application,
; (2) (optionally) reverse,
; (3) convert the strings s occurring as direct children (str.to_re s) of the
; result to their flat form. Note that other strings in r, i.e. those that
; occur benath other children remain unchanged.
(define $re_to_flat_form ((r RegLan) (rev Bool))
  ($re_str_to_flat_form rev ($str_rev rev ($re_nary_intro r)))
)

; Converts a term in "flat form" to a term that is in a form that corresponds
; to one in cvc5 rewritten form. This is the dual method to
; string_to_flat_form. This consists of the following steps:
; (1) (optionally) reverse,
; (2) collect constants
; (3) eliminate n-ary form to its element if the term is a singleton list.
(define string_from_flat_form ((U Type :implicit) (s (Seq U)) (rev Bool))
  ; reverse, collect, elim
  ($str_nary_elim (string_collect ($str_rev rev s)))
)

; `$re_str_from_flat_form rev r` convert the strings s occurring as direct
; children (str.to_re s) of regular expression concatenation r from their flat
; form, reversing if rev is true.
(program $re_str_from_flat_form ((r1 RegLan) (r2 RegLan :list) (s String) (rev Bool))
  (Bool RegLan) RegLan
  (
    (($re_str_from_flat_form rev (re.++ (str.to_re s) r2))  (alf.cons re.++ (str.to_re (string_from_flat_form s rev)) ($re_str_from_flat_form rev r2)))
    (($re_str_from_flat_form rev (re.++ r1 r2))             (alf.cons re.++ r1 ($re_str_from_flat_form rev r2)))
    (($re_str_from_flat_form rev r1)                        r1)
  )
)

; Converts a regular expression term in "flat form" to a term that is in a form
; that corresponds to one in cvc5 rewritten form. This is the dual method to
; $re_to_flat_form. This consists of the following steps:
; (1) convert the strings s occurring as direct children (str.to_re s) from their flat form,
; (2) (optionally) reverse,
; (3) eliminate n-ary form to its element if the term is a singleton list.
(define $re_from_flat_form ((r RegLan) (rev Bool))
  ; (un?)flatten, reverse, elim
  ($re_nary_elim ($str_rev rev ($re_str_from_flat_form rev r)))
)

; program: $str_re_consume_rec
; args:
; - s String: The string argument of the membership to rewrite.
; - r RegLan: The regular expression argument of the membership to rewrite.
; - b Bool: >
;   Stores temporary results when we are processing a union or intersection
;   regular expression as argument r. Otherwise, this argument is @result.null.
; - rev Bool: >
;   Indicates whether s and r were reversed, in which case their components must
;   be reversed when we recurse on non-str.to_re children.
; return: >
;   The result of implied consumption of string s in regular expression r.
(program $str_re_consume_rec ((s1 String) (s2 String :list) (s String) (r1 RegLan) (r2 RegLan :list) (b Bool) (rev Bool))
  (String RegLan Bool Bool) Bool
  (
    (($str_re_consume_rec (str.++ s1 s2) (re.++ r1 r2) @result.null rev)  
        (alf.match ((s3 String) (s4 String :list) (s5 String) (r3 RegLan))
          r1
          (
          ((str.to_re (str.++ s3 s4)) (alf.ite (alf.is_eq s1 s3)
                                        ($str_re_consume_rec s2 (re.++ (str.to_re s4) r2) @result.null rev)
                                        (alf.ite (alf.and (string_check_length_one s1) (string_check_length_one s3))
                                          false                                       ; conflicting characters
                                          (str.in_re (str.++ s1 s2) (re.++ r1 r2))))) ; otherwise stuck
          (@re.empty                  ($str_re_consume_rec (str.++ s1 s2) r2 @result.null rev)) ; finished current component
          ((re.range s3 s5)           (alf.ite (alf.and (string_check_length_one s1) ($str_is_char_range s3 s5))
                                        (alf.ite ($str_eval_str_in_re s1 (re.range s3 s5))
                                          ($str_re_consume_rec s2 r2 @result.null rev)
                                          false)
                                        (str.in_re (str.++ s1 s2) (re.++ r1 r2))))
          (re.allchar                 (alf.ite (string_check_length_one s1)
                                        ($str_re_consume_rec s2 r2 @result.null rev)
                                        (str.in_re (str.++ s1 s2) (re.++ r1 r2))))
          ((re.* r3)                  ; see what happens if we unroll once
                                      (alf.match ((sr String) (rr RegLan))
                                        ($str_re_consume_rec (str.++ s1 s2) ($re_to_flat_form r3 rev) @result.null rev)
                                        (
                                          ; We can't unroll even once, thus we must skip it.
                                          (false                     ($str_re_consume_rec (str.++ s1 s2) r2 @result.null rev))
                                          ; If we fully consumed, now we go back and check if we get a conflict if we skip.
                                          ((str.in_re sr @re.empty)  (alf.match ((br Bool))
                                                                        ($str_re_consume_rec (str.++ s1 s2) r2 @result.null rev)
                                                                        (
                                                                          ; Skipping would give a conflict.
                                                                          (false (alf.ite (alf.is_eq (str.++ s1 s2) sr)
                                                                                    ; if we did not consume anything, we are stuck.
                                                                                    (str.in_re (str.++ s1 s2) (re.++ r1 r2))
                                                                                    ; otherwise, we continue with the RE consumed once.
                                                                                    ($str_re_consume_rec sr (re.++ r1 r2) @result.null rev)
                                                                                  ))
                                                                          ; Otherwise we are stuck.
                                                                          (br    (str.in_re (str.++ s1 s2) (re.++ r1 r2)))
                                                                        )
                                                                      ))
                                          ; Otherwise we are stuck.
                                          ((str.in_re sr rr)          (str.in_re (str.++ s1 s2) (re.++ r1 r2)))
                                        )
                                      ))
          (r3                         ; likely intersection or union, process cases recursively
                                      (alf.match ((sr String) (br Bool))
                                        ($str_re_consume_rec (str.++ s1 s2) r3 @result.null rev)
                                        (
                                          ; conflict
                                          (false                     false)
                                          ; if all cases consumed the same, continue
                                          ((str.in_re sr @re.empty)  ($str_re_consume_rec sr r2 @result.null rev))
                                          ; otherwise we are stuck
                                          (br                        (str.in_re (str.++ s1 s2) (re.++ r1 r2)))
                                        )
                                      ))
          )
        )
    )
    (($str_re_consume_rec s1 (re.++ @re.empty r2) @result.null rev)
      ($str_re_consume_rec s1 r2 @result.null rev)) ; finished current component
    ; Intersection reports conflicts eagerly, and otherwise combines the results
    (($str_re_consume_rec s1 (re.inter r1 r2) b rev)   (let ((r1r ($re_to_flat_form r1 rev)))
                                                       (alf.match ((bb Bool))
                                                          ($str_re_consume_rec s1 r1r @result.null rev)
                                                          (
                                                            (false  false)
                                                            (bb     ($str_re_consume_rec s1 r2 ($result_combine bb b) rev))
                                                          )
                                                       )))
    (($str_re_consume_rec s1 re.all @result.null rev)  (str.in_re "" @re.empty)) ; only used if re.all appears in unexpected position
    (($str_re_consume_rec s1 re.all b rev)             b)                        ; end of re.inter
    ; Union ignores conflicts, and otherwise combines the results. We report a conflict if all children give conflicts.
    (($str_re_consume_rec s1 (re.union r1 r2) b rev)   (let ((r1r ($re_to_flat_form r1 rev)))
                                                       (alf.match ((bb Bool))
                                                          ($str_re_consume_rec s1 r1r @result.null rev)
                                                          (
                                                            (false  ($str_re_consume_rec s1 r2 b rev))
                                                            (bb     ($str_re_consume_rec s1 r2 ($result_combine bb b) rev))
                                                          )
                                                       )))
    (($str_re_consume_rec s1 re.none @result.null rev) false)     ; end of re.union, conflict, also used if re.none appears in unexpected position
    (($str_re_consume_rec s1 re.none b rev)            b)         ; end of re.union, no conflict
    (($str_re_consume_rec s1 r1 @result.null rev)      (str.in_re s1 r1))
  )
)

; `$str_re_consume
; args:
; - s String: The string argument of the membership to rewrite.
; - r RegLan: The regular expression argument of the membership to rewrite.
; returns: >
;   false if `(str.in_re s r)` can be shown to be equivalent to false, or
;   otherwise `(str.in_re sr rr)` where sr and rr are the result of "consuming"
;   prefixes/suffixes from s and r. We consume from the end of s and r first by
;   reversing them initially and converting them to flat forms. We then reverse
;   them again and consume from the beginning of the remainder. Finally, we convert
;   back from flat form when applicable.
(define $str_re_consume ((s String) (r RegLan))
  (let ((ss (string_to_flat_form s true)))  
  (let ((rr ($re_to_flat_form r true)))
  (alf.match ((s1 String) (r1 RegLan))
      ($str_re_consume_rec ss rr @result.null true)
      (
        (false              false)
        ((str.in_re s1 r1)  (let ((s1r ($str_rev true s1)) (r1r ($re_to_flat_form r1 true)))
                            (alf.match ((s2 String) (r2 RegLan))
                              ($str_re_consume_rec s1r r1r @result.null false)
                              (
                                (false              false)
                                ((str.in_re s2 r2)  (str.in_re (string_from_flat_form s2 false) ($re_from_flat_form r2 false)))
                              )
                            ))
        )
      )
  )))
)
