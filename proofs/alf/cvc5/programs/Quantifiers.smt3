(include "../theories/Builtin.smt3")
(include "../theories/Quantifiers.smt3")

(program substitute
  ((T Type) (U Type) (S Type) (x S) (y S) (f (-> T U)) (a T) (z U) (w T))
  (S S U) U
  (
  ((substitute x y x)             y)
  ((substitute x y (f a))         (_ (substitute x y f) (substitute x y a)))
  ((substitute x y z)             z)
  )
)

(program $substitute_list ((T Type) (U Type) (F U) (x T) (xs @List :list) (t T) (ts @List :list))
  (@List @List U) U
  (
    (($substitute_list (@list x xs) (@list t ts) F) ($substitute_list xs ts (substitute x t F)))
    (($substitute_list @list.nil @list.nil F)       F)
  )
)


; @program $beta_reduce
; @arg u : U. The term to beta reduce. This should be an application of a lambda
; whose arguments have been partially accumulated into ss.
; @arg ss : @List. The accumulated list of arguments to pass to the lambda.
; @return the result of beta reduction.
(program $beta_reduce ((U Type) (T Type) (S Type) (f (-> T U)) (a T) (t S) (xs @List) (ss @List :list))
  (U @List) U
  (
  (($beta_reduce (lambda xs t) ss) ($substitute_list xs ss t))
  (($beta_reduce (f a) ss)         ($beta_reduce f (@list a ss)))
  )
)
