(include "../programs/Utils.smt3")

; Note that the Bool sort is native to ALF

(declare-const ite (-> (! Type :var A :implicit) Bool A A A))
(declare-const not (-> Bool Bool))

(declare-const or (-> Bool Bool Bool)
   :right-assoc-nil false
)
(declare-const and (-> Bool Bool Bool)
   :right-assoc-nil true
)
(declare-const => (-> Bool Bool Bool)
   :right-assoc
)
(declare-const xor (-> Bool Bool Bool)
   :left-assoc
)

(declare-const = (-> (! Type :var A :implicit) A A Bool)
   :chainable and
)

(program get_lambda_type ((x @List) (xs @List :list) (B Type))
  (@List Type) Type
  (
    ((get_lambda_type (@list x xs) B) (-> (alf.typeof x) (get_lambda_type xs B)))
    ((get_lambda_type @list.nil B)    B)
  )
)
(declare-const lambda (-> (! Type :var B :implicit) (! @List :var L) B (get_lambda_type L B)) :binder @list)

(declare-const distinct (-> (! Type :var A :implicit) A A Bool) :pairwise and)

; generic variables
; NOTE: does not check that U is a numeral
(declare-const const (-> (! Type :var U :implicit) U (! Type :var T) T))

; The purification skolem.
(declare-const @purify (-> (! Type :var A :implicit) (! A :opaque) A))
