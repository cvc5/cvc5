(include "../theories/Ints.smt3")

; note: We do not currently check that the index of this sort is positive.
(declare-const BitVec (-> Int Type))
(declare-consts <binary> (BitVec (alf.len alf.self)))

; define: $bv_bitwidth
; args:
; - T Type: The bitvector type.
; return: The (integer value) bitwidth for a given bit-vector type.
(define $bv_bitwidth ((T Type))
  (alf.match ((n Int)) T (((BitVec n) n)))
)

; bvsize
(declare-const @bvsize (-> (! Int :var m :implicit) (BitVec m) Int))

; evaluator for terms that may impact the type of nodes
(program $eval_bv_sym ((S Type) (T Type) (f (-> T S)) (x S) (ys S :list) (z S) (y T) (m Int) (xb (BitVec m)))
    (S) S
    (
    (($eval_bv_sym (+ x ys))     ($arith_eval_add ($eval_bv_sym x) ($eval_bv_sym ys)))
    (($eval_bv_sym (- x z))      ($arith_eval_sub ($eval_bv_sym x) ($eval_bv_sym z)))
    (($eval_bv_sym (@bvsize xb)) ($bv_bitwidth (alf.typeof xb)))
    (($eval_bv_sym (int.log2 x)) ($arith_eval_int_log_2 ($eval_bv_sym x)))
    (($eval_bv_sym (mod x z))    (alf.zmod ($eval_bv_sym x) ($eval_bv_sym z)))
    (($eval_bv_sym x)            x)
    )
)

; define: @bv_empty
; return: The empty bitvector.
(define @bv_empty () (alf.to_bin 0 0))

(declare-const concat (->
  (! Int :var n :implicit)
  (! Int :var m :implicit)
  (BitVec n)
  (BitVec m)
  (BitVec (alf.add n m))) :right-assoc-nil @bv_empty
)

; disclaimer: >
;   The type of this function currently permits evaluatable terms as
;   indices to support RARE.
(declare-const extract (->
  (! Int :var n :implicit)
  (! Int :var h)
  (! Int :var l)
  (BitVec n)
  (BitVec (alf.add ($eval_bv_sym h) (alf.neg ($eval_bv_sym l)) 1)))
)

; disclaimer: >
;   The type of this function currently permits evaluatable terms as
;   indices to support RARE.
(declare-const repeat 
    (-> (! Int :var n :implicit)
        (! Int :var i)
        (BitVec n)
        (BitVec (alf.mul ($eval_bv_sym i) n))
    ) 
)

(declare-const bvnot
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m))
)

; disclaimer: >
;   This function is declared to be binary in SMT-LIB. We declare it
;   with right-assoc-nil to model cvc5's treatment of variadic functions.
(declare-parameterized-const bvand ((m Int))
    (-> (BitVec m) (BitVec m) (BitVec m))
    :right-assoc-nil (alf.not (alf.to_bin m 0))
)

; disclaimer: >
;   This function is declared to be binary in SMT-LIB. We declare it
;   with right-assoc-nil to model cvc5's treatment of variadic functions.
(declare-parameterized-const bvor ((m Int))
    (-> (BitVec m) (BitVec m) (BitVec m))
    :right-assoc-nil (alf.to_bin m 0)
)

(declare-const bvnand
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec m)) 
)

(declare-const bvnor
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec m)) 
)

; disclaimer: >
;   This function is declared to be binary in SMT-LIB. We declare it
;   with right-assoc-nil to model cvc5's treatment of variadic functions.
(declare-parameterized-const bvxor ((m Int))
    (-> (BitVec m) (BitVec m) (BitVec m))
    :right-assoc-nil (alf.to_bin m 0)
)

(declare-const bvxnor
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec m))
)

(declare-const bvcomp
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec 1))
)

(declare-const bvneg
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m))
)

; disclaimer: >
;   This function is declared to be binary in SMT-LIB. We declare it
;   with right-assoc-nil to model cvc5's treatment of variadic functions.
(declare-parameterized-const bvadd ((m Int))
    (-> (BitVec m) (BitVec m) (BitVec m))
    :right-assoc-nil (alf.to_bin m 0)
)

; disclaimer: >
;   This function is declared to be binary in SMT-LIB. We declare it
;   with right-assoc-nil to model cvc5's treatment of variadic functions.
(declare-parameterized-const bvmul ((m Int))
    (-> (BitVec m) (BitVec m) (BitVec m))
    :right-assoc-nil (alf.to_bin m 1)
)

(declare-const bvudiv
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec m))
)

(declare-const bvurem
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec m)) 
)

(declare-const bvsub
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec m))
)

(declare-const bvsdiv
  (-> (! Int :var m :implicit) 
      (BitVec m) (BitVec m) (BitVec m)) 
)

(declare-const bvsrem
  (-> (! Int :var m :implicit) 
      (BitVec m) (BitVec m) (BitVec m)) 
)

(declare-const bvsmod
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec m))
)

(declare-const bvult
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) Bool) 
    :chainable and
)

(declare-const bvule
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) Bool) 
)

(declare-const bvugt
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) Bool) 
)

(declare-const bvuge
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) Bool) 
)

(declare-const bvslt
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) Bool)
)

(declare-const bvsle
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) Bool)
)

(declare-const bvsgt
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) Bool) 
)
  
(declare-const bvsge
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) Bool) 
)   

(declare-const bvshl
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec m))
)
 
(declare-const bvlshr
    (-> (! Int :var m :implicit) 
    (BitVec m) (BitVec m) (BitVec m))
)

(declare-const bvashr
    (-> (! Int :var m :implicit)
    (BitVec m) (BitVec m) (BitVec m))
)

; disclaimer: >
;   The type of this function currently permits evaluatable terms as
;   indices to support RARE.
(declare-const zero_extend
    (-> (! Int :var m :implicit)
        (! Int :var i)
        (BitVec m) (BitVec (alf.add m ($eval_bv_sym i))))
)

; disclaimer: >
;   The type of this function currently permits evaluatable terms as
;   indices to support RARE.
(declare-const sign_extend
    (-> (! Int :var m :implicit)
        (! Int :var i)
        (BitVec m) (BitVec (alf.add m ($eval_bv_sym i))))
)

(declare-const rotate_left
    (-> (! Int :var m :implicit)
        Int (BitVec m) (BitVec m))
)
 
(declare-const rotate_right
    (-> (! Int :var m :implicit)
        Int (BitVec m) (BitVec m))
)
 
(declare-const reduce_and
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec 1))
)

(declare-const reduce_or
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec 1))
)

(declare-const reduce_xor
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec 1))
)

; NOTE: does not require branches to be bitvector
; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvite
  (-> (! Type :var T :implicit)
      (BitVec 1) T T T)
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bv1ult
    (-> (! Int :var m :implicit) 
        (BitVec m) (BitVec m) (BitVec 1))
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvuaddo
  (-> (! Int :var m :implicit)
      (BitVec m) (BitVec m) Bool)
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvsaddo
  (-> (! Int :var m :implicit)
      (BitVec m) (BitVec m) Bool)
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvumulo
  (-> (! Int :var m :implicit)
      (BitVec m) (BitVec m) Bool)
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvsmulo
  (-> (! Int :var m :implicit)
      (BitVec m) (BitVec m) Bool)
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvusubo
  (-> (! Int :var m :implicit)
      (BitVec m) (BitVec m) Bool)
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvssubo
  (-> (! Int :var m :implicit)
      (BitVec m) (BitVec m) Bool)
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvsdivo
  (-> (! Int :var m :implicit)
      (BitVec m) (BitVec m) Bool)
)


(declare-const bvultbv
    (-> (! Int :var m :implicit)
        (BitVec m) (BitVec m) (BitVec 1))
)

(declare-const bvsltbv
    (-> (! Int :var m :implicit)
        (BitVec m) (BitVec m) (BitVec 1))
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvredand
    (-> (! Int :var m :implicit)
        (BitVec m) (BitVec 1))
)

; disclaimer: This function is not a function in SMT-LIB.
(declare-const bvredor
    (-> (! Int :var m :implicit)
        (BitVec m) (BitVec 1))
)

; disclaimer: >
;   This function is not a function in SMT-LIB. Although it is used
;   to describe semantics of bv operators, it is not a theory symbol.
;   The type of this function currently permits evaluatable terms as
;   indices to support RARE.
(declare-const int2bv (->
  (! Int :var w)
  Int (BitVec ($eval_bv_sym w)))
)

; disclaimer: >
;   This function is not a function in SMT-LIB. Although it is used
;   to describe semantics of bv operators, it is not a theory symbol.
(declare-const bv2nat (->
  (! Int :var m :implicit)
  (BitVec m) Int)
)

(declare-const BITVECTOR_EAGER_ATOM (-> Bool Bool))

; internal operators

(declare-const @bit
    (-> (! Int :var m :implicit)
        Int (BitVec m) Bool))

(declare-const @from_bools (->
  (! Int :var n :implicit)
  Bool
  (BitVec n)
  (BitVec (alf.add 1 n))) :right-assoc-nil @bv_empty
)

; symbolic constant
; disclaimer: >
;   The type of this function currently permits evaluatable terms as
;   indices to support RARE.
(declare-const @bv (-> Int (! Int :var w) (BitVec ($eval_bv_sym w))))
