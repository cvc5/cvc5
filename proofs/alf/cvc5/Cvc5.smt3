; =============================================================================
;
; This is the official development version of the ALF signature for cvc5's
; internal proof calculus. It is a faithful formalization of cvc5's theory
; signatures and proof rules.
;
; NOTE: cvc5 does not strictly follow the SMT-LIB version 2.6 standard. In
; particular, it contains many extensions, including non-standard theories as
; well as non-standard extensions of existing theories. Moreover, some standard
; theory symbols have subtle differences with the SMT-LIB standard.
;
; For examples of the latter:
; - Many arithmetic symbols in cvc5 such as +, *, >= operate on *mixed*
; arithmetic. That is, they can be applied to mixtures of Real and Int.
; - Most associative operators are modelled as variadic (modelled in ALF as
; :left-assoc-nil and :right-assoc-nil) instead of being seen as syntax sugar
; for an associative chain that does not distinguish a nil terminator (e.g.
; :left-assoc and :right-assoc). Examples of these operators include or, bvand,
; +, and so on.
; - cvc5 generalizes strings to sequences, so that strings are defined to be
; (Seq Char).
; - We model quantifiers (forall, exists) using explicit function symbols taking
; lists to model their binders.
; Whenever applicable, these differences are marked with disclaimer: comments.
;
; Furthermore, this signature is designed to capture the exact definition of
; cvc5's proof API. That is, Proof objects in our API are expected to have the
; same expected arguments and premises as their formal definition in this
; signature.
;
; This signature however intentionally does *not* formalize any proof rules that
; are prefixed by MACRO_. These can be eliminated using the cvc5 option
; --proof-granularity=theory-rewrite or --proof-granularity=dsl-rewrite.
;
; The cases of ProofRule::THEORY_REWRITE are each formalized as individual
; proof rules. Similarly, each theory rewrite with a ProofRewriteRule that
; is prefixed by MACRO_ are not formalized in this signature and will not
; appear in final proofs.
;
; The cases of ProofRule::DSL_REWRITE are by default provided on demand in
; the preamble of the proof that is output by cvc5.
;
; The rules ProofRule::TRUST and ProofRule::TRUST_THEORY_REWRITE are output in
; ALF proofs using a catch-all rule trust defined at the end of this file. This
; rule is also used for any ProofRule which the ALF signature does not
; currently support. In cvc5's proof ouput, an ALF comment will be displayed
; above an application of this rule to indicate diagnostic information on the
; source of this inference, in the format of a TrustId, tracked internally in
; cvc5 to classify the source of the incompleteness.
;
; !!! NOTE: proofs using any instance of the trust rule should be considered incomplete
; and not having a formal justification.
;
; Discrepancies between cvc5's Proof API and the formal ALF definition are
; also noted when applicable by disclaimer:.
; 
; =============================================================================

(include "./rules/Builtin.smt3")
(include "./rules/Booleans.smt3")
(include "./rules/Arrays.smt3")
(include "./rules/Uf.smt3")
(include "./rules/Arith.smt3")
(include "./theories/FloatingPoints.smt3")
(include "./rules/Transcendentals.smt3")
(include "./rules/BitVectors.smt3")
(include "./rules/Strings.smt3")
(include "./rules/Sets.smt3")
(include "./theories/Bags.smt3")
(include "./theories/FiniteFields.smt3")
(include "./rules/Quantifiers.smt3")
(include "./theories/Datatypes.smt3")
(include "./theories/SepLogic.smt3")

; disclaimer: >
;   All symbols prefixed by @ are not part of the SMT-LIB standard
;   and are used to model cvc5's internal symbols, including its skolems,
;   other internally introduced terms, and extensions.

; disclaimer: this function is not in SMT-LIB.
(declare-const fmf.card (-> Type Int Bool))
(declare-type @ho-elim-sort (Type))
(declare-const @fmf-fun-sort (-> (! Type :var T :implicit) T Type))

; evaluate, for all theories
(program run_evaluate ((T Type) (S Type) 
                       (x T) (y T) (z S) (ys S :list)
                       (b Bool) (n Int) (m Int)
                       (xb (BitVec m)) (ybs (BitVec m) :list)
                       (xs (Seq T)) (yss (Seq T) :list))
    (S) S
    (
      ; core
      ((run_evaluate (= x y))             (let ((ex (run_evaluate x)))
                                          (let ((ey (run_evaluate y)))
                                          (let ((res (alf.is_eq ex ey)))
                                          (alf.ite (alf.and (alf.is_q ex) (alf.is_q ey)) res
                                          (alf.ite (alf.and (alf.is_z ex) (alf.is_z ey)) res
                                          (alf.ite (alf.and (alf.is_bin ex) (alf.is_bin ey)) res
                                          (alf.ite (alf.and (alf.is_str ex) (alf.is_str ey)) res
                                          (alf.ite (alf.and (alf.is_bool ex) (alf.is_bool ey)) res
                                            (= ex ey))))))))))
      ((run_evaluate (not b))             (alf.not (run_evaluate b)))
      ((run_evaluate (ite b x y))         (alf.ite (run_evaluate b) (run_evaluate x) (run_evaluate y)))
      ((run_evaluate (or x ys))           (alf.or (run_evaluate x) (run_evaluate ys)))
      ((run_evaluate (and x ys))          (alf.and (run_evaluate x) (run_evaluate ys)))
      ((run_evaluate (xor x y))           (alf.xor (run_evaluate x) (run_evaluate y)))
  
      ; arithmetic
      ((run_evaluate (< x z))             (alf.is_neg ($arith_eval_qsub (run_evaluate x) (run_evaluate z))))
      ((run_evaluate (<= x z))            (let ((d ($arith_eval_qsub (run_evaluate x) (run_evaluate z))))
                                            (alf.or (alf.is_neg d) (alf.is_eq d 0/1))))
      ((run_evaluate (> x z))             (alf.is_neg ($arith_eval_qsub (run_evaluate z) (run_evaluate x))))
      ((run_evaluate (>= x z))            (let ((d ($arith_eval_qsub (run_evaluate z) (run_evaluate x))))
                                            (alf.or (alf.is_neg d) (alf.is_eq d 0/1))))
      ((run_evaluate (+ x ys))            ($arith_eval_add (run_evaluate x) (run_evaluate ys)))
      ((run_evaluate (- x z))             ($arith_eval_sub (run_evaluate x) (run_evaluate z)))
      ((run_evaluate (* x ys))            ($arith_eval_mul (run_evaluate x) (run_evaluate ys)))
      ((run_evaluate (- x))               (alf.neg (run_evaluate x)))
      ((run_evaluate (/ x y))             (alf.qdiv (alf.to_q (run_evaluate x)) (alf.to_q (run_evaluate y))))
      ((run_evaluate (/_total x y))       (let ((d (alf.to_q (run_evaluate y))))
                                            (alf.ite (alf.is_eq d 0/1) 0/1 (alf.qdiv (alf.to_q (run_evaluate x)) d))))
      ((run_evaluate (div x y))           (alf.zdiv (run_evaluate x) (run_evaluate y)))
      ((run_evaluate (div_total x y))     (let ((d (run_evaluate y)))
                                            (alf.ite (alf.is_eq d 0) 0 (alf.zdiv (run_evaluate x) d))))
      ((run_evaluate (mod x y))           (alf.zmod (run_evaluate x) (run_evaluate y)))
      ((run_evaluate (mod_total x y))     (let ((d (run_evaluate y)))
                                            (alf.ite (alf.is_eq d 0) 0 (alf.zmod (run_evaluate x) d))))
      ((run_evaluate (to_real x))         (alf.to_q (run_evaluate x)))
      ((run_evaluate (to_int x))          (alf.to_z (run_evaluate x)))
      ((run_evaluate (is_int x))          (alf.is_eq (alf.to_q (alf.to_z x)) (alf.to_q x)))


      ; strings
      ((run_evaluate (str.++ xs yss))     (alf.concat (run_evaluate xs) (run_evaluate yss)))
      ((run_evaluate (str.len x))         (alf.len (run_evaluate x)))
      ((run_evaluate (str.substr x n m))  (let ((r (run_evaluate n)))
                                            (alf.extract (run_evaluate x) r (alf.add r (run_evaluate m) -1))))
      ((run_evaluate (str.contains x y))  (alf.not (alf.is_neg (alf.find (run_evaluate x) (run_evaluate y)))))
      ((run_evaluate (str.replace x y z)) (let ((ex (run_evaluate x)))
                                          (let ((ey (run_evaluate y)))
                                          (let ((r (alf.find (alf.to_str ex) (alf.to_str ey)))) ; ensure string literals
                                            (alf.ite (alf.is_neg r)
                                              ex
                                              (alf.concat 
                                                (alf.extract ex 0 (alf.add r -1)) 
                                                (run_evaluate z) 
                                                (alf.extract ex (alf.add r (alf.len ey)) (alf.len ex)))
                                            )
                                          ))))
      ((run_evaluate (str.indexof x y n)) (let ((en (run_evaluate n)))
                                          (alf.ite (alf.is_neg en) -1
                                            (let ((ex (run_evaluate x)))
                                            (let ((exl (alf.len ex)))
                                            (alf.ite (alf.gt en exl) -1
                                              (let ((exs (alf.extract ex n exl)))
                                              (let ((ey (run_evaluate y)))
                                              (let ((r (alf.find (alf.to_str exs) (alf.to_str ey))))
                                              (alf.ite (alf.is_neg r) r (alf.add n r)))))))))))
      ((run_evaluate (str.to_code x))     (let ((ex (run_evaluate x)))
                                          (alf.ite (alf.is_eq (alf.len ex) 1) (alf.to_z ex) -1)))
      ((run_evaluate (str.from_code x))   (let ((ex (run_evaluate x)))
                                          (alf.ite ($str_is_code_point ex) (alf.to_str x) "")))

      ; bitvectors
      ((run_evaluate (bvnot xb))          (alf.not (run_evaluate xb)))
      ((run_evaluate (bvneg xb))          (alf.neg (run_evaluate xb)))
      ((run_evaluate (bvadd xb ybs))      (alf.add (run_evaluate xb) (run_evaluate ybs)))
      ((run_evaluate (bvmul xb ybs))      (alf.mul (run_evaluate xb) (run_evaluate ybs)))
      ((run_evaluate (bvand xb ybs))      (alf.and (run_evaluate xb) (run_evaluate ybs)))
      ((run_evaluate (bvor xb ybs))       (alf.or (run_evaluate xb) (run_evaluate ybs)))
      ((run_evaluate (concat x ys))       (alf.concat (run_evaluate x) (run_evaluate ys)))
      ((run_evaluate (bvsub x y))         (alf.add (run_evaluate x) (alf.neg (run_evaluate y))))
      ((run_evaluate (extract m n x))     (alf.extract (run_evaluate x) n m)) ; note swap n/m
      ((run_evaluate (bvult x y))         (run_evaluate (< (alf.to_z x) (alf.to_z y))))
      ((run_evaluate (bvule x y))         (run_evaluate (<= (alf.to_z x) (alf.to_z y))))
      ((run_evaluate (bvugt x y))         (run_evaluate (> (alf.to_z x) (alf.to_z y))))
      ((run_evaluate (bvuge x y))         (run_evaluate (>= (alf.to_z x) (alf.to_z y))))
      ((run_evaluate (@bv n m))           (alf.to_bin (run_evaluate m) (run_evaluate n)))
      ((run_evaluate (@bvsize x))         ($bv_bitwidth (alf.typeof x)))
  
      ((run_evaluate z)                   z)
    )
)

; ProofRule::EVALUATE
(declare-rule evaluate ((U Type) (t U))
  :args (t)
  :conclusion (= t (run_evaluate t))
)

(program $is_poly_norm ((T Type) (U Type) (a T) (b T) (a1 U) (a2 U) (b1 U) (b2 U))
  (T T) Bool
  (
    (($is_poly_norm (> a1 a2) (> b1 b2))   ($is_poly_norm_arith_mod_c (- a1 a2) (- b1 b2) true))
    (($is_poly_norm (>= a1 a2) (>= b1 b2)) ($is_poly_norm_arith_mod_c (- a1 a2) (- b1 b2) true))
    (($is_poly_norm (<= a1 a2) (<= b1 b2)) ($is_poly_norm_arith_mod_c (- a1 a2) (- b1 b2) true))
    (($is_poly_norm (< a1 a2) (< b1 b2))   ($is_poly_norm_arith_mod_c (- a1 a2) (- b1 b2) true))
    (($is_poly_norm (= a1 a2) (= b1 b2))   (alf.ite (is_arith_type (alf.typeof a1)) 
                                           (alf.ite (is_arith_type (alf.typeof b1))
                                             ($is_poly_norm_arith_mod_c (- a1 a2) (- b1 b2) false)
                                             false)
                                           false)) ; TODO: bv
    (($is_poly_norm a b)                   (alf.ite (is_arith_type (alf.typeof a)) 
                                           (alf.ite (is_arith_type (alf.typeof b))
                                             ($is_poly_norm_arith a b)
                                             false)
                                           false)) ; TODO: bv
  )
)

; ProofRule::ARITH_POLY_NORM
(declare-rule arith_poly_norm ((U Type) (a U) (b U))
  :args ((= a b))
  :requires ((($is_poly_norm a b) true))
  :conclusion (= a b)
)

; define: $get_aci_normal_form
; args:
; - t S: The term to compute the normal form for.
; return: >
;   The result of normalizing t for the proof rule aci_norm. In
;   particular, if t is an application of a known operator that has the property
;   of being either associative and commutative (resp. associative) we call
;   the method $get_aci_norm (resp. $get_a_norm).
(define $get_aci_normal_form ((S Type :implicit) (t S))
  (alf.match ((T Type) (U Type) (V Type) (x V) (x1 T) (x2 U :list) (m Int)
              (xb1 (BitVec m)) (xb2 (BitVec m) :list)
              (xf1 (FiniteField m)) (xf2 (FiniteField m) :list)
              (xs1 (Seq U)) (xs2 (Seq U) :list))
    t
    (
      ((or x1 x2)        ($get_aci_norm t))
      ((and x1 x2)       ($get_aci_norm t))
      ((sep x1 x2)       ($get_aci_norm t))
      ((re.union x1 x2)  ($get_aci_norm t))
      ((re.inter x1 x2)  ($get_aci_norm t))
      ((bvor xb1 xb2)    ($get_aci_norm t))
      ((bvand xb1 xb2)   ($get_aci_norm t))
      ((ff.add xf1 xf2)  ($get_aci_norm t))
      ((ff.mul xf1 xf2)  ($get_aci_norm t))
      ((str.++ xs1 xs2)  ($get_a_norm t))
      ((re.++ x1 x2)     ($get_a_norm t))
      (x                 x)
    )
  )
)

; rule: aci_norm
; implements: ProofRule::ACI_NORM
; args:
; - eq Bool: The equality to be proven by this rule.
; requires: >
;   That computing the normal forms via $get_aci_normal_form of the sides of the
;   given equality between terms a and b suffices to show that a and b are
;   equivalent. Note that we need three checks. The first two handle the cases
;   where one side is treated as a singleton child of the other side. The
;   remaining case checks where both terms are not singletons.
; conclusion: The given equality.
(declare-rule aci_norm ((U Type) (a U) (b U))
  :args ((= a b))
  :requires (((let ((an ($get_aci_normal_form a)) (bn ($get_aci_normal_form b)))
              (alf.ite (alf.is_eq an b) true
              (alf.ite (alf.is_eq a bn) true
                (alf.is_eq an bn)))) true))
  :conclusion (= a b)
)

; rule: trust
; premsies:
; - P: A conjunction of the premises passed to this rule.
; args:
; - F Bool: The proven formula, which should be implied by P.
; conclusion: The given formula F.
; note: >
;   This rule is not sound. Any proof involving this rule should be
;   considered incomplete. We use this rule when encountering ProofRule::TRUST,
;   ProofRule::TRUST_THEORY_REWRITE, or any other rule that is not currently
;   formalized in the ALF signature.
(declare-rule trust ((P Bool) (F Bool))
    :premise-list P and
    :args (F)
    :conclusion F
)
