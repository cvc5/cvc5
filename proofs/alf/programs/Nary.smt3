; Programs to work with n-ary operators

(include "../programs/Utils.smt3")

; =============================================
;  Right-associative null-terminated operators
; =============================================
; The following functions work with right-associative symbols with a defined
; null terminator.  Those behave somewhat similar to functional programming
; lists.  Therefore, the symbol will always be called `cons` in the following
; and the terminator will be `nil`.
;
; The AletheLF syntactic sugar for n-ary operators introduces some behavior
; that can be counter intuitive:
; 1) Consider a pattern `(cons x xs)` where `xs` is annotated with `:list`.
;    In this case building the term `(cons x xs)` will not result in the
;    term that matched the pattern.  This is because `(cons x xs)` is
;    syntactic sugar for `(cons x (cons xs nil))`.  Note that, xs here
;    is not the tail of the list.  It is just an element.
; 2) It is not possible to directly build unit lists, since `(cons x)` is
;    not valid.
;
; Both cases can be addressed by using the `append` function defined below.
; A call `(append x xs)` will create the list from point 1 and `(append x nil)`
; will create a unit list.


; nary.is_subset cons nil c l
; Retuns `true` if l nary.ctn c.
(program nary.is_subset
    ((L Type) (cons (-> L L L)) (nil L) (c L) (t L) (xs L :list))
    ((-> L L L) L L L) Bool
    (
        ((nary.is_subset cons nil (cons c xs) t) (alf.ite (alf.is_neg (alf.find cons t c)) false (nary.is_subset cons nil xs t)))
        ((nary.is_subset cons nil nil t)         true)
    )
)

; nary.remove cons c xs
; Removes the first occurrence of `c` from `xs`.
(program nary.remove
    ((L Type) (cons (-> L L L)) (nil L) (c L) (y L) (xs L :list))
    ((-> L L L) L L L) L
    (
        ((nary.remove cons nil c (cons c xs)) xs)
        ((nary.remove cons nil c (cons y xs)) (alf.cons cons y (nary.remove cons nil c xs)))
        ((nary.remove cons nil c nil)         nil)
    )
)

; Helper for reverse
(program nary.reverseRec
    ((L Type) (cons (-> L L L)) (nil L) (x L) (xs L :list) (l L :list))
    ((-> L L L) L L L) L
    (
        ((nary.reverseRec cons nil (cons x xs) l) (nary.reverseRec cons nil xs (alf.cons cons x l)))
        ((nary.reverseRec cons nil nil l)         l)
    )
)

; nary.reverse cons nil xs
; Reverses the list `xs`.
(program nary.reverse
    ((L Type) (cons (-> L L L)) (nil L) (xs L :list))
    ((-> L L L) L L) L
    (
        ((nary.reverse cons nil xs) (nary.reverseRec cons nil xs nil))
    )
)

; nary.elim cons x
; Returns the sole element if `xs` is a singleton list.
(program nary.elim
    ((L Type) (cons (-> L L L)) (nil L) (elim-nil L) (c L) (x L) (xs L :list))
    ((-> L L L) L L L) L
    (
        ((nary.elim cons nil elim-nil (cons x nil)) x)
        ((nary.elim cons nil elim-nil (cons x xs))  (cons x xs))
        ((nary.elim cons nil elim-nil nil)          elim-nil)
    )
)

; nary.intro cons x
; Returns a singleton list if `x` is not a list.
(program nary.intro
    ((L Type) (cons (-> L L L)) (nil L) (intro-nil L) (x L) (xs L :list))
    ((-> L L L) L L L) L
    (
        ((nary.intro cons nil intro-nil (cons x xs)) (cons x xs))
        ((nary.intro cons nil intro-nil nil)         intro-nil)
        ((nary.intro cons nil intro-nil x)           (alf.cons cons x intro-nil))
    )
)

; returns the number of children of the input
(program nary.nchild
    ((L Type) (I Type) (cons (-> L L L)) (nil L) (i I) (x L) (xs L :list))
    ((-> L L L) L L) I
    (
        ((nary.nchild cons nil (cons x xs)) (alf.add 1 (nary.nchild cons nil xs)))
        ((nary.nchild cons nil nil)         0)
        ((nary.nchild cons nil x)           1) ; if not in list form
    )
)


; nary.is_prefix cons t s
; Retuns `true` if t is a prefix of s
(program nary.is_prefix
    ((L Type) (cons (-> L L L)) (nil L) (t L) (c1 L) (c2 L) (xs1 L :list) (xs2 L :list))
    ((-> L L L) L L L) Bool
    (
        ((nary.is_prefix cons nil nil t)                       true)
        ((nary.is_prefix cons nil (cons c1 xs1) (cons c2 xs2)) (alf.ite (alf.is_eq c1 c2) (nary.is_prefix cons nil xs1 xs2) false))
    )
)

; nary.join
(program nary.join
    ((L Type) (cons (-> L L L)) (nil L) (elim-nil L) (c L) (x L) (xs L :list) (y L) (ys L :list))
    ((-> L L L) L L L) L
    (
        ((nary.join cons nil (cons x nil) (cons x ys)) ys)
        ((nary.join cons nil (cons x xs) y)            (cons x (nary.join cons nil xs y)))
    )
)
