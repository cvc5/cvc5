(include "../theories/Builtin.smt3")
(include "../theories/Quantifiers.smt3")

(program run_convert_fixed_point
  ((T Type) (U Type) (x U) (y U) (f (-> T U)) (a T) (z1 @List) (z2 @List :list) (w T))
  (U @List) (@Pair U @List)
  (
    ((run_convert_fixed_point x (@list (= x y) z2)) (run_convert_fixed_point y z2))
    ((run_convert_fixed_point (skolem w) z1)        (@pair (skolem w) z1))   ; do not traverse into skolems
    ((run_convert_fixed_point (f a) (@list z1 z2))  (alf.match ((fr (-> T U)) (zr @List)) (run_convert_fixed_point f (@list z1 z2))
                                                    ((@pair fr zr)
                                                        (alf.match ((ar (-> T U)) (zrr @List)) (run_convert_fixed_point a zr)
                                                          ((@pair ar zrr) (@pair (fr ar) zrr))))))
    ((run_convert_fixed_point x @list.nil)          (@pair x @list.nil))
  )
)

(declare-rule convert_fixed_point ((T Type) (t T))
  :premise-list E @list
  :args (t)
  :conclusion (alf.match ((s T)) (run_convert_fixed_point t E)
                (
                  ((@pair s @list.nil) (= t s))
                ))
)

(program run_convert_once
  ((T Type) (U Type) (x U) (y U) (f (-> T U)) (a T) (z1 @List) (z2 @List) (w T))
  (U @List) (@Pair U @List)
  (
    ((run_convert_once x (@list (= x y) z2)) (@pair y z2))
    ((run_convert_once (skolem w) z2)        (@pair (skolem w) z2))   ; do not traverse into skolems
    ((run_convert_once (f a) (@list z1 z2))  (alf.match ((fr (-> T U)) (zr @List)) (run_convert_once f (@list z1 z2))
                                                ((@pair fr zr)
                                                    (alf.match ((ar (-> T U)) (zrr @List)) (run_convert_once a zr)
                                                      ((@pair ar zrr) (@pair (fr ar) zrr))))))
    ((run_convert_once x true)               (@pair x true))
  )
)

(declare-rule convert_once ((T Type) (t T))
  :premise-list E @list
  :args (t)
  :conclusion (alf.match ((s T)) (run_convert_once t E)
                (
                  ((@pair s @list.nil) (= t s))
                ))
)
