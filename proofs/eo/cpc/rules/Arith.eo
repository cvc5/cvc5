(include "../theories/Builtin.eo")
(include "../theories/Reals.eo")
(include "../theories/Ints.eo")
(include "../programs/Arith.eo")
(include "../programs/Utils.eo")
(include "../programs/PolyNorm.eo")

;;;;; ProofRule::ARITH_SUM_UB

; program: $arith_rel_sum
; args:
; - r1 T : The first arithmetic relation.
; - r2 U : The second arithmetic relation.
; - a V: The first term in the relation.
; - b W: The second term in the relation.
; return: >
;   The relation that is implied when applications of the relations r1 and
;   r2 are added together for ProofRule::ARITH_SUM_UB and applied to a and b.
(program $arith_rel_sum ((T Type) (U Type) (V Type) (W Type) (a V) (b W))
  :signature (T U V W) Bool
  (
    (($arith_rel_sum < < a b) (< a b))
    (($arith_rel_sum < = a b) (< a b))
    (($arith_rel_sum < <= a b) (< a b))
    (($arith_rel_sum <= < a b) (< a b))
    (($arith_rel_sum <= = a b) (<= a b))
    (($arith_rel_sum <= <= a b) (<= a b))
    (($arith_rel_sum = < a b) (< a b))
    (($arith_rel_sum = = a b) (<= a b))  ; could be =, but internal proof checker does <=
    (($arith_rel_sum = <= a b) (<= a b))
  )
)

; program: $mk_arith_sum_ub
; args:
; - F Bool: A conjunction of arithmetic relations.
; - acc Bool: The current return value.
; return: the arithmetic relation that is implied by adding each of the relations in F together.
(program $mk_arith_sum_ub ((T Type) (U Type) (r1 (-> T U Bool)) (a1 T) (b1 U) (tail Bool :list)
                           (S Type) (V Type) (r2 (-> S V Bool)) (a2 S :list) (b2 V :list) (acc Bool))
  :signature (Bool Bool) Bool
  (
    (($mk_arith_sum_ub true acc)                      acc)
    (($mk_arith_sum_ub (and (r1 a1 b1) tail) (r2 a2 b2)) ($mk_arith_sum_ub tail ($arith_rel_sum r1 r2 (+ a1 a2) (+ b1 b2))))

  )
)

; rule: arith_sum_ub
; implements: ProofRule::ARITH_SUM_UB
; premises:
; - F Bool: A conjunction of arithmetic relations.
; conclusion: >
;   The arithmetic relation that is implied by adding each of the
;   relations in F together.
(declare-rule arith_sum_ub ((F Bool))
  :premise-list F and
  :conclusion ($mk_arith_sum_ub (eo::list_rev and F) (= 0 0))
)

;;;;; ProofRule::ARITH_MULT_POS

; program: $mk_arith_mult_pos
; args:
; - m S: A real or integer term to multiply by.
; - F Bool: The arithmetic atom to multiply.
; return: >
;   the result of multiply the atom by m. This is used to compute the
;   conclusion of the ProofRule::ARITH_MULT_POS rule.
(program $mk_arith_mult_pos ((T Type) (U Type) (S Type) (r (-> T U Bool)) (a T) (b U) (m S))
  :signature (S Bool) Bool
  (
    (($mk_arith_mult_pos m (r a b)) (r (* m a) (* m b)))
  )
)

; rule: arith_mult_pos
; implements: ProofRule::ARITH_MULT_POS
; args:
; - m T: A real or integer term to multiply by.
; - F Bool: The arithmetic atom to multiply.
; conclusion: >
;   An implication stating that if m is positive and F is true, then
;   the result of multiply m by F also holds.
(declare-rule arith_mult_pos ((T Type) (m T) (F Bool))
  :args (m F)
  :conclusion (=> (and (> m ($arith_mk_zero (eo::typeof m))) F) ($mk_arith_mult_pos m F))
)

;;;;; ProofRule::ARITH_MULT_NEG

; program: $arith_rel_inv
; args:
; - r T: An arithmetic relation.
; - a U: The first term in the relation.
; - b V: The second term in the relation.
; return: >
;   The relation that is obtained by flipping its arguments, applied to a and b.
;   This is used for determining the relation obtained when both sides are
;   multiplied by a negative term.
(program $arith_rel_inv ((T Type) (U Type) (V Type) (a U) (b V))
  :signature (T U V) Bool
  (
    (($arith_rel_inv = a b) (= a b))
    (($arith_rel_inv < a b) (> a b))
    (($arith_rel_inv <= a b) (>= a b))
    (($arith_rel_inv > a b) (< a b))
    (($arith_rel_inv >= a b) (<= a b))
  )
)

; program: $mk_arith_mult_neg
; args:
; - m S: A real or integer term to multiply by.
; - F Bool: The arithmetic atom to multiply.
; return: >
;   the result of multiply the atom by m and invert its relation.
;   This is used to compute the conclusion of the ProofRule::ARITH_MULT_NEG rule.
(program $mk_arith_mult_neg ((T Type) (U Type) (S Type) (r (-> T U Bool)) (a T) (b U) (m S))
  :signature (S Bool) Bool
  (
    (($mk_arith_mult_neg m (r a b)) ($arith_rel_inv r (* m a) (* m b)))
  )
)

; rule: arith_mult_neg
; implements: ProofRule::ARITH_MULT_NEG
; args:
; - m T: A real or integer term to multiply by.
; - F Bool: The arithmetic atom to multiply.
; conclusion: >
;   An implication stating that if m is negative and F is true, then
;   the result of multiply m by F and inverting its relation also holds.
(declare-rule arith_mult_neg ((T Type) (m T) (F Bool))
  :args (m F)
  :conclusion (=> (and (< m ($arith_mk_zero (eo::typeof m))) F) ($mk_arith_mult_neg m F))
)

;;;;; ProofRule::ARITH_TRICHOTOMY

; program: $arith_rel_trichotomy
; args:
; - r1 T: The first arithmetic relation.
; - r2 U: The second arithmetic relation.
; - a V: The first term in the relation.
; - b W: The second term in the relation.
; return: >
;   The relation that, along with r1 and r2, forms a trichotomy over
;   arithmetic values, applied to a and b.
(program $arith_rel_trichotomy ((T Type) (U Type) (V Type) (W Type) (a V) (b W))
  :signature (T U V W) Bool
  (
    (($arith_rel_trichotomy = < a b) (> a b))
    (($arith_rel_trichotomy = > a b) (< a b))
    (($arith_rel_trichotomy > = a b) (< a b))
    (($arith_rel_trichotomy < = a b) (> a b))
    (($arith_rel_trichotomy > < a b) (= a b))
    (($arith_rel_trichotomy < > a b) (= a b))
  )
)

; program: $arith_rel_trichotomy
; args:
; - r T: The arithmetic relation.
; - a V: The first term in the relation.
; - b W: The second term in the relation.
; return: >
;   The relation corresponding to the negation of r, applied to a and b.
(program $arith_rel_neg ((T Type) (U Type) (V Type) (a U) (b V))
  :signature (T U V) Bool
  (
    (($arith_rel_neg < a b) (>= a b))
    (($arith_rel_neg <= a b) (> a b))
    (($arith_rel_neg > a b) (<= a b))
    (($arith_rel_neg >= a b) (< a b))
  )
)

; program: $arith_normalize_lit
; args:
; - F Bool: An arithmetic literal, possibly negated or doubly negated.
; return: a literal equivalent to F that eliminates its negations, if any.
(program $arith_normalize_lit ((T Type) (U Type) (r (-> T U Bool)) (a T) (b U))
  :signature (Bool) Bool
  (
    (($arith_normalize_lit (not (not (r a b)))) (r a b))
    (($arith_normalize_lit (not (r a b)))       ($arith_rel_neg r a b))
    (($arith_normalize_lit (r a b))             (r a b))
  )
)

; program: $mk_arith_trichotomy
; premises:
; - F1: The first arithmetic atom, which is an application of a binary arithmetic relation.
; - F2: The first arithmetic atom, which is an application of a binary arithmetic relation over the same terms as F1.
; return: The relation that along with F1 and F2 forms a trichotomy.
(program $mk_arith_trichotomy
  ((T Type) (U Type) (S Type) (r1 (-> T U Bool)) (r2 (-> T U Bool)) (a T) (b U))
  :signature (Bool Bool) Bool
  (
    (($mk_arith_trichotomy (r1 a b) (r2 a b)) ($arith_rel_trichotomy r1 r2 a b))
  )
)

; rule: arith_trichotomy
; implements: ProofRule::ARITH_TRICHOTOMY
; premises:
; - F1: The first arithmetic atom, which is an application of a (possibly negated) binary arithmetic relation.
; - F2: The first arithmetic atom, which is an application of a (possibly negated) binary arithmetic relation over the same terms as F1.
; conclusion: >
;   A third relation over the same terms that along with F1 and F2
;   forms a trichotomy.
(declare-rule arith_trichotomy ((F1 Bool) (F2 Bool))
  :premises (F1 F2)
  :conclusion ($mk_arith_trichotomy ($arith_normalize_lit (not F1)) ($arith_normalize_lit (not F2)))
)

;;;;; ProofRule::INT_TIGHT_UB

; program: $greatest_int_lt
; args:
; - c R: A rational or integer value.
; return: the greatest integer less than (integer or real) c.
(program $greatest_int_lt ((R Type) (c R))
  :signature (R) Int
  (
    (($greatest_int_lt c) (eo::define ((ci (eo::to_z c)))
                               (eo::ite (eo::eq (eo::to_q c) (eo::to_q ci))
                                 (eo::add -1 ci)
                                 ci)))
  )
)

; rule: int_tight_ub
; implements: ProofRule::INT_TIGHT_UB
; premises:
; - r: The relation we are considering, whose right hand side should be a rational or integer value.
; conclusion: The result of tightening the upper bound.
(declare-rule int_tight_ub ((R Type) (s Int) (t R))
  :premises ((< s t))
  :conclusion (<= s ($greatest_int_lt t))
)

;;;;; ProofRule::INT_TIGHT_LB

; program: $least_int_gt
; args:
; - c R: A rational or integer value.
; return: the least integer greater than (integer or real) c.
(program $least_int_gt ((R Type) (c R))
  :signature (R) Int
  (
    (($least_int_gt c) (eo::add 1 (eo::to_z c)))
  )
)

; rule: int_tight_lb
; implements: ProofRule::INT_TIGHT_LB
; premises:
; - r: The relation we are considering, whose right hand side should be a rational or integer value.
; conclusion: The result of tightening the lower bound.
(declare-rule int_tight_lb ((R Type) (s Int) (t R))
  :premises ((> s t))
  :conclusion (>= s ($least_int_gt t))
)

;;;;; ProofRule::ARITH_MULT_TANGENT

; rule: arith_mult_tangent
; implements: ProofRule::ARITH_MULT_TANGENT
; args:
; - x R: The first arithmetic term.
; - y S: The second arithmetic term.
; - a R: The point of x we are considering.
; - b S: The point of y we are considering.
; - s Bool: Which direction the tangent plane is for, where true is >=, false is <=.
; conclusion: The tangent plane lemma at (a,b) for (x,y).
(declare-rule arith_mult_tangent ((R Type) (S Type) (x R) (y S) (a R) (b S) (s Bool))
  :args (x y a b s)
  :conclusion (eo::define ((tp (- (+ (* b x) (* a y)) (* a b))))
              (eo::define ((r1 (eo::ite s >= <=)))
              (eo::define ((r2 (eo::ite s <= >=)))
                (= (r1 (* x y) tp)
                   (or
                     (and (<= x a) (r2 y b))
                     (and (>= x a) (r1 y b))))))))

;;;;; ProofRule::ARITH_MULT_SIGN

; program: $strip_even_exponent
; args:
; - t T: The variable to strip.
; - m U: The monomial to process.
; return: >
;   The result of stripping even exponent of t from the beginning of m.
(program $strip_even_exponent ((T Type) (t T) (U Type) (V Type) (m V :list))
  :signature (T U) U
  (
  (($strip_even_exponent t (* t t m)) ($strip_even_exponent t m))
  (($strip_even_exponent t m)         m)
  )
)

; program: $mk_arith_mult_sign_sgn
; args:
; - sgn Bool: Whether the current portion of the monomial we have processed is entailed to be positive (resp. negative).
; - F Bool: A conjunction of the remaining premises we have left to process.
; - m T: The monomial we are considering.
; return: >
;   Whether the monomial we have processed is entailed to be positive (resp. negative).
(program $mk_arith_mult_sign_sgn ((T Type) (U Type) (V Type) (F Bool :list) (l Bool) (t T) (z U) (m V :list) (sgn Bool))
  :signature (Bool Bool T) Bool
  (
  (($mk_arith_mult_sign_sgn sgn (and (not (= t z)) F) (* t t m))  ; ensures non-empty
      (eo::requires (eo::to_z z) 0
        ($mk_arith_mult_sign_sgn sgn F ($strip_even_exponent t m))))
  (($mk_arith_mult_sign_sgn sgn (and (> t z) F) (* t m))
      (eo::requires (eo::to_z z) 0
        ($mk_arith_mult_sign_sgn sgn F ($strip_even_exponent t m))))
  (($mk_arith_mult_sign_sgn sgn (and (< t z) F) (* t m))
      (eo::requires (eo::to_z z) 0
        ($mk_arith_mult_sign_sgn (eo::not sgn) F ($strip_even_exponent t m))))
  ; base case
  (($mk_arith_mult_sign_sgn sgn true 1)   sgn)  
  ; handles the singleton antecedant case
  (($mk_arith_mult_sign_sgn sgn l m)      ($mk_arith_mult_sign_sgn sgn (eo::cons and l true) m))
  )
)

; rule: arith_mult_sign
; implements: ProofRule::ARITH_MULT_SIGN
; args:
; - F Bool: A conjunction of arithmetic relations.
; - m T: A monomial.
; conclusion: >
;   F implies the arithmetic relation over m that is implied by reasoning about
;   the sign of the variables in m.
(declare-rule arith_mult_sign ((T Type) (F Bool) (m T))
  :args (F m)
  :conclusion (=> F
                (eo::define ((r (eo::ite ($mk_arith_mult_sign_sgn true F m) > <)))
                  (r m ($arith_mk_zero (eo::typeof m)))))
)


;;;;; ProofRule::ARITH_MULT_ABS_COMPARISON

; program: $mk_arith_mult_abs_comparison_rec
; args:
; - F Bool: A conjunction of the remaining premises we have left to process.
; - C Bool: The current conclusion we have built so far.
; return: >
;   The literal proven by arith_mult_abs_comparison given C and the remaining
;   premises F.
; note: This program is a helper for $mk_arith_mult_abs_comparison.
(program $mk_arith_mult_abs_comparison_rec
  ((T Type) (U Type) (V Type) (W Type) (X Type)
   (a W) (b X) (r (-> W X Bool)) (t T) (u U) (z V) (B Bool :list))
  :signature (Bool Bool) Bool
  (
    (($mk_arith_mult_abs_comparison_rec (and (r (abs t) (abs u)) B) (r a b))
      ($mk_arith_mult_abs_comparison_rec B
        (r (eo::list_concat * a (* t)) (eo::list_concat * b (* u)))))
    (($mk_arith_mult_abs_comparison_rec (and (and (= (abs t) (abs u))
                                                  (not (= t z))) B) (> a b))
      (eo::requires (eo::to_z z) 0
        ($mk_arith_mult_abs_comparison_rec B
          (> (eo::list_concat * a (* t)) (eo::list_concat * b (* u))))))
    (($mk_arith_mult_abs_comparison_rec true (r a b))  (r (abs a) (abs b)))
  )
)

; program: $mk_arith_mult_abs_comparison
; args:
; - F Bool: A conjunction of the remaining premises.
; return: >
;   The literal proven by arith_mult_abs_comparison given premises F.
(program $mk_arith_mult_abs_comparison
  ((T Type) (U Type) (V Type) (r T) (t T) (u U) (z V) (B Bool :list))
  :signature (Bool) Bool
  (
    (($mk_arith_mult_abs_comparison (and (> (abs t) (abs u)) B))
      ($mk_arith_mult_abs_comparison_rec B (> (* t) (* u))))
    (($mk_arith_mult_abs_comparison (and (= (abs t) (abs u)) B))
      ($mk_arith_mult_abs_comparison_rec B (= (* t) (* u))))
  )
)

; rule: arith_mult_abs_comparison
; implements: ProofRule::ARITH_MULT_ABS_COMPARISON
; premises:
; - F Bool: A conjunction of arithmetic relations involving absolute value.
; conclusion: >
;   The arithmetic relation that is implied by combining the relations in F.
(declare-rule arith_mult_abs_comparison ((F Bool))
  :premise-list F and
  :conclusion ($mk_arith_mult_abs_comparison F)
)

;;;;; ProofRule::ARITH_REDUCTION

; define: $arith_to_int_reduction
; args:
; - r Real: The argument to to_int.
; return: the reduction predicate for (to_int r).
(define $arith_to_int_reduction ((r Real))
  (eo::define ((k (@purify (to_int r))))
    (and (<= 0/1 (- r k)) (< (- r k) 1/1))))

; define: $arith_int_div_total_reduction
; args:
; - u Int: The first argument to div_total.
; - v Int: The second argument to div_total.
; return: the reduction predicate for (div_total u v).
; note: >
;   We use an optimized form of the lemma when v is a non-zero constant.
;   This method does not evaluate if v is the constant zero.
(define $arith_int_div_total_reduction ((u Int) (v Int))
  (eo::define ((k (@purify (div_total u v))))
  (eo::define ((lb (<= (* v k) u)))
  (eo::ite (eo::is_z v)
    (eo::requires (eo::eq v 0) false
      (and lb (< u (* v (+ k (eo::ite (eo::is_neg v) -1 1))))))
    (and
      (=> (> v 0) (and lb (< u (* v (+ k 1)))))
      (=> (< v 0) (and lb (< u (* v (+ k -1))))))))))

; program: $arith_reduction_pred
; args:
; - t T: The term we are considering, which is expected to be an application of an extended arithmetic operator.
; return: the reduction predicate for term t.
(program $arith_reduction_pred ((T Type) (U Type) (V Type) (r Real) (a Int) (b Int) (u U) (v V))
  :signature (T) Bool
  (
  (($arith_reduction_pred (is_int u))       (eo::define ((k (@purify (to_int u))))
                                              (and (= (is_int u) (= (- u k) 0/1)) ($arith_to_int_reduction u))))
  (($arith_reduction_pred (to_int u))       (eo::define ((k (@purify (to_int u))))
                                              (and (= (to_int u) k) ($arith_to_int_reduction u))))
  (($arith_reduction_pred (/ u v))          (eo::define ((ur (eo::ite (eo::eq (eo::typeof u) Int) (to_real u) u)))
                                              (= (/ u v) (ite (= v ($arith_mk_zero (eo::typeof v))) (@div_by_zero ur) (/_total u v)))))
  (($arith_reduction_pred (div a b))        (= (div a b) (ite (= b 0) (@int_div_by_zero a) (div_total a b))))
  (($arith_reduction_pred (mod a b))        (= (mod a b) (ite (= b 0) (@mod_by_zero a) (mod_total a b))))
  (($arith_reduction_pred (/_total u v))    (eo::define ((k (@purify (/_total u v))))
                                              (and (= (/_total u v) k) (=> (not (= v ($arith_mk_zero (eo::typeof v)))) (= (* v k) u)))))
  (($arith_reduction_pred (div_total a b))  (eo::define ((k (@purify (div_total a b))))
                                              (and (= (div_total a b) k) ($arith_int_div_total_reduction a b))))
  (($arith_reduction_pred (mod_total a b))  (eo::define ((k (@purify (div_total a b))))
                                              (and (= (mod_total a b) (- a (* b k))) ($arith_int_div_total_reduction a b))))
  (($arith_reduction_pred (abs u))          (= (abs u) (ite (< u ($arith_mk_zero (eo::typeof u))) (- u) u)))
  )
)

; rule: arith_reduction
; implements: ProofRule::ARITH_REDUCTION
; args:
; - t T: The term we are considering, which is expected to be an application of an extended arithmetic operator.
; conclusion: The reduction predicate for t.
(declare-rule arith_reduction ((T Type) (t T))
  :args (t)
  :conclusion ($arith_reduction_pred t)
)

;;;;; ProofRule::ARITH_POLY_NORM

; rule: arith_poly_norm
; implements: ProofRule::ARITH_POLY_NORM
; args:
; - a U: The left-hand side of the equality.
; - b U: The right-hand side of the equality.
; requires: >
;   That the arithmetic terms a and b are equal up polynomial normalization.
; conclusion: The given equality.
(declare-rule arith_poly_norm ((U Type) (a U) (b U))
  :args ((= a b))
  :requires ((($get_arith_poly_norm a) ($get_arith_poly_norm b)))
  :conclusion (= a b)
)

;;;;; ProofRule::ARITH_POLY_NORM_REL

; program: $is_poly_norm_rel_consts
; args:
; - b Bool: >
;   a formula of the form (r cx cy) where r is a binary relation and cx and
;   cy are scaling factors.
; return: >
;   The result of checking if r is a polynomial normalization relation for a
;   formula of the form (= (r x1 x2) (r y1 y2)), where it is already known that
;   (= (* cx (- x1 x2)) (* cy (- y1 y2))). If r is any of <, <=, >=, or >, the
;   scaling factors must have the same sign. Returns false for any other relation.
(program $is_poly_norm_rel_consts ((T Type) (U Type) (cx T) (cy U) (b Bool))
  :signature (Bool) Bool
  (
    (($is_poly_norm_rel_consts (< cx cy))  (eo::eq ($sgn cx) ($sgn cy)))
    (($is_poly_norm_rel_consts (<= cx cy)) (eo::eq ($sgn cx) ($sgn cy)))
    (($is_poly_norm_rel_consts (= cx cy))  true)
    (($is_poly_norm_rel_consts (>= cx cy)) (eo::eq ($sgn cx) ($sgn cy)))
    (($is_poly_norm_rel_consts (> cx cy))  (eo::eq ($sgn cx) ($sgn cy)))
    (($is_poly_norm_rel_consts b)          false)
  )
)

; program: $is_eq_maybe_to_real
; args:
; - x U: The term to check.
; - y T: The target term.
; return: >
;   True if x is syntactically equal to y, possibly removing an application of
;   to_real.
(program $is_eq_maybe_to_real ((U Type) (x U) (T Type))
  :signature (U T) Bool
  (
  (($is_eq_maybe_to_real x x)           true)
  (($is_eq_maybe_to_real (to_real x) x) true)
  )
)

; rule: arith_poly_norm_rel
; implements: ProofRule::ARITH_POLY_NORM_REL
; premises:
; - eq Bool: >
;   An equality stating that terms t and s of the form (- x1 x2) and (- y1 y2)
;   are equal modulo polynomial normalization and some scaling factors. These
;   terms may be of arithmetic or bitvector type.
; args:
; - eqr Bool: The equivalence between relations, proven by this rule.
; requires: >
;  The constants for this rule are legal, x is equivalent to x1-x2, and y is
;  equivalent to y1-y2.
; conclusion: >
;   An equivalence between relations specified by eqr and justified by eq.
; note: >
;   The parameter r is expected to be a binary predicate. We provide the type
;   (-> R1 R2 R3) to acccount for the fact that its return type involves
;   eo::requires and hence is not Bool.
(declare-rule arith_poly_norm_rel
  ((U Type) (U1 Type) (U2 Type) (V Type) (V1 Type) (V2 Type)
   (R1 Type) (R2 Type) (R3 Type) (r (-> R1 R2 R3))
   (x U) (y V) (cx U) (cy V) (x1 U1) (x2 U2) (y1 V1) (y2 V2))
  :premises ((= (* cx x) (* cy y)))
  :args ((= (r x1 x2) (r y1 y2)))
  :requires ((($is_poly_norm_rel_consts (r cx cy)) true)
             (($is_eq_maybe_to_real x (- x1 x2)) true)
             (($is_eq_maybe_to_real y (- y1 y2)) true))
  :conclusion (= (r x1 x2) (r y1 y2))
)

;;;;; ProofRewriteRule::ARITH_POW_ELIM

; rule: arith-pow-elim
; implements: ProofRewriteRule::ARITH_POW_ELIM
; args:
; - eq Bool: The equality to prove with this rule.
; requires: n is integral, and b is the multiplication of a, n times.
; conclusion: the equality between a and b.
(declare-rule arith-pow-elim ((T Type) (a T) (n T) (b T))
  :args ((= (^ a n) b))
  :requires (((eo::to_q (eo::to_z n)) (eo::to_q n))
             (($singleton_elim ($arith_unfold_pow (eo::to_z n) a)) b))
  :conclusion (= (^ a n) b)
)
