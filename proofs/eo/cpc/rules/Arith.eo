(include "../theories/Builtin.eo")
(include "../theories/Reals.eo")
(include "../theories/Ints.eo")
(include "../programs/Arith.eo")
(include "../programs/Utils.eo")

;;;;; ProofRule::ARITH_SUM_UB

; program: $arith_rel_sum
; args:
; - r1 T : The first arithmetic relation.
; - r2 U : The second arithmetic relation.
; return: >
;   the relation that is implied when applications of the relations r1 and
;   r2 are added together for ProofRule::ARITH_SUM_UB.
(program $arith_rel_sum ((T Type) (U Type) (S Type) (r1 T) (r2 U))
  (T U) S
  (
    (($arith_rel_sum < <) <)
    (($arith_rel_sum < =) <)
    (($arith_rel_sum < <=) <)
    (($arith_rel_sum <= <) <)
    (($arith_rel_sum <= =) <=)
    (($arith_rel_sum <= <=) <=)
    (($arith_rel_sum = <) <)
    (($arith_rel_sum = =) <=)  ; could be =, but internal proof checker does <=
    (($arith_rel_sum = <=) <=)
  )
)

; program: $arith_mk_zero
; args:
; - u Type : The type of the zero, which should be Int or Real.
; return: the zero for the given type.
(program $arith_mk_zero ((T Type))
  (Type) T
  (
    (($arith_mk_zero Real) 0/1)
    (($arith_mk_zero Int)  0)
  )
)

; program: $mk_arith_sum_ub
; args:
; - F Bool: A conjunction of arithmetic relations.
; return: the arithmetic relation that is implied by adding each of the relations in F together.
(program $mk_arith_sum_ub ((T Type) (U Type) (r (-> T U Bool)) (a T) (b U) (tail Bool :list))
    (Bool) Bool
    (
        (($mk_arith_sum_ub true)               (= 0 0))
        (($mk_arith_sum_ub (and (r a b) tail)) 
          (eo::match ((S Type) (V Type) (r2 (-> S V Bool)) (a2 S :list) (b2 V :list))
            ($mk_arith_sum_ub tail)
            (((r2 a2 b2) (_ ($arith_rel_sum r r2) (+ a a2) (+ b b2))))))
    )
)

; rule: arith_sum_ub
; implements: ProofRule::ARITH_SUM_UB
; premises:
; - F Bool: A conjunction of arithmetic relations.
; conclusion: >
;   The arithmetic relation that is implied by adding each of the
;   relations in F together.
(declare-rule arith_sum_ub ((F Bool))
  :premise-list F and
  :conclusion ($mk_arith_sum_ub F)
)

;;;;; ProofRule::ARITH_MULT_POS

; program: $mk_arith_mult_pos
; args:
; - m S: A real or integer term to multiply by.
; - F Bool: The arithmetic atom to multiply.
; return: >
;   the result of multiply the atom by m. This is used to compute the
;   conclusion of the ProofRule::ARITH_MULT_POS rule.
(program $mk_arith_mult_pos ((T Type) (U Type) (S Type) (r (-> T U Bool)) (a T) (b U) (m S))
  (S Bool) Bool
  (
    (($mk_arith_mult_pos m (r a b)) (r (* m a) (* m b)))
  )
)

; rule: arith_mult_pos
; implements: ProofRule::ARITH_MULT_POS
; args:
; - m T: A real or integer term to multiply by.
; - F Bool: The arithmetic atom to multiply.
; conclusion: >
;   An implication stating that if m is positive and F is true, then
;   the result of multiply m by F also holds.
(declare-rule arith_mult_pos ((T Type) (m T) (F Bool))
  :args (m F)
  :conclusion (=> (and (> m ($arith_mk_zero (eo::typeof m))) F) ($mk_arith_mult_pos m F))
)

;;;;; ProofRule::ARITH_MULT_NEG

; program: $arith_rel_inv
; args:
; - r T: An arithmetic relation.
; return: >
;   the relation that is obtained by flipping its side. This is used for
;   determining the relation obtained when multiply both sides by a negative term.
(program $arith_rel_inv ((T Type) (U Type) (S Type))
  (T) S
  (
    (($arith_rel_inv =) =)
    (($arith_rel_inv <) >)
    (($arith_rel_inv <=) >=)
    (($arith_rel_inv >) <)
    (($arith_rel_inv >=) <=)
  )
)

; program: $mk_arith_mult_neg
; args:
; - m S: A real or integer term to multiply by.
; - F Bool: The arithmetic atom to multiply.
; return: >
;   the result of multiply the atom by m and invert its relation.
;   This is used to compute the conclusion of the ProofRule::ARITH_MULT_NEG rule.
(program $mk_arith_mult_neg ((T Type) (U Type) (S Type) (r (-> T U Bool)) (a T) (b U) (m S))
  (S Bool) Bool
  (
    (($mk_arith_mult_neg m (r a b)) (_ ($arith_rel_inv r) (* m a) (* m b)))
  )
)

; rule: arith_mult_neg
; implements: ProofRule::ARITH_MULT_NEG
; args:
; - m T: A real or integer term to multiply by.
; - F Bool: The arithmetic atom to multiply.
; conclusion: >
;   An implication stating that if m is negative and F is true, then
;   the result of multiply m by F and inverting its relation also holds.
(declare-rule arith_mult_neg ((T Type) (m T) (F Bool))
  :args (m F)
  :conclusion (=> (and (< m ($arith_mk_zero (eo::typeof m))) F) ($mk_arith_mult_neg m F))
)

;;;;; ProofRule::ARITH_TRICHOTOMY

; program: $arith_rel_trichotomy
; args:
; - r1 T: The first arithmetic relation.
; - r2 U: The second arithmetic relation.
; return: >
;   the relation that along with r1 and r2 form a trichotomy over
;   arithmetic values.
(program $arith_rel_trichotomy ((T Type) (U Type) (S Type))
  (T U) S
  (
    (($arith_rel_trichotomy = <) >)
    (($arith_rel_trichotomy = >) <)
    (($arith_rel_trichotomy > =) <)
    (($arith_rel_trichotomy < =) >)
    (($arith_rel_trichotomy > <) =)
    (($arith_rel_trichotomy < >) =)
  )
)

; program: $arith_rel_trichotomy
; args:
; - r T: The arithmetic relation.
; return: the relation corresponding to the negation of r.
(program $arith_rel_neg ((T Type) (U Type) (S Type))
  (T) S
  (
    (($arith_rel_neg <) >=)
    (($arith_rel_neg <=) >)
    (($arith_rel_neg >) <=)
    (($arith_rel_neg >=) <)
  )
)

; program: $arith_normalize_lit
; args:
; - F Bool: An arithmetic literal, possibly negated or doubly negated.
; return: a literal equivalent to F that eliminates its negations, if any.
(program $arith_normalize_lit ((T Type) (U Type) (r (-> T U Bool)) (a T) (b U))
  (Bool) Bool
  (
    (($arith_normalize_lit (not (not (r a b)))) (r a b))
    (($arith_normalize_lit (not (r a b)))       (_ ($arith_rel_neg r) a b))
    (($arith_normalize_lit (r a b))             (r a b))
  )
)

; program: $mk_arith_trichotomy
; premises:
; - F1: The first arithmetic atom, which is an application of a binary arithmetic relation.
; - F2: The first arithmetic atom, which is an application of a binary arithmetic relation over the same terms as F1.
; return: the relation that along with F1 and F2 forms a trichotomy.
(program $mk_arith_trichotomy ((T Type) (U Type) (S Type) (r1 (-> T U Bool)) (r2 (-> T U Bool)) (a T) (b U))
  (Bool Bool) Bool
  (
    (($mk_arith_trichotomy (r1 a b) (r2 a b)) (_ ($arith_rel_trichotomy r1 r2) a b))
  )
)

; rule: arith_trichotomy
; implements: ProofRule::ARITH_TRICHOTOMY
; premises:
; - F1: The first arithmetic atom, which is an application of a (possibly negated) binary arithmetic relation.
; - F2: The first arithmetic atom, which is an application of a (possibly negated) binary arithmetic relation over the same terms as F1.
; conclusion: >
;   A third relation over the same terms that along with F1 and F2
;   forms a trichotomy.
(declare-rule arith_trichotomy ((F1 Bool) (F2 Bool))
  :premises (F1 F2)
  :conclusion ($mk_arith_trichotomy ($arith_normalize_lit (not F1)) ($arith_normalize_lit (not F2)))
)

;;;;; ProofRule::INT_TIGHT_UB

; program: $greatest_int_lt
; args:
; - c R: A rational or integer value.
; return: the greatest integer less than (integer or real) c.
(program $greatest_int_lt ((R Type) (c R))
  (R) Int
  (
    (($greatest_int_lt c) (eo::define ((ci (eo::to_z c)))
                               (eo::ite (eo::is_eq (eo::to_q c) (eo::to_q ci))
                                 (eo::add -1 ci)
                                 ci)))
  )
)

; rule: int_tight_ub
; implements: ProofRule::INT_TIGHT_UB
; premises:
; - r: The relation we are considering, whose right hand side should be a rational or integer value.
; conclusion: The result of tightening the upper bound.
(declare-rule int_tight_ub ((R Type) (s Int) (t R))
  :premises ((< s t))
  :conclusion (<= s ($greatest_int_lt t))
)

;;;;; ProofRule::INT_TIGHT_LB

; program: $least_int_gt
; args:
; - c R: A rational or integer value.
; return: the least integer greater than (integer or real) c.
(program $least_int_gt ((R Type) (c R))
  (R) Int
  (
    (($least_int_gt c) (eo::add 1 (eo::to_z c)))
  )
)

; rule: int_tight_lb
; implements: ProofRule::INT_TIGHT_LB
; premises:
; - r: The relation we are considering, whose right hand side should be a rational or integer value.
; conclusion: The result of tightening the lower bound.
(declare-rule int_tight_lb ((R Type) (s Int) (t R))
  :premises ((> s t))
  :conclusion (>= s ($least_int_gt t))
)

;;;;; ProofRule::ARITH_MULT_TANGENT

; rule: arith_mult_tangent
; implements: ProofRule::ARITH_MULT_TANGENT
; args:
; - x R: The first arithmetic term.
; - y S: The second arithmetic term.
; - a R: The point of x we are considering.
; - b S: The point of y we are considering.
; - s Bool: Which direction the tangent plane is for, where true is >=, false is <=.
; conclusion: The tangent plane lemma at (a,b) for (x,y).
(declare-rule arith_mult_tangent ((R Type) (S Type) (x R) (y S) (a R) (b S) (s Bool))
  :args (x y a b s)
  :conclusion (eo::define ((tp (- (+ (* b x) (* a y)) (* a b))))
              (eo::define ((r1 (eo::ite s >= <=)))
              (eo::define ((r2 (eo::ite s <= >=)))
                (= (r1 (* x y) tp)
                   (or
                     (and (<= x a) (r2 y b))
                     (and (>= x a) (r1 y b))))))))

;;;;; ProofRule::ARITH_REDUCTION

; define: $arith_to_int_reduction
; args:
; - r Real: The argument to to_int.
; return: the reduction predicate for (to_int r).
(define $arith_to_int_reduction ((r Real))
  (eo::define ((k (@purify (to_int r))))
    (and (<= 0/1 (- r k)) (< (- r k) 1/1))))

; define: $arith_int_div_total_reduction
; args:
; - u Int: The first argument to div_total.
; - v Int: The second argument to div_total.
; return: the reduction predicate for (div_total u v).
; note: >
;   We use an optimized form of the lemma when v is a non-zero constant.
;   This method does not evaluate if v is the constant zero.
(define $arith_int_div_total_reduction ((u Int) (v Int))
  (eo::define ((k (@purify (div_total u v))))
  (eo::define ((lb (<= (* v k) u)))
  (eo::ite (eo::is_z v)
    (eo::requires (eo::is_eq v 0) false
      (and lb (< u (* v (+ k (eo::ite (eo::is_neg v) -1 1))))))
    (and
      (=> (> v 0) (and lb (< u (* v (+ k 1)))))
      (=> (< v 0) (and lb (< u (* v (+ k -1))))))))))

; define: $arith_reduction_pred
; args:
; - t T: The term we are considering, which is expected to be an application of an extended arithmetic operator.
; return: the reduction predicate for term t.
(define $arith_reduction_pred ((T Type :implicit) (t T))
  (eo::match ((r Real) (a Int) (b Int) (U Type) (u U) (V Type) (v V))
    t
    (
    ((is_int u)       (eo::define ((k (@purify (to_int u))))
                        (and (= t (= (- u k) 0/1)) ($arith_to_int_reduction u))))
    ((to_int u)       (eo::define ((k (@purify (to_int u))))
                        (and (= t k) ($arith_to_int_reduction u))))
    ((/ u v)          (= t (ite (= v ($arith_mk_zero (eo::typeof v))) (@div_by_zero u) (/_total u v))))
    ((div a b)        (= t (ite (= b 0) (@int_div_by_zero a) (div_total a b))))
    ((mod a b)        (= t (ite (= b 0) (@mod_by_zero a) (mod_total a b))))
    ((/_total u v)    (eo::define ((k (@purify (/_total u v))))
                        (and (= t k) (=> (not (= v ($arith_mk_zero (eo::typeof v)))) (= (* v k) u)))))
    ((div_total a b)  (eo::define ((k (@purify (div_total a b))))
                        (and (= t k) ($arith_int_div_total_reduction a b))))
    ((mod_total a b)  (eo::define ((k (@purify (div_total a b))))
                        (and (= t (- a (* b k))) ($arith_int_div_total_reduction a b))))
    ((abs u)          (= t (ite (< u ($arith_mk_zero (eo::typeof u))) (- u) u)))
    )
  )
)

; rule: arith_reduction
; implements: ProofRule::ARITH_REDUCTION
; args:
; - t T: The term we are considering, which is expected to be an application of an extended arithmetic operator.
; conclusion: The reduction predicate for t.
(declare-rule arith_reduction ((T Type) (t T))
  :args (t)
  :conclusion ($arith_reduction_pred t)
)
