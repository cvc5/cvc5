(include "../theories/Builtin.eo")
(include "../programs/Nary.eo")

;;;;; ProofRule::REFL

; rule: refl
; implements: ProofRule::REFL
; args:
; - t T: The term to apply reflexivity to.
; conclusion: The equality between t and itself.
(declare-rule refl ((T Type) (t T))
    :args (t)
    :conclusion (= t t)
)

;;;;; ProofRule::SYMM

; rule: symm
; implements: ProofRule::SYMM
; args:
; - F Bool: The (dis)equality to apply symmetry to.
; conclusion: The inverted version of the (dis)equality F.
(declare-rule symm ((F Bool))
    :premises (F)
    :conclusion
        (eo::match ((T Type) (t1 T) (t2 T))
            F
            (
                ((= t1 t2)       (= t2 t1))
                ((not (= t1 t2)) (not (= t2 t1)))
            ))
)

;;;;; ProofRule::TRANS

; program: $mk_trans
; args:
; - t1 U: The current left hand side of the equality we have proven.
; - t2 U: The current right hand side of the equality we have proven.
; - E Bool: A conjunction of the remaining equalities we have left to process.
; return: >
;   An equality between the original left hand side and the final right
;   hand side. Each additional equality checks that its left hand side matches
;   the current right hand side.
(program $mk_trans ((U Type) (t1 U) (t2 U) (t3 U) (t4 U) (tail Bool :list))
    (U U Bool) Bool
    (
        (($mk_trans t1 t2 (and (= t3 t4) tail))
            (eo::requires t2 t3 ($mk_trans t1 t4 tail)))
        (($mk_trans t1 t2 true)              (= t1 t2))
    )
)

; rule: trans
; implements: ProofRule::TRANS
; premises:
; - E [:list]: A conjunction of equalities to apply transitivity to.
; conclusion: >
;   An equality between the left hand side of the first equality
;   and the right hand side of the last equality, assuming that the right hand
;   side of each equality matches the left hand side of the one that follows it.
(declare-rule trans ((T Type) (U Type) (E Bool) (f (-> T U)))
    :premise-list E and
    :conclusion
        (eo::match ((t1 U) (t2 U) (tail Bool :list))
        E
        (((and (= t1 t2) tail) ($mk_trans t1 t2 tail))))
)

;;;;; ProofRule::CONG

; program: $mk_cong_rhs
; args:
; - t U: The left hand side of the equality we have yet to process.
; - E Bool: A conjunction of the remaining equalities we have left to process, in reverse order.
; return: >
;   The right hand side of the equality.
(program $mk_cong_rhs ((T Type) (U Type) (f (-> T U)) (t1 U) (t2 U) (t3 U) (tail Bool :list))
    (U Bool) U
    (
        (($mk_cong_rhs (f t1) (and (= t1 t2) tail))  (_ ($mk_cong_rhs f tail) t2))
        (($mk_cong_rhs f true)                       f)
    )
)

; rule: cong
; implements: ProofRule::CONG
; premises:
; - E [:list]: A conjunction of equalities to apply congruence to.
; args:
; - t U: >
;   The term to apply congruence to. This is assumed to be an application of
;   a function that is not n-ary, e.g. it is not marked :right-assoc-nil.
; conclusion: >
;   An equality between applications of the operator of t whose arguments are
;   given by the equalities in E.
; note: >
;   Congruence for n-ary operators requires a different rule (nary_cong) below.
(declare-rule cong ((U Type) (E Bool) (t U))
    :premise-list E and
    :args (t)
    :conclusion (= t ($mk_cong_rhs t ($nary_reverse E)))
)

;;;;; ProofRule::NARY_CONG

; program: $mk_nary_cong_rhs
; args:
; - t U: The term (left hand side of the equality) we are applying congruence over.
; - E Bool: A conjunction of the remaining equalities we have left to process.
; return: >
;   The right hand side of the equality proven by nary_cong for f and
;   the given premises E.
(program $mk_nary_cong_rhs ((U Type) (f (-> U U U)) (s1 U) (s2 U) (t U :list) (tail Bool :list) (nil U))
    (U Bool) U
    (
        (($mk_nary_cong_rhs (f s1 t) (and (= s1 s2) tail))  (eo::cons f s2 ($mk_nary_cong_rhs t tail)))
        (($mk_nary_cong_rhs nil true)                       nil)
    )
)

; rule: nary_cong
; implements: ProofRule::NARY_CONG
; premises:
; - E [:list]: A conjunction of equalities to apply nary-congruence to.
; args:
; - t U: >
;   The term to apply congruence to. This is assumed to be an application of
;   a function that is a right-associative n-ary operator with nil terminator,
;   i.e. it is marked :right-assoc-nil. It is required to be the left hand side
;   of the equality we are proving.
; conclusion: >
;   An equality between applications of f whose arguments are given
;   by the equalities in E.
(declare-rule nary_cong ((U Type) (E Bool) (t U))
    :premise-list E and
    :args (t)
    :conclusion (= t ($mk_nary_cong_rhs t E))
)

;;;;; ProofRule::TRUE_INTRO

; rule: true_intro
; implements: ProofRule::TRUE_INTRO
; premises:
; - F: A formula.
; conclusion: The equality between F and true.
(declare-rule true_intro ((F Bool))
    :premises (F)
    :conclusion (= F true)
)

;;;;; ProofRule::TRUE_ELIM

; rule: true_elim
; implements: ProofRule::TRUE_ELIM
; premises:
; - F1: The formula, which is an equality whose right hand side is true.
; conclusion: The left hand side of the premise.
(declare-rule true_elim ((F Bool))
    :premises ((= F true))
    :conclusion F
)

;;;;; ProofRule::FALSE_INTRO

; rule: false_intro
; implements: ProofRule::FALSE_INTRO
; premises:
; - F1: The formula, which is a negation.
; conclusion: The equality between the formula the premise negates and false.
(declare-rule false_intro ((F Bool))
    :premises ((not F))
    :conclusion (= F false)
)

;;;;; ProofRule::FALSE_ELIM

; rule: false_elim
; implements: ProofRule::FALSE_ELIM
; premises:
; - F1: The formula, which is an equality whose right hand side is false.
; conclusion: The negation of the left hand side of the premise.
(declare-rule false_elim ((F Bool))
    :premises ((= F false))
    :conclusion (not F)
)

;;;;; ProofRule::HO_CONG

; program: $mk_ho_cong
; args:
; - t1 U: The current left hand side of the equality we have proven.
; - t2 U: The current right hand side of the equality we have proven.
; - E Bool: A conjunction of the remaining equalities we have left to process.
; return: >
;   An equality where the original terms are applied to the left and
;   right hand sides of the equalities given by E.
(program $mk_ho_cong ((T Type) (U Type) (f1 (-> T U)) (f2 (-> T U)) (t1 U) (t2 U) (tail Bool :list))
    (U U Bool) Bool
    (
        (($mk_ho_cong f1 f2 (and (= t1 t2) tail)) ($mk_ho_cong (f1 t1) (f2 t2) tail))
        (($mk_ho_cong t1 t2 true)                 (= t1 t2))
        (($mk_ho_cong f1 f2 (= t1 t2))            (= (f1 t1) (f2 t2)))
    )
)

; rule: ho_cong
; implements: ProofRule::HO_CONG
; premises:
; - E [:list]: A conjunction of equalities to apply congruence to.
; conclusion: >
;   An equality between a function application that is given by
;   the premises E. Note that the first equality in E should be an equality
;   between the functions that are respectively applied to the arguments given by
;   the remaining equalities.
(declare-rule ho_cong ((T Type) (U Type) (E Bool) (f (-> T U)))
    :premise-list E and
    :args ()
    :conclusion
        (eo::match ((t1 U) (t2 U) (tail Bool :list))
        E
        (((and (= t1 t2) tail) ($mk_ho_cong t1 t2 tail))))
)

;;-------------------- Instances of THEORY_REWRITE

; program: $mk_distinct-elim
; args:
; - F Bool: The application of distinct to eliminate.
; return: The result of converting the operator "distinct" in F to negated equalities.
; note: >
;   The distinct function is already treated as pairwise, thus we only need to convert from
;   binary distinct to disequalities.
(program $mk_distinct-elim ((T Type) (x T) (y T) (b Bool :list))
  (Bool) Bool
  (
  (($mk_distinct-elim (and (distinct x y) b))   (eo::cons and (not (= x y)) ($mk_distinct-elim b)))
  (($mk_distinct-elim true)                     true)
  (($mk_distinct-elim (distinct x y))           (eo::cons and (not (= x y)) true))
  )
)

; rule: distinct-elim
; implements: ProofRewriteRule::DISTINCT_ELIM.
; args:
; - eq Bool: The equality between formulas b1 and b2 to prove.
; requires: Showing that eliminating the operator "distinct" from b1 results in b2.
; conclusion: The equality (= b1 b2).
(declare-rule distinct-elim ((b1 Bool) (b2 Bool))
  :args ((= b1 b2))
  :requires ((($singleton_elim ($mk_distinct-elim b1)) b2))
  :conclusion (= b1 b2)
)

; rule: lambda-elim
; implements: ProofRewriteRule::LAMBDA_ELIM.
; args:
; - eq : Bool. The equality to prove between terms a and b.
; requires: >
;   Showing that the lambda on the left hand side of eq has bound variables that
;   coincide with the arguments of its body, and its body is an application of
;   the right hand side of the equality.
; conclusion: The given equality.
(declare-rule lambda-elim ((T Type) (U Type) (x @List) (t T) (f U))
  :args ((= (lambda x t) f))
  :requires ((($get_arg_list t) x) (($is_app f t) true))
  :conclusion (= (lambda x t) f)
)
