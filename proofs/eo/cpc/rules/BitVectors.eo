(include "../programs/BitVectors.eo")

(include "../programs/PolyNorm.eo")
(include "../programs/Bitblasting.eo")


;;;;; ProofRewriteRule::BV_REPEAT_ELIM

; rule: bv-repeat-elim
; implements: ProofRewriteRule::BV_REPEAT_ELIM
; args:
; - eq Bool: The equality to prove with this rule.
; requires: b is the concatenation of a, n times.
; conclusion: the equality between a and b.
(declare-rule bv-repeat-elim ((k1 Int) (k2 Int) (n Int) (a (BitVec k1)) (b (BitVec k2)))
  :args ((= (repeat n a) b))
  :requires ((($singleton_elim ($bv_unfold_repeat n a)) b))
  :conclusion (= (repeat n a) b)
)

;;;;; ProofRewriteRule::BV_BITWISE_SLICING

; program: $bv_mk_bitwise_slicing_rec
; args:
; - f (-> (BitVec n) (BitVec n) (BitVec n)): The function we are applying bitwise slicing to.
; - c (BitVec n): The bitvector constant we are basing the slicing on.
; - a (BitVec n): The non-constant porition that is being sliced.
; - b (BitVec m): The bitlist representation of c that we have yet to process.
; - bit Bool: The value of the last bit we saw.
; - start Int: The start index from which all bits from c we processed each had the same value as bit.
; - end Int: The end index, which is the current bit of c we are processing.
; return: >
;   The result of the bitwise slicing. For example this program will return
;   (concat (bvand ((_ extract 3 2) #b0011) ((_ extract 3 2) x))
;           (bvand ((_ extract 1 0) #b0011) ((_ extract 1 0) x)))
;   given input where f is bvand, c is #b0011, and a is x.
(program $bv_mk_bitwise_slicing_rec
  ((n Int) (m Int)
   (f (-> (BitVec n) (BitVec n) (BitVec n))) (a (BitVec n)) (c (BitVec n))
   (b Bool) (bn Bool) (bs (BitVec m) :list) (start Int) (end Int))
  ((-> (BitVec n) (BitVec n) (BitVec n)) (BitVec n) (BitVec n) (BitVec m) Bool Int Int) (BitVec n)
  (
  (($bv_mk_bitwise_slicing_rec f c a bs bn start -1)
      (eo::cons concat ($nary_app f (extract start 0 c) (extract start 0 a)) @bv_empty))
  (($bv_mk_bitwise_slicing_rec f c a (@from_bools b bs) bn start end)
        (eo::define ((em1 (eo::add end -1)) (ep1 (eo::add end 1)))
        (eo::ite (eo::is_eq b bn)
          ($bv_mk_bitwise_slicing_rec f c a bs b start em1)
          (eo::cons concat
            ($nary_app f (extract start ep1 c) (extract start ep1 a))
            ($bv_mk_bitwise_slicing_rec f c a bs b end em1)))))
  )
)

; define: $bv_is_bitwise_slicing_op
; args:
; - f : (-> (BitVec n) (BitVec n) (BitVec n)). The function to inspect.
; return: >
;   true if we can apply bitwise slicing to f. This is the case if f
;   is either bvand, bvor, or bvxor.
(define $bv_is_bitwise_slicing_op ((n Int :implicit) (f (-> (BitVec n) (BitVec n) (BitVec n))))
  (eo::or (eo::is_eq f bvand) (eo::is_eq f bvor) (eo::is_eq f bvxor)))

; program: $bv_mk_bitwise_slicing
; args:
; - a (BitVec n): The term to apply bitwise slicing to.
; return: >
;   The result of applying bitwise slicing to a. For example, given
;   (bvand x #b0011) as a, this program will return
;   (concat (bvand ((_ extract 3 2) #b0011) ((_ extract 3 2) x))
;           (bvand ((_ extract 1 0) #b0011) ((_ extract 1 0) x))).
(define $bv_mk_bitwise_slicing ((n Int :implicit) (a (BitVec n)))
  (eo::match ((m Int) (f (-> (BitVec m) (BitVec m) (BitVec m))) (a1 (BitVec m)) (a2 (BitVec m) :list))
    a
    (
    ((f a1 a2)    ($singleton_elim
                  (eo::define ((c ($bv_get_first_const_child a)))
                  (eo::requires ($bv_is_bitwise_slicing_op f) true
                  (eo::requires (eo::is_eq c @bv_empty) false
                  (eo::define ((wm1 (eo::add (eo::len c) -1)))
                  ($bv_mk_bitwise_slicing_rec
                    f
                    c
                    (eo::define ((nil (eo::nil f a1 a2)))
                      ($singleton_elim ($nary_diff f nil a (eo::cons f c nil))))  ; remove the constant and recollect
                    ($bv_const_to_bitlist c)               ; convert the constant to a bitlist
                    ($bv_bit_set c wm1) wm1 wm1)))))))
    )
  )
)

; rule: bv-bitwise-slicing
; implements: ProofRewriteRule::BV_BITWISE_SLICING
; args:
; - eq Bool: The equality to prove with this rule.
; requires: We require that applying $bv_mk_bitwise_slicing to a gives b.
; conclusion: the equality between a and b.
(declare-rule bv-bitwise-slicing
  ((n Int) (a (BitVec n)) (b (BitVec n)))
  :args ((= a b))
  :requires ((($bv_mk_bitwise_slicing a) b))
  :conclusion (= a b)
)

;;;;; ProofRule::BV_BITBLAST_STEP

; rule: bv_bitblast_step
; implements: ProofRule::BV_BITBLAST_STEP.
; args:
; - eq Bool: The equality to prove.
; requires: >
;   We require that $bv_mk_bitblast_step applied to the left hand side returns
;   the right hand side.
; conclusion: The given equality.
; note: >
;   The current implementation only covers some of the operators that may
;   appear in ProofRule::BV_BITBLAST_STEP.
(declare-rule bv_bitblast_step
  ((n Int) (a (BitVec n)) (b (BitVec n)))
  :args ((= a b))
  :requires ((($bv_mk_bitblast_step a) b))
  :conclusion (= a b)
)

;;;;; ProofRule::BV_POLY_NORM

; rule: bv_poly_norm
; implements: ProofRule::BV_POLY_NORM
; args:
; - a (BitVec n): The left-hand side of the equality.
; - b (BitVec n): The right-hand side of the equality.
; requires: >
;   That the bitvector terms a and b are equal up to polynomial normalization.
; conclusion: The given equality.
(declare-rule bv_poly_norm ((n Int) (a (BitVec n)) (b (BitVec n)))
  :args ((= a b))
  :requires (((eo::define ((w ($arith_eval_int_pow_2 ($bv_bitwidth (eo::typeof a)))))
                (eo::is_eq ($get_bv_poly_norm w a) ($get_bv_poly_norm w b))) true))
  :conclusion (= a b)
)

;;;;; ProofRule::BV_POLY_NORM_EQ

; rule: bv_poly_norm_eq
; implements: ProofRule::BV_POLY_NORM_EQ
; premises:
; - eq Bool: >
;   An equality stating that terms t and s of the form (bvmul cx (bvsub x1 x2))
;   and (bvmul cy (bvsub y1 y2)) are equal.
; args:
; - eqr Bool: The equivalence between equalities, proven by this rule.
; requires: >
;   The constants cx and cy are odd.
; conclusion: >
;   An equivalence between equalities specified by eqr and justified by eq.
(declare-rule bv_poly_norm_eq ((n Int) (cx (BitVec n)) (xb1 (BitVec n)) (xb2 (BitVec n))
                               (cy (BitVec n)) (yb1 (BitVec n)) (yb2 (BitVec n)) (one (BitVec n) :list))
  :premises ((= (bvmul cx (bvsub xb1 xb2) one) (bvmul cy (bvsub yb1 yb2) one)))
  :args ((= (= xb1 xb2) (= yb1 yb2)))
  :requires (((eo::to_z one) 1) ((eo::zmod (eo::to_z cx) 2) 1) ((eo::zmod (eo::to_z cy) 2) 1))
  :conclusion (= (= xb1 xb2) (= yb1 yb2))
)
