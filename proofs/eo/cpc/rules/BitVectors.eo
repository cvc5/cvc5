(include "../programs/BitVectors.eo")

(include "../programs/PolyNorm.eo")
(include "../programs/Bitblasting.eo")


;;;;; ProofRewriteRule::BV_REPEAT_ELIM

; rule: bv-repeat-elim
; implements: ProofRewriteRule::BV_REPEAT_ELIM
; args:
; - eq Bool: The equality to prove with this rule.
; requires: b is the concatenation of a, n times.
; conclusion: the equality between a and b.
(declare-rule bv-repeat-elim ((k1 Int) (k2 Int) (n Int) (a (BitVec k1)) (b (BitVec k2)))
  :args ((= (repeat n a) b))
  :requires ((($singleton_elim ($bv_unfold_repeat n a)) b))
  :conclusion (= (repeat n a) b)
)

;;;;; ProofRewriteRule::BV_SMULO_ELIM

; define: $bv_smulo_elim
; args:
; - xa (BitVec n): An xor term involving the first argument to bvsmulo
; - xb (BitVec n): An xor term involving the second argument to bvsmulo
; - ppc (BitVec 1): An intermediate bitvector term accumulated to help construct the result.
; - res (BitVec 1): The current accumulated result.
; - i Int: The current bit we are processing.
; - nm2 Int: The bitwidth of a and b minus 2.
; return: >
;   A portion of the result of eliminating (bvsmulo a b).
(program $bv_smulo_elim_rec ((n Int) (xa (BitVec n)) (xb (BitVec n))
                             (ppc (BitVec 1)) (res (BitVec 1)) (i Int) (nm2 Int))
  ((BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) (BitVec 1)
  (
  (($bv_smulo_elim_rec xa xb ppc res nm2 nm2)   res)
  (($bv_smulo_elim_rec xa xb ppc res i nm2)
      (eo::define ((ia (eo::add nm2 (eo::neg i))))
      (eo::define ((ip1 (eo::add i 1)))
      (eo::define ((ppcn (bvor ppc (extract ia ia xa))))
        ($bv_smulo_elim_rec xa xb ppcn (bvor res (bvand (extract ip1 ip1 xb) ppcn)) ip1 nm2)))))
  )
)

; define: $bv_smulo_elim
; args:
; - a (BitVec n): The first argument to bvsmulo
; - b (BitVec n): The second argument to bvsmulo
; return: >
;   The result of eliminating (bvsmulo a b).
(define $bv_smulo_elim ((n Int :implicit) (a (BitVec n)) (b (BitVec n)))
  (eo::define ((w ($bv_bitwidth (eo::typeof a))))
  (eo::define ((wm1 (eo::add w -1)))
  (eo::define ((one (eo::to_bin 1 1)))
  (eo::ite (eo::eq w 1)
    (= (bvand a b) one)
    (eo::define ((mul (bvmul (sign_extend 1 a) (sign_extend 1 b))))
    (eo::ite (eo::eq w 2)
      (= (bvxor (extract w w mul) (extract wm1 wm1 mul)) one)
      (eo::define ((xa (bvxor a (sign_extend wm1 (extract wm1 wm1 a)))))
      (eo::define ((xb (bvxor b (sign_extend wm1 (extract wm1 wm1 b)))))
      (eo::define ((wm2 (eo::add w -2)))
      (eo::define ((ppc (extract wm2 wm2 xa)))
      (eo::define ((res ($bv_smulo_elim_rec xa xb ppc (bvand (extract 1 1 xb) ppc) 1 wm2)))
        (= (bvor res (bvxor (extract w w mul) (extract wm1 wm1 mul))) one))))))))))))
)

; rule: bv-smulo-elim
; implements: ProofRewriteRule::BV_SMULO_ELIM
; args:
; - eq Bool: The equality to prove with this rule.
; requires: c is the result of eliminating the left hand side.
; conclusion: the given equality.
(declare-rule bv-smulo-elim ((n Int) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :args ((= (bvsmulo a b) c))
  :requires ((($bv_smulo_elim a b) c))
  :conclusion (= (bvsmulo a b) c)
)

;;;;; ProofRewriteRule::BV_UMULO_ELIM

; define: $bv_umulo_elim_rec
; args:
; - xa (BitVec n): An xor term involving the first argument to bvumulo
; - xb (BitVec n): An xor term involving the second argument to bvumulo
; - ppc (BitVec 1): An intermediate bitvector term accumulated to help construct the result.
; - res (BitVec 1): The current accumulated result.
; - i Int: The current bit we are processing.
; - nm2 Int: The bitwidth of a and b minus 2.
; return: >
;   A portion of the result of eliminating (bvsmulo a b).
(program $bv_umulo_elim_rec ((n Int) (a (BitVec n)) (b (BitVec n))
                             (uppc (BitVec 1)) (res (BitVec 1)) (i Int))
  ((BitVec n) (BitVec n) (BitVec 1) (BitVec 1) Int Int) (BitVec 1)
  (
  (($bv_umulo_elim_rec a b uppc res n n)   res)
  (($bv_umulo_elim_rec a b uppc res i n)
      (eo::define ((ia (eo::add n -1 (eo::neg i))))
      (eo::define ((ip1 (eo::add i 1)))
      (eo::define ((uppcn (bvor (extract ia ia a) uppc)))
        (eo::cons bvor (bvand (extract i i b) uppc) ($bv_umulo_elim_rec a b uppcn res ip1 n))))))
  )
)

; define: $bv_umulo_elim
; args:
; - a (BitVec n): The first argument to bvumulo
; - b (BitVec n): The second argument to bvumulo
; return: >
;   The result of eliminating (bvumulo a b).
(define $bv_umulo_elim ((n Int :implicit) (a (BitVec n)) (b (BitVec n)))
  (eo::define ((w ($bv_bitwidth (eo::typeof a))))
  (eo::ite (eo::eq w 1)
    false
    (eo::define ((wm1 (eo::add w -1)))
    (eo::define ((zero (eo::to_bin 1 0)))
    (eo::define ((uppc (extract wm1 wm1 a)))
    (eo::define ((mul (bvmul (concat zero a) (concat zero b))))
    (eo::define ((res ($bv_umulo_elim_rec a b uppc (bvor (extract w w mul)) 1 w)))
      (= res (eo::to_bin 1 1))))))))))

; rule: bv-umulo-elim
; implements: ProofRewriteRule::BV_UMULO_ELIM
; args:
; - eq Bool: The equality to prove with this rule.
; requires: c is the result of eliminating the left hand side.
; conclusion: the given equality.
(declare-rule bv-umulo-elim ((n Int) (a (BitVec n)) (b (BitVec n)) (c Bool))
  :args ((= (bvumulo a b) c))
  :requires ((($bv_umulo_elim a b) c))
  :conclusion (= (bvumulo a b) c)
)

;;;;; ProofRewriteRule::BV_BITWISE_SLICING

; program: $bv_mk_bitwise_slicing_rec
; args:
; - f (-> (BitVec n) (BitVec n) (BitVec n)): The function we are applying bitwise slicing to.
; - c (BitVec n): The bitvector constant we are basing the slicing on.
; - a (BitVec n): The non-constant porition that is being sliced.
; - b (BitVec m): The bitlist representation of c that we have yet to process.
; - bit Bool: The value of the last bit we saw.
; - start Int: The start index from which all bits from c we processed each had the same value as bit.
; - end Int: The end index, which is the current bit of c we are processing.
; return: >
;   The result of the bitwise slicing. For example this program will return
;   (concat (bvand ((_ extract 3 2) #b0011) ((_ extract 3 2) x))
;           (bvand ((_ extract 1 0) #b0011) ((_ extract 1 0) x)))
;   given input where f is bvand, c is #b0011, and a is x.
(program $bv_mk_bitwise_slicing_rec
  ((n Int) (m Int)
   (f (-> (BitVec n) (BitVec n) (BitVec n))) (a (BitVec n)) (c (BitVec n))
   (b Bool) (bn Bool) (bs (BitVec m) :list) (start Int) (end Int))
  ((-> (BitVec n) (BitVec n) (BitVec n)) (BitVec n) (BitVec n) (BitVec m) Bool Int Int) (BitVec n)
  (
  (($bv_mk_bitwise_slicing_rec f c a bs bn start -1)
      (eo::cons concat ($nary_app f (extract start 0 c) (extract start 0 a)) @bv_empty))
  (($bv_mk_bitwise_slicing_rec f c a (@from_bools b bs) bn start end)
        (eo::define ((em1 (eo::add end -1)) (ep1 (eo::add end 1)))
        (eo::ite (eo::eq b bn)
          ($bv_mk_bitwise_slicing_rec f c a bs b start em1)
          (eo::cons concat
            ($nary_app f (extract start ep1 c) (extract start ep1 a))
            ($bv_mk_bitwise_slicing_rec f c a bs b end em1)))))
  )
)

; define: $bv_is_bitwise_slicing_op
; args:
; - f : (-> (BitVec n) (BitVec n) (BitVec n)). The function to inspect.
; return: >
;   true if we can apply bitwise slicing to f. This is the case if f
;   is either bvand, bvor, or bvxor.
(define $bv_is_bitwise_slicing_op ((n Int :implicit) (f (-> (BitVec n) (BitVec n) (BitVec n))))
  (eo::or (eo::eq f bvand) (eo::eq f bvor) (eo::eq f bvxor)))

; program: $bv_mk_bitwise_slicing
; args:
; - a (BitVec n): The term to apply bitwise slicing to.
; return: >
;   The result of applying bitwise slicing to a. For example, given
;   (bvand x #b0011) as a, this program will return
;   (concat (bvand ((_ extract 3 2) #b0011) ((_ extract 3 2) x))
;           (bvand ((_ extract 1 0) #b0011) ((_ extract 1 0) x))).
(define $bv_mk_bitwise_slicing ((n Int :implicit) (a (BitVec n)))
  (eo::match ((m Int) (f (-> (BitVec m) (BitVec m) (BitVec m))) (a1 (BitVec m)) (a2 (BitVec m) :list))
    a
    (
    ((f a1 a2)    ($singleton_elim
                  (eo::define ((c ($bv_get_first_const_child a)))
                  (eo::requires ($bv_is_bitwise_slicing_op f) true
                  (eo::requires (eo::eq c @bv_empty) false
                  (eo::define ((wm1 (eo::add (eo::len c) -1)))
                  ($bv_mk_bitwise_slicing_rec
                    f
                    c
                    (eo::define ((nil (eo::nil f a1 a2)))
                      ($singleton_elim ($nary_diff f nil a (eo::cons f c nil))))  ; remove the constant and recollect
                    ($nary_reverse ($bv_mk_bitblast_step_const c))                ; convert the constant to a bitlist
                    ($bv_bit_set c wm1) wm1 wm1)))))))
    )
  )
)

; rule: bv-bitwise-slicing
; implements: ProofRewriteRule::BV_BITWISE_SLICING
; args:
; - eq Bool: The equality to prove with this rule.
; requires: We require that applying $bv_mk_bitwise_slicing to a gives b.
; conclusion: the equality between a and b.
(declare-rule bv-bitwise-slicing
  ((n Int) (a (BitVec n)) (b (BitVec n)))
  :args ((= a b))
  :requires ((($bv_mk_bitwise_slicing a) b))
  :conclusion (= a b)
)

;;;;; ProofRule::BV_BITBLAST_STEP

; rule: bv_bitblast_step
; implements: ProofRule::BV_BITBLAST_STEP.
; args:
; - eq Bool: The equality to prove.
; requires: >
;   We require that $bv_mk_bitblast_step applied to the left hand side returns
;   the right hand side. Note that a and b are either Booleans or bitvectors.
; conclusion: The given equality.
; note: >
;   The current implementation only covers some of the operators that may
;   appear in ProofRule::BV_BITBLAST_STEP.
(declare-rule bv_bitblast_step ((U Type) (a U) (b U))
  :args ((= a b))
  :requires ((($bv_mk_bitblast_step a) b))
  :conclusion (= a b)
)

;;;;; ProofRule::BV_POLY_NORM

; rule: bv_poly_norm
; implements: ProofRule::BV_POLY_NORM
; args:
; - a (BitVec n): The left-hand side of the equality.
; - b (BitVec n): The right-hand side of the equality.
; requires: >
;   That the bitvector terms a and b are equal up to polynomial normalization.
; conclusion: The given equality.
(declare-rule bv_poly_norm ((n Int) (a (BitVec n)) (b (BitVec n)))
  :args ((= a b))
  :requires (((eo::define ((w ($arith_eval_int_pow_2 ($bv_bitwidth (eo::typeof a)))))
                (eo::eq ($get_bv_poly_norm w a) ($get_bv_poly_norm w b))) true))
  :conclusion (= a b)
)

;;;;; ProofRule::BV_POLY_NORM_EQ

; rule: bv_poly_norm_eq
; implements: ProofRule::BV_POLY_NORM_EQ
; premises:
; - eq Bool: >
;   An equality stating that terms t and s of the form (bvmul cx (bvsub x1 x2))
;   and (bvmul cy (bvsub y1 y2)) are equal.
; args:
; - eqr Bool: The equivalence between equalities, proven by this rule.
; requires: >
;   The constants cx and cy are odd.
; conclusion: >
;   An equivalence between equalities specified by eqr and justified by eq.
(declare-rule bv_poly_norm_eq ((n Int) (cx (BitVec n)) (xb1 (BitVec n)) (xb2 (BitVec n))
                               (cy (BitVec n)) (yb1 (BitVec n)) (yb2 (BitVec n)) (one (BitVec n) :list))
  :premises ((= (bvmul cx (bvsub xb1 xb2) one) (bvmul cy (bvsub yb1 yb2) one)))
  :args ((= (= xb1 xb2) (= yb1 yb2)))
  :requires (((eo::to_z one) 1) ((eo::zmod (eo::to_z cx) 2) 1) ((eo::zmod (eo::to_z cy) 2) 1))
  :conclusion (= (= xb1 xb2) (= yb1 yb2))
)
