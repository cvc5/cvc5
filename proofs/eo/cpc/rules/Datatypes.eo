(include "../theories/Datatypes.eo")
(include "../programs/Datatypes.eo")

;;;;; ProofRule::DT_SPLIT

; program: $mk_dt_split
; args:
; - L eo::List: The list of a constructors yet to process.
; - x D: The datatype term we are splitting on.
; return: A disjunction of testers for the constructors in L, applied to x.
(program $mk_dt_split ((D Type) (x D) (T Type) (c T) (xs eo::List :list))
  (eo::List D) Bool
  (
    (($mk_dt_split eo::List::nil x)          false)
    (($mk_dt_split (eo::List::cons c xs) x)  (eo::cons or (is c x) ($mk_dt_split xs x)))
  )
)

; rule: dt_split
; implements: ProofRule::DT_SPLIT
; args:
; - x D: The datatype term to split on.
; conclusion: >
;   A disjunction of testers, indicating the possible top symbols of x. This is
;   computed by getting the constructors for the type of x and calling the above
;   $mk_dt_split method.
(declare-rule dt_split ((D Type) (x D))
  :args (x)
  :conclusion ($singleton_elim ($mk_dt_split ($dt_get_constructors (eo::typeof x)) x))
)

;;;;; ProofRewriteRule::DT_INST

; program: $mk_dt_inst_rec
; args:
; - L eo::List: The list of a selectors yet to process.
; - x D: The datatype term we applying dt-inst to.
; - t T: The accumulated return value, which is a constructor applied to a list of testers applied to x.
; return: The result of dt-inst for x, given t and the remaining selectors in x.
(program $mk_dt_inst_rec ((D Type) (x D) (T Type) (t T) (S Type) (s S) (xs eo::List :list))
  (eo::List D T) Bool
  (
    (($mk_dt_inst_rec eo::List::nil x t)          t)
    (($mk_dt_inst_rec (eo::List::cons s xs) x t)  ($mk_dt_inst_rec xs x (t (s x))))
  )
)

; program: $mk_dt_inst_tuple_rec
; args:
; - T Type: The type of x we have yet to process.
; - x D: The tuple term we applying dt-inst to.
; - n Int: The number of component types of the type of x we have processed.
; return: The result of dt-inst for x, given t and the remaining selectors in x.
; note: >
;   This method is different from $mk_dt_inst_rec since the constructor tuple
;   is n-ary. For example, for (Tuple Int Int), this method will return
;   (tuple (tuple.select 0 x) (tuple (tuple.select 1 x) tuple.unit)), whereas
;   for an ordinary constructor C : (-> Int Int D) with selectors s1, s2,
;   $mk_dt_inst_rec above returns (C (s1 x) (s2 x)).
(program $mk_dt_inst_tuple_rec ((D Type) (x D) (T Type) (t T) (T1 Type) (T2 Type :list) (n Int))
  (Type D Int) Bool
  (
    (($mk_dt_inst_tuple_rec UnitTuple x n)     tuple.unit)
    (($mk_dt_inst_tuple_rec (Tuple T1 T2) x n) (eo::cons tuple (tuple.select n x) ($mk_dt_inst_tuple_rec T2 x (eo::add n 1))))
  )
)

; program: $mk_dt_inst
; args:
; - D Type: The datatype we are considering.
; - c C: The (unannotated) constructor of datatype D.
; - x D: The datatype term of type D we are applying dt-inst to.
; return: An equality that is equivalent to (is c x).
(program $mk_dt_inst ((C Type) (D Type) (x D) (c C) (T1 Type) (T2 Type :list) (DC (-> Type Type)))
  (Type C D) Bool
  (
    (($mk_dt_inst (Tuple T1 T2) tuple x)  ($mk_dt_inst_tuple_rec (Tuple T1 T2) x 0))
    (($mk_dt_inst UnitTuple tuple.unit x) tuple.unit)
    ; user-defined datatypes, note that if c needs an annotation, we get it via $dt_inst_cons_of
    (($mk_dt_inst D c x)                  ($mk_dt_inst_rec ($dt_get_selectors D c) x ($dt_inst_cons_of D c)))
  )
)

; rule: dt-inst
; implements: ProofRewriteRule::DT_INST
; args:
; - eq Bool: The equality to prove.
; requires: >
;   We require that $mk_dt_inst applied to the left hand side returns
;   the right hand side.
; conclusion: The given equality.
(declare-rule dt-inst ((D Type) (T Type) (c T) (x D) (t T))
  :args ((= (is c x) (= x t)))
  :requires ((($mk_dt_inst (eo::typeof x) c x) t))
  :conclusion (= (is c x) (= x t))
)

;;;;; ProofRewriteRule::DT_COLLAPSE_SELECTOR

; rule: dt-collapse-selector
; implements: ProofRewriteRule::DT_COLLAPSE_SELECTOR
; args:
; - eq Bool: The equality to prove.
; requires: >
;   We require that the index^th argument of the term t we are selecting from
;   is the right hand side of the equality, where index is the index of the
;   selector in the constructor of t.
; conclusion: The given equality.
(declare-rule dt-collapse-selector ((D Type) (T Type) (s (-> D T)) (t D) (ti T))
  :args ((= (s t) ti))
  :requires (((eo::define ((c ($get_fun t)))
              (eo::define ((ss ($dt_get_selectors (eo::typeof t) c)))
              ; note that s must be a selector of the constructor of t, or else index will not evaluate
              (eo::define ((index (eo::list_find eo::List::cons ss s)))
                ($dt_arg_nth t index)))) ti))
  :conclusion (= (s t) ti)
)

;;;;; ProofRewriteRule::DT_COLLAPSE_TESTER

; rule: dt-collapse-tester
; implements: ProofRewriteRule::DT_COLLAPSE_TESTER
; args:
; - eq Bool: The equality to prove.
; requires: >
;   If the right hand side is true, then the function head of the term we are
;   testing must be the constructor. If the right hand side is false, then the
;   function head of the term we are testing must be the constructor that is
;   not the constructor we are testing.
; conclusion: The given equality.
(declare-rule dt-collapse-tester ((D Type) (T Type) (c T) (t D) (b Bool))
  :args ((= (is c t) b))
  :requires (((eo::define ((f ($get_fun t)))
              (eo::ite b
                (eo::is_eq f c)
                (eo::and ($dt_is_cons f) (eo::not (eo::is_eq f c))))) true))
  :conclusion (= (is c t) b)
)

;;;;; ProofRewriteRule::DT_COLLAPSE_TESTER_SINGLETON

; rule: dt-collapse-tester-singleton
; implements: ProofRewriteRule::DT_COLLAPSE_TESTER_SINGLETON.
; args:
; - eq Bool: The equality to prove.
; requires: >
;   The number of constructors of the type of the term we are testing is one.
; conclusion: The given equality.
(declare-rule dt-collapse-tester-singleton ((D Type) (T Type) (c T) (t D))
  :args ((= (is c t) true))
  :requires (((eo::list_len eo::List::cons ($dt_get_constructors (eo::typeof t))) 1))
  :conclusion (= (is c t) true)
)

;;;;; ProofRewriteRule::DT_CONS_EQ

; define: $mk_dt_cons_eq
; args:
; - ts @List: The list of arguments to the left hand side of the equality.
; - ss @List: The list of arguments to the right hand side of the equality.
; return: >
;   The conjunction of equalities between the arguments of ts and ss.
(program $mk_dt_cons_eq ((T Type) (t T) (s T) (ts @List :list) (ss @List :list))
  (@List @List) Bool
  (
  (($mk_dt_cons_eq (@list t ts) (@list s ss)) (eo::cons and (= t s) ($mk_dt_cons_eq ts ss)))
  (($mk_dt_cons_eq @list.nil @list.nil)       true)
  )
)

; rule: dt-cons-eq
; implements: ProofRewriteRule::DT_CONS_EQ
; args:
; - eq Bool: The equality to prove.
; requires: >
;   The right hand side of the equality is the conjunction of equalities
;   the arguments of the terms in the equality on the left hand side, which
;   are applications of constructors.
; conclusion: The given equality.
(declare-rule dt-cons-eq ((D Type) (t D) (s D) (B Bool))
  :args ((= (= t s) B))
  :requires (((eo::define ((c ($get_fun t))) 
              (eo::and ($dt_is_cons c) (eo::is_eq c ($get_fun s)))) true)
             (($singleton_elim ($mk_dt_cons_eq ($dt_arg_list t) ($dt_arg_list s))) B))
  :conclusion (= (= t s) B)
)

;;;;; ProofRewriteRule::DT_CONS_EQ_CLASH

; note: This is a forward declaration of $dt_cons_eq_find_clash_list below.
(program $dt_cons_eq_find_clash_list () (@List @List) Bool)

; define: $dt_cons_eq_find_clash
; args:
; - t T: The left hand side of the equality.
; - s T: The right hand side of the equality.
; return: >
;   True if we can derive a conflict based on finding subterms (beneath
;   constructor applications) that have distinct constructor symbols.
(define $dt_cons_eq_find_clash ((T Type :implicit) (t T) (s T))
  (eo::define ((ct ($get_fun t)))
  (eo::define ((cs ($get_fun s)))
  (eo::ite ($dt_is_cons ct)
    (eo::ite (eo::is_eq ct cs)
      ; recurse on each argument
      ($dt_cons_eq_find_clash_list ($dt_arg_list t) ($dt_arg_list s))
      ; otherwise conflicting only if cs is also a constructor
      ($dt_is_cons cs))
    false)))
)

; program: $dt_cons_eq_find_clash_list
; args:
; - ts @List: The list of arguments to the left hand side of the equality left to process.
; - ss @List: The list of arguments to the right hand side of the equality left to process.
; return: >
;   True if we can derive a conflict based on finding subterms (beneath
;   constructor applications) that have distinct constructor symbols.
(program $dt_cons_eq_find_clash_list ((U Type) (t U) (s U) (ts @List :list) (ss @List :list))
  (@List @List) Bool
  (
  (($dt_cons_eq_find_clash_list (@list t ts) (@list s ss))  (eo::ite ($dt_cons_eq_find_clash t s)
                                                              true
                                                              ($dt_cons_eq_find_clash_list ts ss)))
  (($dt_cons_eq_find_clash_list @list.nil @list.nil)        false)
  )
)

; rule: dt-cons-eq
; implements: ProofRewriteRule::DT_CONS_EQ_CLASH
; args:
; - eq Bool: The equality to prove.
; requires: >
;   The equality on the left hand side is conflicting based on finding
;   subterms (beneath constructor applications) that have distinct constructor
;   symbols on either side.
; conclusion: The given equality.
(declare-rule dt-cons-eq-clash ((D Type) (t D) (s D))
  :args ((= (= t s) false))
  :requires ((($dt_cons_eq_find_clash t s) true))
  :conclusion (= (= t s) false)
)

;;;;; ProofRewriteRule::DT_CYCLE

; note: This is a forward declaration of $dt_cons_eq_find_clash_list below.
; note: >
;   Since forward declarations must have a ground type signature, we wrap
;   the term to find (the s argument of dt-cycle) in a list.
(program $dt_find_cycle_list () (@List @List) Bool)

; define: $dt_find_cycle
; args:
; - t T: The term.
; - s @List: A list containing the term to find.
; return: >
;   True iff t contains s as a strict subterm beneath constructor applications.
(define $dt_find_cycle ((T Type :implicit) (t T) (s @List))
  (eo::define ((ct ($get_fun t)))
  (eo::ite ($dt_is_cons ct)
    ; recurse on each argument
    ($dt_find_cycle_list ($dt_arg_list t) s)
    false))
)

; program: $dt_find_cycle_list
; args:
; - ts @List: The list of terms to process.
; - s @List: A list containing the term to find.
; return: >
;   True iff a term in ts is s, or contains s as a strict subterm beneath
;   constructor applications.
(program $dt_find_cycle_list ((U Type) (t U) (s U) (ts @List :list) (ss @List))
  (@List @List) Bool
  (
  (($dt_find_cycle_list (@list s ts) (@list s)) true)
  (($dt_find_cycle_list (@list t ts) ss)        (eo::ite ($dt_find_cycle t ss)
                                                  true
                                                  ($dt_find_cycle_list ts ss)))
  (($dt_find_cycle_list @list.nil ss)           false)
  )
)

; rule: dt-cycle
; implements: ProofRewriteRule::DT_CYCLE
; args:
; - eq Bool: The equality to prove.
; requires: >
;   The equality on the left hand side is conflicting based on finding
;   subterms (beneath constructor applications) that have different constructor
;   symbols on either side.
; conclusion: The given equality.
(declare-rule dt-cycle ((D Type) (s D) (t D))
  :args ((= (= s t) false))
  :requires ((($dt_find_cycle t (@list s)) true)) 
  :conclusion (= (= s t) false)
)

;;;;; ProofRewriteRule::DT_COLLAPSE_UPDATER

; program: $mk_dt_collapse_updater_rhs
; args:
; - c U: The remaining term to process.
; - a T: The value to replace as an argument of t.
; - n Int: The argument position (from the end) which a should replace.
; return: >
;   The result of updating the n^th argument from the end in t.
(program $dt_collapse_updater_rhs ((U Type) (T Type) (f (-> T U)) (x T) (a T) (n Int))
  (U T Int) U
  (
    (($dt_collapse_updater_rhs (f x) a 0)  (f a))
    (($dt_collapse_updater_rhs (f x) a n)  (_ ($dt_collapse_updater_rhs f a (eo::add n -1)) x))
  )
)

; program: $tuple_collapse_updater_rhs
; args:
; - c U: The remaining tuple term to process.
; - a T: The value to replace as an argument of t.
; - n Int: The argument position which a should replace.
; return: >
;   The result of updating the n^th argument in t.
(program $tuple_collapse_updater_rhs ((U Type) (T Type) (W Type) (f (-> T U)) (x T) (a T) (b T) (n Int) (ts W :list))
  (U T Int) U
  (
  (($tuple_collapse_updater_rhs (tuple b ts) a 0)   (tuple a ts))
  (($tuple_collapse_updater_rhs (tuple b ts) a n)   (eo::cons tuple b ($tuple_collapse_updater_rhs ts a (eo::add n -1))))
  (($tuple_collapse_updater_rhs tuple.unit a n)     tuple.unit)
  )
)

; program: $mk_dt_collapse_updater_rhs
; args:
; - c U: The update term to process, expected to be an updater applied to a constructor application.
; return: >
;   The result of collasping the update term.
(program $mk_dt_collapse_updater_rhs ((D Type) (T Type) (W Type) (s (-> D T)) (t D) (a T) (tr D) (n Int))
  (D) Bool
  (
  (($mk_dt_collapse_updater_rhs (update s t a))       (eo::define ((c ($get_fun t)))
                                                      (eo::define ((ss ($dt_get_selectors (eo::typeof t) c)))
                                                      (eo::define ((index (eo::list_find eo::List::cons ss s)))
                                                        (eo::ite (eo::is_neg index)
                                                          t ; unchanged if not correct constructor
                                                          ($dt_collapse_updater_rhs t a (eo::add (eo::len ss) index -1)))))))
  (($mk_dt_collapse_updater_rhs (tuple.update n t a)) ($tuple_collapse_updater_rhs t a n))
  )
)

; rule: dt-collapse-updater
; implements: ProofRewriteRule::DT_COLLAPSE_UPDATER
; args:
; - eq Bool: The equality to prove.
; requires: >
;   We require that the index^th argument of the term t we are selecting from
;   is the right hand side of the equality, where index is the index of the
;   selector in the constructor of t.
; conclusion: The given equality.
(declare-rule dt-collapse-updater ((D Type) (t D) (s D))
  :args ((= t s))
  :requires ((($mk_dt_collapse_updater_rhs t) s))
  :conclusion (= t s)
)

;;;;; ProofRewriteRule::DT_UPDATER_ELIM

; program: $dt_updater_elim_rhs
; args:
; - s (-> D T): the selector specifying the argument.
; - D t: The datatype term we are updating.
; - a T: The value to replace at the s argument of t.
; - ss eo::List: The remaining selector arguments to process.
; - c U: The result of updating t we have accumulated so far.
; return: >
;   The result of updating the argument specified by s in t.
(program $dt_updater_elim_rhs ((D Type) (T Type) (U Type) (s (-> D T)) (s1 (-> D T)) (t D) (a T) (ss eo::List :list) (c U))
  ((-> D T) D T eo::List U) D
  (
    (($dt_updater_elim_rhs s t a (eo::List::cons s ss) c)   ($dt_updater_elim_rhs s t a ss (c a)))
    (($dt_updater_elim_rhs s t a (eo::List::cons s1 ss) c)  ($dt_updater_elim_rhs s t a ss (c (s1 t))))
    (($dt_updater_elim_rhs s t a eo::List::nil c)           c)
  )
)

; program: $tuple_updater_elim_rhs
; args:
; - n Int: the index specifying the argument.
; - D t: The tuple term we are updating.
; - a T: The value to replace at the n^th argument of t.
; - ss eo::List: The remaining selector arguments to process.
; return: >
;   The result of updating the argument specified by s in t.
(program $tuple_updater_elim_rhs ((D Type) (T Type) (U Type) (n Int) (s (-> D T)) (t D) (a T) (ss eo::List :list) (c U))
  (Int D T eo::List) D
  (
    (($tuple_updater_elim_rhs n t a (eo::List::cons (tuple.select n) ss))   (eo::cons tuple a ($tuple_updater_elim_rhs n t a ss)))
    (($tuple_updater_elim_rhs n t a (eo::List::cons s ss))                  (eo::cons tuple (s t) ($tuple_updater_elim_rhs n t a ss)))
    (($tuple_updater_elim_rhs n t a eo::List::nil)                          tuple.unit)
  )
)

; program: $mk_dt_updater_elim_rhs
; args:
; - s D: The update term.
; - ss eo::List: The list of selectors for the type of s.
; return: >
;   The right hand side is obtained by updating the proper argument of t.
(program $mk_dt_updater_elim_rhs ((D Type) (T Type) (U Type) (s (-> D T)) (t D) (a T) (tr D) (c U) (n Int) (ss eo::List))
  (D U eo::List) Bool
  (
    (($mk_dt_updater_elim_rhs (update s t a) c ss)            ($dt_updater_elim_rhs s t a ss ($dt_inst_cons_of (eo::typeof t) c))) ; ensure the constructor is annotated
    (($mk_dt_updater_elim_rhs (tuple.update n t a) tuple ss)  ($tuple_updater_elim_rhs n t a ss))
  )
)

; rule: dt-updater-elim
; implements: ProofRewriteRule::DT_UPDATER_ELIM
; args:
; - eq Bool: The equality to prove.
; requires: >
;   We require that the right hand side is an ITE where the then branch is
;   obtained by updating the proper argument of t, as implemented by $is_dt_updater_elim.
; conclusion: The given equality.
(declare-rule dt-updater-elim ((D Type) (S Type) (T Type) (C Type) (s S) (t D) (a T) (u (-> S D T D)) (tu D) (c C))
  :args ((= (u s t a) (ite (is c t) tu t)))
  :requires ((($mk_dt_updater_elim_rhs (u s t a) c ($dt_get_selectors (eo::typeof t) c)) tu))
  :conclusion (= (u s t a) (ite (is c t) tu t))
)
