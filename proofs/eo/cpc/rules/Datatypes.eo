(include "../theories/Datatypes.eo")


(program $dt_get_constructors ((D Type) (T Type) (c T) (T1 Type) (T2 Type :list) (DC (-> Type Type)))
  (Type) eo::List
  (
    (($dt_get_constructors (Tuple T1 T2)) (eo::cons eo::List::cons tuple eo::List::nil))
    (($dt_get_constructors UnitTuple)     (eo::cons eo::List::cons tuple.unit eo::List::nil))
    (($dt_get_constructors (DC T))        ($dt_get_constructors DC))   ; user-defined parameteric datatypes, traverse
    (($dt_get_constructors D)             (eo::dt_constructors D))     ; ordinary user-defined datatypes
  )
)

(program $tuple_get_selectors_rec ((D Type) (T Type) (t T) (T1 Type) (T2 Type :list) (n Int))
  (Type Int) Bool
  (
    (($tuple_get_selectors_rec UnitTuple n)     eo::List::nil)
    (($tuple_get_selectors_rec (Tuple T1 T2) n) (eo::cons eo::List::cons (tuple.select n) ($tuple_get_selectors_rec T2 (eo::add n 1))))
  )
)

(program $dt_get_selectors ((D Type) (T Type) (c Type) (T1 Type) (T2 Type :list) (DC (-> Type Type)))
  (Type T) eo::List
  (
    (($dt_get_selectors (Tuple T1 T2) c) ($tuple_get_selectors_rec (Tuple T1 T2) 0))
    (($dt_get_selectors UnitTuple c)     eo::List::nil)
    (($dt_get_selectors (DC T1) c)       ($dt_get_selectors DC c))  ; parameteric datatypes, traverse
    (($dt_get_selectors D c)             (eo::dt_selectors c)) ; user-defined datatypes
  )
)

(program $mk_dt_split ((D Type) (x D) (T Type) (c T) (xs eo::List :list))
  (eo::List D) Bool
  (
    (($mk_dt_split eo::List::nil x)          false)
    (($mk_dt_split (eo::List::cons c xs) x)  (eo::cons or (is c x) ($mk_dt_split xs x)))
  )
)

(declare-rule dt_split ((D Type) (x D))
  :args (x)
  :conclusion ($singleton_elim ($mk_dt_split ($dt_get_constructors (eo::typeof x)) x))
)

(program $mk_dt_inst_rec ((D Type) (x D) (T Type) (t T) (S Type) (s S) (xs eo::List :list))
  (eo::List D T) Bool
  (
    (($mk_dt_inst_rec eo::List::nil x t)          t)
    (($mk_dt_inst_rec (eo::List::cons s xs) x t)  ($mk_dt_inst_rec xs x (t (s x))))
  )
)

(program $mk_dt_inst_tuple_rec ((D Type) (x D) (T Type) (t T) (T1 Type) (T2 Type :list) (n Int))
  (Type D Int) Bool
  (
    (($mk_dt_inst_tuple_rec UnitTuple x n)     tuple.unit)
    (($mk_dt_inst_tuple_rec (Tuple T1 T2) x n) (eo::cons tuple (tuple.select n x) ($mk_dt_inst_tuple_rec T2 x (eo::add n 1))))
  )
)

(program $mk_dt_inst ((C Type) (D Type) (x D) (c C) (T1 Type) (T2 Type :list) (DC (-> Type Type)))
  (Type C D) Bool
  (
    (($mk_dt_inst (Tuple T1 T2) tuple x)  ($mk_dt_inst_tuple_rec (Tuple T1 T2) x 0))
    (($mk_dt_inst UnitTuple tuple.unit x) tuple.unit)
    (($mk_dt_inst D c x)                  ($mk_dt_inst_rec ($dt_get_selectors D c) x c)) ; user-defined datatypes
  )
)

(declare-rule dt-inst ((D Type) (T Type) (c T) (x D) (t T))
  :args ((= (is c x) (= x t)))
  :requires ((($mk_dt_inst (eo::typeof x) c x) t))
  :conclusion (= (is c x) (= x t))
)
