(include "../theories/Sets.eo")

(include "../programs/DistinctValues.eo")

;;;;; ProofRule::SETS_SINGLETON_INJ

; rule: sets_singleton_inj
; implements: ProofRule::SETS_SINGLETON_INJ
; premises:
; - deq: An equality between singleton sets.
; conclusion: The elements of the singleton sets are equal.
(declare-rule sets_singleton_inj ((T Type) (a T) (b T))
  :premises ((= (set.singleton a) (set.singleton b)))
  :conclusion (= a b)
)

;;;;; ProofRule::SETS_EXT

; rule: sets_ext
; implements: ProofRule::SETS_EXT
; premises:
; - deq: A disequality between sets.
; conclusion: >
;   The sets are disequal for a witness element, as given by the skolem
;   (@set_deq_diff a b).
(declare-rule sets_ext ((T Type) (a (Set T)) (b (Set T)))
  :premises ((not (= a b)))
  :conclusion (not (= (set.member (@sets_deq_diff a b) a) (set.member (@sets_deq_diff a b) b)))
)

;;;;; ProofRewriteRule::SETS_EVAL_OP

; program: $set_union_to_list
; args:
; - s (Set T): The set to process.
; return: >
;   A list of elements, whose union is equal to s.
(program $set_union_to_list ((T Type) (t (Set T)) (e T))
  ((Set T)) @List
  (
    (($set_union_to_list (set.union (set.singleton e) t)) (eo::cons @list e ($set_union_to_list t)))
    (($set_union_to_list (set.empty (Set T)))             @list.nil)
    (($set_union_to_list (set.singleton e))               (eo::cons @list e @list.nil))
  )
)

; program: $eval_sets_inter
; args:
; - @List (Set T): The list of elements in the first set left to process.
; - @List (Set T): The list of elements in the second set.
; return: >
;   The elements in the set resulting in the set intersection of the arguments.
(program $eval_sets_inter ((T Type) (a T) (as @List :list) (bs @List))
  (@List @List) @List
  (
    (($eval_sets_inter (@list a as) bs)  (eo::define ((r ($eval_sets_inter as bs)))
                                         (eo::ite (eo::is_neg (eo::list_find @list bs a))
                                           (eo::requires ($are_distinct_terms_list_rec a bs (eo::typeof a)) true r)
                                           (eo::cons @list a r))))
    (($eval_sets_inter @list.nil bs)     @list.nil)
  )
)

; program: $eval_sets_minus
; args:
; - @List (Set T): The list of elements in the first set left to process.
; - @List (Set T): The list of elements in the second set.
; return: >
;   The elements in the set resulting in the set difference of the arguments.
(program $eval_sets_minus ((T Type) (a T) (as @List :list) (bs @List))
  (@List @List) @List
  (
    (($eval_sets_minus (@list a as) bs)  (eo::define ((r ($eval_sets_minus as bs)))
                                         (eo::ite (eo::is_neg (eo::list_find @list bs a))
                                           (eo::requires ($are_distinct_terms_list_rec a bs (eo::typeof a)) true
                                             (eo::cons @list a r))
                                            r)))
    (($eval_sets_minus @list.nil bs)     @list.nil)
  )
)

; program: $eval_sets_op
; args:
; - s (Set T): The set to process, expected to be a set operator applied to values
; return: >
;   The result of evaluating the operator.
(program $eval_sets_op ((T Type) (s (Set T)) (t (Set T)) (r (Set T)))
  ((Set T)) @List
  (
    (($eval_sets_op (set.union s t)) (eo::list_concat @list ($set_union_to_list s) ($set_union_to_list t)))
    (($eval_sets_op (set.inter s t)) ($eval_sets_inter ($set_union_to_list s) ($set_union_to_list t)))
    (($eval_sets_op (set.minus s t)) ($eval_sets_minus ($set_union_to_list s) ($set_union_to_list t)))
  )
)

; rule: sets-eval-op
; implements: ProofRewriteRule::SETS_EVAL_OP
; args:
; - eq Bool: The equality to prove with this rule between sets a and b.
; requires: >
;   The elements in the result of evaluating a are equivalent to those in b.
; conclusion: The given equality.
(declare-rule sets-eval-op ((T Type) (a (Set T)) (b (Set T)))
  :args ((= a b))
  :requires ((($nary_is_eq_set @list @list.nil
                ($eval_sets_op a)
                ($set_union_to_list b)) true))
  :conclusion (= a b)
)

;;;;; ProofRewriteRule::SETS_INSERT_ELIM

; program: $set_eval_insert
; args:
; - es @List: The list of elements
; - t (Set T): The set to insert into.
; return: >
;   The union of elements in es with t.
(program $set_eval_insert ((T Type) (x T) (xs @List :list) (t (Set T)))
  (@List (Set T)) (Set T)
  (
    (($set_eval_insert (@list x xs) t) (set.union (set.singleton x) ($set_eval_insert xs t)))
    (($set_eval_insert @list.nil t)    t)
  )
)

; rule: sets-insert-elim
; implements: ProofRewriteRule::SETS_INSERT_ELIM
; args:
; - eq Bool: The equality to prove with this rule.
; requires: the union of the elements in the first argument with the last argument equal the right hand side.
; conclusion: the equality between a and b.
(declare-rule sets-insert-elim ((T Type) (s (Set T)) (es @List) (t (Set T)))
  :args ((= (set.insert es s) t))
  :requires ((($set_eval_insert es s) t))
  :conclusion (= (set.insert es s) t)
)
