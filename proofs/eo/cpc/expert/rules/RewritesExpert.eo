(include "../../theories/Reals.eo")

(include "../theories/SetsExt.eo")
(include "../theories/Transcendentals.eo")

(declare-rule arith-sine-zero ()
  :args ()
  :conclusion (= (sin 0/1) 0/1)
)
(declare-rule arith-sine-pi2 ()
  :args ()
  :conclusion (= (sin (* 1/2 real.pi)) 1/1)
)
(declare-rule arith-cosine-elim ((x1 Real))
  :args (x1)
  :conclusion (= (cos x1) (sin (- (* 1/2 real.pi) x1)))
)
(declare-rule arith-tangent-elim ((x1 Real))
  :args (x1)
  :conclusion (= (tan x1) (/ (sin x1) (cos x1)))
)
(declare-rule arith-secent-elim ((x1 Real))
  :args (x1)
  :conclusion (= (sec x1) (/ 1/1 (sin x1)))
)
(declare-rule arith-cosecent-elim ((x1 Real))
  :args (x1)
  :conclusion (= (csc x1) (/ 1/1 (cos x1)))
)
(declare-rule arith-cotangent-elim ((x1 Real))
  :args (x1)
  :conclusion (= (cot x1) (/ (cos x1) (sin x1)))
)
(declare-rule arith-pi-not-int ()
  :args ()
  :conclusion (= (is_int real.pi) false)
)
(declare-rule sets-card-singleton ((@T0 Type) (x1 @T0))
  :args (x1)
  :conclusion (= (set.card (set.singleton x1)) 1)
)
(declare-rule sets-card-union ((@T0 Type) (@T1 Type) (s1 (Set @T0)) (t1 (Set @T1)))
  :args (s1 t1)
  :conclusion (= (set.card (set.union s1 t1)) (- (+ (set.card s1) (set.card t1)) (set.card (set.inter s1 t1))))
)
(declare-rule sets-card-minus ((@T0 Type) (@T1 Type) (s1 (Set @T0)) (t1 (Set @T1)))
  :args (s1 t1)
  :conclusion (= (set.card (set.minus s1 t1)) (- (set.card s1) (set.card (set.inter s1 t1))))
)
(declare-rule sets-card-emp ((@T0 Type) (x1 (Set @T0)))
  :premises ((= x1 (set.empty (Set @T0))))
  :args (x1 (Set @T0))
  :conclusion (= (set.card x1) 0)
)
