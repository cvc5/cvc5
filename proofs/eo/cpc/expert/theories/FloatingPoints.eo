(include "../../theories/Builtin.eo")
(include "../../theories/Arith.eo")
(include "../../theories/BitVectors.eo")

; note: We do not currently check whether the indices of this sort are positive.
(declare-const FloatingPoint
  (-> Int Int Type)
)
(declare-type RoundingMode ())

; A floating point constant is a term having 3 bitvector children.
; note: This is used for both FLOATINGPOINT_FP and CONST_FLOATINGPOINT.
(declare-parameterized-const fp ((e Int :implicit) (s Int :implicit))
  (-> (BitVec 1) (BitVec e) (BitVec s) (FloatingPoint e (eo::add s 1))))

(declare-parameterized-const fp.add ((e Int :implicit) (s Int :implicit))
  (-> RoundingMode (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.sub ((e Int :implicit) (s Int :implicit))
  (-> RoundingMode (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.mul ((e Int :implicit) (s Int :implicit))
  (-> RoundingMode (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.div ((e Int :implicit) (s Int :implicit))
  (-> RoundingMode (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.fma ((e Int :implicit) (s Int :implicit))
  (-> RoundingMode (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.sqrt ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.rem ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.roundToIntegral ((e Int :implicit) (s Int :implicit))
  (-> RoundingMode (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.min ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.max ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.abs ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s)))
(declare-parameterized-const fp.neg ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s)))

(declare-parameterized-const fp.leq ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) Bool))
(declare-parameterized-const fp.lt ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) Bool))
(declare-parameterized-const fp.geq ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) Bool))
(declare-parameterized-const fp.gt ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) Bool))
(declare-parameterized-const fp.eq ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) (FloatingPoint e s) Bool))

(declare-parameterized-const fp.isNormal ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) Bool))
(declare-parameterized-const fp.isSubnormal ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) Bool))
(declare-parameterized-const fp.isZero ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) Bool))
(declare-parameterized-const fp.isInfinite ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) Bool))
(declare-parameterized-const fp.isNaN ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) Bool))
(declare-parameterized-const fp.isPositive ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) Bool))
(declare-parameterized-const fp.isNegative ((e Int :implicit) (s Int :implicit))
  (-> (FloatingPoint e s) Bool))

; rounding modes
(declare-const roundNearestTiesToEven RoundingMode)
(declare-const roundNearestTiesToAway RoundingMode)
(declare-const roundTowardPositive RoundingMode)
(declare-const roundTowardNegative RoundingMode)
(declare-const roundTowardZero RoundingMode)

(declare-parameterized-const fp.to_ubv ((e Int :implicit) (s Int :implicit) (m Int))
  (-> RoundingMode (FloatingPoint e s) (BitVec m)))

(declare-parameterized-const fp.to_ubv_total ((e Int :implicit) (s Int :implicit) (m Int))
  (-> RoundingMode (FloatingPoint e s) (BitVec m) (BitVec m)))

(declare-parameterized-const fp.to_sbv ((e Int :implicit) (s Int :implicit) (m Int))
  (-> RoundingMode (FloatingPoint e s) (BitVec m)))

(declare-parameterized-const fp.to_sbv_total ((e Int :implicit) (s Int :implicit) (m Int))
  (-> RoundingMode (FloatingPoint e s) (BitVec m) (BitVec m)))

(declare-parameterized-const fp.to_real ((e Int :implicit) (s Int :implicit))
  (-> RoundingMode (FloatingPoint e s) Real))

(declare-parameterized-const to_fp ((T Type :implicit) (e Int) (s Int))
  (-> RoundingMode T (FloatingPoint e s)))
      
(declare-parameterized-const to_fp_unsigned ((T Type :implicit) (e Int) (s Int))
  (-> RoundingMode T (FloatingPoint e s)))

; disclaimer: >
;   This function uses a different syntax (to_fp_bv instead of to_tp)
;   from the SMT-LIB standard since it does not take RoundingMode. This is don
;   to disambiguate the overloading of to_fp from the SMT-LIB standard.
(declare-parameterized-const to_fp_bv ((w Int :implicit) (e Int) (s Int))
  (-> (BitVec w) (FloatingPoint e s)))

; Internally generated terms.
(declare-parameterized-const @fp.EXPONENT ((T Type)) T)
(declare-parameterized-const @fp.SIGN ((T Type)) T)
(declare-parameterized-const @fp.SIGNIFICAND ((T Type)) T)
(declare-parameterized-const @fp.ZERO ((T Type)) T)
(declare-parameterized-const @fp.INF ((T Type)) T)
(declare-parameterized-const @fp.NAN ((T Type)) T)
(declare-const @fp.RMBITBLAST (-> RoundingMode (BitVec 5)))
