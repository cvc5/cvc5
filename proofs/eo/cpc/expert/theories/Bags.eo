(include "../../programs/Utils.eo")
(include "../../theories/Builtin.eo")
(include "../../theories/Arith.eo")
(include "../../theories/Datatypes.eo")

; disclaimer: >
;   This sort is not in the SMT-LIB standard. All further
;   function symbols over this sort are also not part of the SMT-LIB standard.
(declare-type Bag (Type))

; NOTE: permits non-set types
(declare-parameterized-const bag.empty ((T Type)) T)

(declare-parameterized-const bag.union_max ((T Type :implicit))
  (-> (Bag T) (Bag T) (Bag T)))
(declare-parameterized-const bag.union_disjoint ((T Type :implicit))
  (-> (Bag T) (Bag T) (Bag T)))
(declare-parameterized-const bag.inter_min ((T Type :implicit))
  (-> (Bag T) (Bag T) (Bag T)))
(declare-parameterized-const bag.difference_subtract ((T Type :implicit))
  (-> (Bag T) (Bag T) (Bag T)))
(declare-parameterized-const bag.difference_remove ((T Type :implicit))
  (-> (Bag T) (Bag T) (Bag T)))
(declare-parameterized-const bag.subbag ((T Type :implicit))
  (-> (Bag T) (Bag T) Bool))
(declare-parameterized-const bag.count ((T Type :implicit)) (-> T (Bag T) Int))
(declare-parameterized-const bag ((T Type :implicit)) (-> T Int (Bag T)))
(declare-parameterized-const bag.member ((T Type :implicit))
  (-> T (Bag T) Bool))
(declare-parameterized-const bag.card ((T Type :implicit)) (-> (Bag T) Int))
(declare-parameterized-const bag.choose ((T Type :implicit)) (-> (Bag T) T))
(declare-parameterized-const bag.setof ((T Type :implicit))
  (-> (Bag T) (Bag T)))
(declare-parameterized-const bag.is_singleton ((T Type :implicit))
  (-> (Bag T) Bool))

(declare-parameterized-const bag.filter ((T Type :implicit))
  (-> (-> T Bool) (Bag T) (Bag T)))
(declare-parameterized-const bag.all ((T Type :implicit))
  (-> (-> T Bool) (Bag T) Bool))
(declare-parameterized-const bag.some ((T Type :implicit))
  (-> (-> T Bool) (Bag T) Bool))
(declare-parameterized-const bag.map ((T Type :implicit) (U Type :implicit))
  (-> (-> T U) (Bag T) (Bag U)))
(declare-parameterized-const bag.fold ((T Type :implicit) (U Type :implicit))
  (-> (-> T U U) U (Bag T) U))
(declare-parameterized-const table.product ((T Type :implicit) (U Type :implicit))
  (-> (Bag T) (Bag U) (Bag (eo::list_concat Tuple U T))))
(declare-parameterized-const table.group ((T Type :implicit))
  (-> @List (Bag T) (Bag (Bag T))))

; Skolems for the theory of bags.
(declare-parameterized-const @bags_deq_diff ((T Type :implicit))
  (-> (! (Bag T) :opaque) (! (Bag T) :opaque) T))
(declare-parameterized-const @tables_group_part ((T Type :implicit))
  (-> (! (Bag (Bag T)) :opaque) T (Bag T)))
(declare-parameterized-const @tables_group_part_element ((T Type :implicit))
  (-> (! (Bag (Bag T)) :opaque) (! (Bag T) :opaque) T))
(declare-parameterized-const @bags_map_sum ((T Type :implicit) (U Type :implicit))
  (-> (! (-> T U) :opaque) (! (Bag T) :opaque) (! U :opaque) Int Int))
(declare-parameterized-const @bags_distinct_elements ((T Type :implicit))
  (-> (! (Bag T) :opaque) Int T))
(declare-parameterized-const @bags_distinct_elements_size ((T Type :implicit))
  (-> (! (Bag T) :opaque) Int))
(declare-parameterized-const @bags_map_preimage_injective ((T Type :implicit) (U Type :implicit))
  (-> (! (-> T U) :opaque) (! (Bag T) :opaque) (! U :opaque) T))

;(declare-const bag.from_set (# x term (apply f_bag.from_set x)))
;(declare-const bag.to_set (# x term (apply f_bag.to_set x)))

; The following skolems are not handled currently:
;BAGS_CARD_CARDINALITY
;BAGS_DISTINCT_ELEMENTS_UNION_DISJOINT
;BAGS_CHOOSE
;BAGS_FOLD_CARD
;BAGS_FOLD_COMBINE
;BAGS_FOLD_ELEMENTS
;BAGS_FOLD_UNION_DISJOINT
;BAGS_DISTINCT_ELEMENTS
;BAGS_DISTINCT_ELEMENTS_SIZE
;BAGS_MAP_INDEX
;BAGS_MAP_SUM
