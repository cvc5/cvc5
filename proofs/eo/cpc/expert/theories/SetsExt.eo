(include "../../programs/Utils.eo")
(include "../../theories/Sets.eo")
(include "../../theories/Builtin.eo")
(include "../../theories/Arith.eo")
(include "../../theories/Datatypes.eo")

; Constants for the theory of sets.
; note: type rule does not check the type is set.
(declare-parameterized-const set.universe ((T Type :implicit)) (Set T))

; Operators for the theory of sets.
(declare-parameterized-const set.complement ((T Type :implicit))
  (-> (Set T) (Set T)))
(declare-parameterized-const set.card ((T Type :implicit)) (-> (Set T) Int))

; Higher-order sets operators.
(declare-parameterized-const set.filter ((T Type :implicit))
  (-> (-> T Bool) (Set T) (Set T)))
(declare-parameterized-const set.all ((T Type :implicit))
  (-> (-> T Bool) (Set T) Bool))
(declare-parameterized-const set.some ((T Type :implicit))
  (-> (-> T Bool) (Set T) Bool))
(declare-parameterized-const set.map ((T Type :implicit) (U Type :implicit))
  (-> (-> T U) (Set T) (Set U)))
(declare-parameterized-const set.fold ((T Type :implicit) (U Type :implicit))
  (-> (-> T U U) U (Set T) U))

; Experimental sets operators.
(declare-parameterized-const set.comprehension ((T Type :implicit))
  (-> @List Bool T (Set T)) :binder @list)

; Relation operators.
(declare-parameterized-const rel.tclosure ((T Type :implicit))
  (-> (Set (Tuple T T)) (Set (Tuple T T))))
(declare-parameterized-const rel.transpose ((T Type :implicit))
  (-> (Set T) (Set ($nary_reverse T))))
(declare-parameterized-const rel.product ((T Type :implicit) (U Type :implicit))
  (-> (Set T) (Set U) (Set (eo::list_concat Tuple T U))))
(declare-parameterized-const rel.join ((T Type :implicit) (U Type :implicit))
  (-> (Set T) (Set U) (Set ($nary_join Tuple UnitTuple T U))))
(declare-parameterized-const rel.group ((T Type :implicit))
  (-> @List (Set T) (Set (Set T))))

; Experimental relation operators.
(declare-parameterized-const rel.iden ((T Type :implicit))
  (-> (Set (Tuple T)) (Set (Tuple T T))))
(declare-parameterized-const rel.join_image ((T Type :implicit))
  (-> (Set (Tuple T T)) Int (Set (Tuple T))))

; Skolems for the extended theory of sets.
(declare-parameterized-const @relations_group_part ((T Type :implicit))
  (-> (! (Set (Set T)) :opaque) T (Set T)))
(declare-parameterized-const @relations_group_part_element ((T Type :implicit))
  (-> (! (Set (Set T)) :opaque) (! (Set T) :opaque) T))

; The following skolems are not yet incorporated into the signature:
;SETS_CHOOSE
;SETS_FOLD_CARD
;SETS_FOLD_COMBINE
;SETS_FOLD_ELEMENTS
;SETS_FOLD_UNION
;SETS_MAP_DOWN_ELEMENT
