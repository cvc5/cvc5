(include "../theories/Arith.eo")

; =============================================
;  Right-associative null-terminated operators
;
; The following functions work with right-associative symbols with a defined
; null terminator, i.e. attribute :right-assoc-nil.  Those behave somewhat
; similar to functional programming lists. Therefore, the symbol will typically
; be called `cons` in the following and its nil terminator will be `nil`.
; In the documentation below, we say that a term is an cons-list with children
; t1 ... tn if it is of the form (cons t1 ... tn) where n>0 or nil if n=0.
;
; =============================================

; program: $nary_is_compatible
; args:
; - cons (-> L L L): The n-ary function symbol.
; - nil L: The nil terminator of cons.
; - c1 L: The first term, assumed to be a cons-list.
; - c2 L: The second term, assumed to be a cons-list.
; return: true if c1 is a prefix of c2, or c2 is a prefix of c1.
(program $nary_is_compatible
    ((U Type) (L Type) (cons (-> L L L)) (nil U) (t U) (c1 U) (c2 U) (xs1 U :list) (xs2 U :list))
    :signature ((-> L L L) U U U) Bool
    (
        (($nary_is_compatible cons nil nil t)                       true)
        (($nary_is_compatible cons nil t nil)                       true)
        (($nary_is_compatible cons nil (cons c1 xs1) (cons c2 xs2)) (eo::ite (eo::eq c1 c2) ($nary_is_compatible cons nil xs1 xs2) false))
    )
)

;; =============== for assoc-nil

; program: $assoc_nil_nth_type
; args:
; - f (-> T U V): The function, expected to be an n-ary function.
; - t W: The term to inspect, expected to be an f-list.
; - n Int: The index of the child in t.
; return: The type of the n^th child of t.
(program $assoc_nil_nth_type
  ((T Type) (U Type) (V Type) (W Type) (W1 Type) (W2 Type)
   (f (-> T U V)) (n Int) (x1 W1) (x2 W2))
  ((-> T U V) W Int) Type
  (
  (($assoc_nil_nth_type f (f x1 x2) 0)   (eo::typeof x1))
  (($assoc_nil_nth_type f (f x1 x2) n)   ($assoc_nil_nth_type f x2 (eo::add n -1)))
  )
)
