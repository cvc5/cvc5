(include "../programs/Utils.eo")

; program: $singleton_elim_aci
; args:
; - f (-> S S S): The function we are considering.
; - id S: The nil terminator of f.
; - s S: The term to process.
; return: >
;   The result of applying singleton elimination for s, where s should
;   be an application of f. In particular, if s is of the form (f x1 x2) where
;   x2 is the nil terminator of f, then we return x1. Otherwise, we return s
;   unchanged.
; note: >
;   This method is similar in purpose to $singleton_elim, but insists that
;   the function and its nil terminator are provided explicitly.
(program $singleton_elim_aci ((T Type) (S Type) (U Type) (W Type) (f (-> T U S)) (id S) (x S) (x1 T) (x2 U :list))
  :signature ((-> S S S) U U) U
  (
    (($singleton_elim_aci f id (f x1 x2))  (eo::ite (eo::eq x2 id) x1 (f x1 x2)))
    (($singleton_elim_aci f id x)          x)
  )
)

; program: $get_a_norm_rec
; args:
; - f (-> S S S): The function we are considering, which is assumed to be associative and has the given identity.
; - id S: The nil terminator of f.
; - s S: The term to process.
; return: the result of normalizing s based on associative+identity reasoning.
(program $get_a_norm_rec ((T Type) (S Type) (U Type) (f (-> S S S)) (id S) (x S) (x1 S) (x2 S :list))
  :signature ((-> S S S) T T) T
  (
    (($get_a_norm_rec f id (f id x2))  ($get_a_norm_rec f id x2))
    (($get_a_norm_rec f id (f x1 x2))  (eo::list_concat f ($get_a_norm_rec f id x1) ($get_a_norm_rec f id x2)))
    (($get_a_norm_rec f id id)         id)
    (($get_a_norm_rec f id x)          (eo::cons f x id))
  )
)

; program: $get_ai_norm
; args:
; - t U: The term to process.
; return: the result of normalizing t based on associative+identity+idempotent reasoning.
(program $get_ai_norm ((T Type ) (S Type) (U Type) (V Type) (f (-> S U V)) (x S) (y U))
  :signature (U) U
  (
    (($get_ai_norm (f x y)) (eo::define ((id (eo::nil f (eo::typeof (f x y)))))
                              ($singleton_elim_aci f id (eo::list_setof f ($get_a_norm_rec f id (f x y))))))
  )
)

; program: $get_a_norm
; args:
; - t U: The term to process.
; return: the result of normalizing t based on associative+identity reasoning.
(program $get_a_norm ((T Type) (S Type) (U Type) (V Type) (f (-> S U V)) (x S) (y U))
  :signature (U) U
  (
    (($get_a_norm (f x y))  (eo::define ((id (eo::nil f (eo::typeof (f x y)))))
                              ($singleton_elim_aci f id ($get_a_norm_rec f id (f x y)))))
  )
)

; A placeholder that indicates that the given list can be sorted with respect
; to operator f. For example, (@aci_sorted f t) indicates that t is an application
; of a commutative operator f. We show the equivalence of two applications marked
; in this way using the operator for multiset equality below.
(declare-parameterized-const @aci_sorted ((U Type :implicit) (T Type :implicit)) (-> U T T))

; program: $aci_norm_eq
; args:
; - a U: The first term, expected to be normalized for ACI_NORM.
; - b U: The second term, expected to be normalized for ACI_NORM.
; return: true if a can be shown to be equivalent to b.
(program $aci_norm_eq ((S Type) (U Type) (V Type) (t S) (s S) (f (-> S U V)) (x S) (y U))
  :signature (U U) Bool
  (
  (($aci_norm_eq t t) true)
  (($aci_norm_eq (@aci_sorted f t) t) true)
  (($aci_norm_eq (@aci_sorted f t) (@aci_sorted f s)) (eo::list_meq f t s))
  (($aci_norm_eq t s) false)
  )
)

; define: $is_aci_norm
; args:
; - a S: The first term.
; - b S: The second term.
; - an S: The normalized form of the first term.
; - bn S: The normalized form of the second term.
; return: whether a can be shown equal to b by ACI_NORM
(define $is_aci_norm ((S Type :implicit) (a S) (b S) (an S) (bn S))
  (eo::ite ($aci_norm_eq an b) true   ; first check if we are singleton case
  (eo::ite ($aci_norm_eq bn a) true   ; vice versa
    ($aci_norm_eq an bn))))           ; otherwise check equivalence by above
