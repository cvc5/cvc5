(include "../programs/BitVectors.eo")

;;; utils

; program: $bv_bitblast_binary_app
; args:
; - f (-> T T Bool): The binary function to apply to b1 and b2.
; - b1 Bool: The first Boolean.
; - b2 Bool: The second Boolean.
; return: the result of applying f to b1 and b2.
(program $bv_bitblast_binary_app ((T Type) (f (-> T T Bool)) (a Bool) (b Bool))
  ((-> T T Bool) Bool Bool) Bool
  (
  (($bv_bitblast_binary_app and a b)  (and a b))
  (($bv_bitblast_binary_app or a b)   (or a b))
  (($bv_bitblast_binary_app xor a b)  (xor a b))
  (($bv_bitblast_binary_app = a b)    (= a b))
  )
)

; program: $bv_bitblast_repeat
; args:
; - b Bool: The Boolean to repeat
; - n Int: The number of times to repeat it.
; return: the list of bits containing b, n times.
(program $bv_bitblast_repeat ((b Bool) (n Int))
  (Bool Int) (BitVec n)
  (
    (($bv_bitblast_repeat b 0)  @bv_empty)
    (($bv_bitblast_repeat b n)  (eo::cons @from_bools b ($bv_bitblast_repeat b (eo::add n -1))))
  )
)

; define: $bv_bitblast_zero
; args:
; - n Int: The bitwidth.
; return: the list of bits corresponding to the zero of the given bitwidth.
(define $bv_bitblast_zero ((n Int)) ($bv_bitblast_repeat false n))

; define: $bv_bitblast_sign_bit
; args:
; - a (Bitvec n): The list of bits.
; return: the sign bit of a, which is the last bit.
(define $bv_bitblast_sign_bit ((n Int :implicit) (a (BitVec n)))
  (eo::list_nth @from_bools a (eo::add (eo::list_len @from_bools a) -1)))

; program: $bv_bitblast_apply_unary
; args:
; - f (-> Bool Bool): The unary function to apply to the bits of the second argument.
; - a (Bitvec n): The list of bits.
; return: the result of applying f to each bit in a.
(program $bv_bitblast_apply_unary ((f (-> Bool Bool)) (b1 Bool) (n Int) (m Int) (a1 (BitVec m) :list))
  ((-> Bool Bool) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_unary f @bv_empty)           @bv_empty)
  (($bv_bitblast_apply_unary f (@from_bools b1 a1)) (eo::cons @from_bools (f b1) ($bv_bitblast_apply_unary f a1)))
  )
)

; program: $bv_bitblast_apply_binary
; args:
; - f (-> T T Bool): The binary function to apply pairwise to the bits of a1 and a2.
; - a1 (Bitvec n): The first list of bits.
; - a2 (Bitvec n): The second list of bits.
; return: the result of applying f pairwise to the bits of a1 and a2.
(program $bv_bitblast_apply_binary ((T Type) (f (-> T T Bool)) (b1 Bool) (b2 Bool) (n Int) (m Int) (a1 (BitVec m) :list) (a2 (BitVec m) :list))
  ((-> T T Bool) (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_binary f @bv_empty @bv_empty)                     @bv_empty)
  (($bv_bitblast_apply_binary f (@from_bools b1 a1) (@from_bools b2 a2)) (eo::cons @from_bools ($bv_bitblast_binary_app f b1 b2) ($bv_bitblast_apply_binary f a1 a2)))
  )
)

; program: $bv_bitblast_apply_ite
; args:
; - b Bool: The condition of the ITE.
; - a1 (Bitvec n): The then branch, a list of bits.
; - a2 (Bitvec n): The else branch, a list of bits.
; return: the bitlist having bits that are ITEs whose condition is b and whose branches are a1 and a2.
(program $bv_bitblast_apply_ite ((bc Bool) (n Int) (m Int) (b1 Bool) (a1 (BitVec m) :list) (b2 Bool) (a2 (BitVec m) :list))
  (Bool (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_bitblast_apply_ite bc @bv_empty @bv_empty)                      @bv_empty)
  (($bv_bitblast_apply_ite bc (@from_bools b1 a1) (@from_bools b2 a2))  (eo::cons @from_bools (ite bc b1 b2) ($bv_bitblast_apply_ite bc a1 a2)))
  )
)

; define: $bv_bitblast_rshift
; args:
; - a (Bitvec n): The list of bits.
; - amount: The amount to shift, expected to in [0,n].
; return: the result of shifting a right by amount.
(define $bv_bitblast_rshift ((n Int :implicit) (a (BitVec n)) (amount Int))
  (eo::define ((len (eo::list_len @from_bools a)))
    (eo::list_concat @from_bools ($nary_subsequence @from_bools @bv_empty amount len a) ($bv_bitblast_repeat false amount))))

; define: $bv_bitblast_lshift
; args:
; - a (Bitvec n): The list of bits.
; - amount: The amount to shift, expected to in [0,n].
; return: the result of shifting a left by amount.
(define $bv_bitblast_lshift ((n Int :implicit) (a (BitVec n)) (amount Int))
  (eo::define ((len (eo::list_len @from_bools a)))
    (eo::list_concat @from_bools ($bv_bitblast_repeat false amount) ($nary_subsequence @from_bools @bv_empty 0 (eo::add len (eo::neg amount) -1) a))))

;;; equality

; program: $bv_mk_bitblast_step_eq_rec
; args:
; - x T: The left hand side of the equality we have left to process.
; - y T: The right hand side of the equality we have left to process.
; return: the bitblasted term for (= x y).
(program $bv_mk_bitblast_step_eq_rec ((n Int) (nm1 Int) (b1 Bool) (b2 Bool) (a1 (BitVec nm1) :list) (a2 (BitVec nm1) :list))
  ((BitVec n) (BitVec n)) Bool
  (
  (($bv_mk_bitblast_step_eq_rec @bv_empty @bv_empty)                      true)
  (($bv_mk_bitblast_step_eq_rec (@from_bools b1 a1) (@from_bools b2 a2))  (eo::cons and (= b1 b2) ($bv_mk_bitblast_step_eq_rec a1 a2)))
  )
)

; define: $bv_mk_bitblast_step_eq
; args:
; - x (BitVec n): The left hand side of the equality.
; - y (BitVec n): The right hand side of the equality.
; return: the bitblasted term for (= x y).
(define $bv_mk_bitblast_step_eq ((n Int :implicit) (a1 (BitVec n)) (a2 (BitVec n)))
  ($singleton_elim ($bv_mk_bitblast_step_eq_rec a1 a2)))

;;; inequality

; program: $bv_bitblast_ult_rec
; args:
; - x T: The left hand side of the bvult predicate we have left to process.
; - y T: The right hand side of the bvult predicate  we have left to process.
; - res Bool: The accumulated result.
; return: the bitblasted term for (bvult x y).
(program $bv_bitblast_ult_rec ((n Int) (b1 Bool) (b2 Bool) (a1 (BitVec n) :list) (a2 (BitVec n) :list) (res Bool))
  ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_ult_rec @bv_empty @bv_empty res)                      res)
  (($bv_bitblast_ult_rec (@from_bools b1 a1) (@from_bools b2 a2) res)  ($bv_bitblast_ult_rec a1 a2 (or (and (= b1 b2) res) (and (not b1) b2))))
  )
)

; program: $bv_bitblast_ult
; args:
; - x T: The left hand side of the unsigned inequality predicate.
; - y T: The right hand side of the unsigned inequality predicate.
; - orEqual Bool: If true, we are processing (bvule x y), otherwise we are processing (bvult x y).
; return: the bitblasted term for the unsigned inequality between x and y.
(program $bv_bitblast_ult ((n Int) (b1 Bool) (b2 Bool) (a1 (BitVec n) :list) (a2 (BitVec n) :list) (orEqual Bool))
  ((BitVec n) (BitVec n) Bool) Bool
  (
  (($bv_bitblast_ult (@from_bools b1 a1) (@from_bools b2 a2) orEqual)  (eo::define ((res (and (not b1) b2)))
                                                                       (eo::define ((res2 (eo::ite orEqual (or res (= b1 b2)) res)))
                                                                          ($bv_bitblast_ult_rec a1 a2 res))))
  )
)

; program: $bv_bitblast_slt_impl
; args:
; - x T: The left hand side of the signed inequality predicate, whose bits have been reversed.
; - y T: The right hand side of the signed inequality predicate, whose bits have been reversed.
; - orEqual Bool: If true, we are processing (bvsle x y), otherwise we are processing (bvslt x y).
; return: the bitblasted term for the signed inequality between x and y.
(program $bv_bitblast_slt_impl ((n Int) (b1 Bool) (b2 Bool) (a1 (BitVec n) :list) (a2 (BitVec n) :list) (orEqual Bool))
  ((BitVec n) (BitVec n) Bool) Bool
  (
  ; bitwidth one case is handled separately
  (($bv_bitblast_slt_impl (@from_bools b1) (@from_bools b2) orEqual)        (eo::ite orEqual (or (= b1 b2) (and b1 (not b2))) (and b1 (not b2))))
  (($bv_bitblast_slt_impl (@from_bools b1 a1) (@from_bools b2 a2) orEqual)  (eo::define ((ures ($bv_bitblast_ult ($nary_reverse a1) ($nary_reverse a2) orEqual)))
                                                                              (or (and (= b1 b2) ures) (and b1 (not b2)))))
  )
)

; program: $bv_bitblast_slt
; args:
; - x T: The left hand side of the signed inequality predicate.
; - y T: The right hand side of the signed inequality predicate.
; - orEqual Bool: If true, we are processing (bvsle x y), otherwise we are processing (bvslt x y).
; return: the bitblasted term for the signed inequality between x and y.
(define $bv_bitblast_slt ((n Int :implicit) (x (BitVec n)) (y (BitVec n)) (orEqual Bool))
  ; reverse to make sign bit extractable
  ($bv_bitblast_slt_impl ($nary_reverse x) ($nary_reverse y) orEqual))

;;; extract

; define: $bv_mk_bitblast_step_extract
; args:
; - u Int: The upper index of the extract.
; - l Int: The lower index of the extract.
; - a (BitVec n): The argument of the extract, expected to be a list of bits.
; return: the bitblasted term for (extract u l a).
(define $bv_mk_bitblast_step_extract ((n Int :implicit) (u Int) (l Int) (a (BitVec n)))
  ($nary_subsequence @from_bools @bv_empty l u a))

;;; concat

; program: $bv_mk_bitblast_step_concat_rec
; args:
; - a (BitVec n): The (reverse) of the bitvector concatenation term to process.
; return: >
;   The bitblasted term for concatenation term a, reversed. We require reversing
;   the concatenation term to this method to match the bitblasted form that is
;   generated.
(program $bv_mk_bitblast_step_concat_rec ((n Int) (a1 (BitVec n)) (m Int) (a2 (BitVec m) :list))
  ((BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_concat_rec @bv_empty)      @bv_empty)
  (($bv_mk_bitblast_step_concat_rec (concat a1 a2)) (eo::list_concat @from_bools a1 ($bv_mk_bitblast_step_concat_rec a2)))
  )
)

; define: $bv_mk_bitblast_step_concat
; args:
; - a (BitVec n): The bitvector concatenation term to process.
; return: the bitblasted term for concatenation term a.
(define $bv_mk_bitblast_step_concat ((n Int :implicit) (a (BitVec n)))
  ($bv_mk_bitblast_step_concat_rec ($nary_reverse a)))

;;; bitwise

; program: $bv_mk_bitblast_step_bitwise
; args:
; - bf (-> (BitVec n) (BitVec n) (BitVec n)): The bitvector function.
; - f (-> T T Bool): The binary function to apply.
; - a (BitVec n): The term we are bitblasting, expected to be an application of bf to list of bits.
; - ac (BitVec n): The accumulated return value.
; return: the bitblasted version of a.
(program $bv_mk_bitblast_step_bitwise ((T Type) (n Int) (bf (-> (BitVec n) (BitVec n) (BitVec n))) 
                                       (f (-> T T Bool)) (a1 (BitVec n)) (a2 (BitVec n) :list) (ac (BitVec n)))
  ((-> (BitVec n) (BitVec n) (BitVec n)) (-> T T Bool) (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_bitwise bf f (bf a1 a2) ac)    ($bv_mk_bitblast_step_bitwise bf f a2 ($bv_bitblast_apply_binary f ac a1)))
  (($bv_mk_bitblast_step_bitwise bf f a2 ac)            ac)
  )
)

;;; addition

; program: $bv_ripple_carry_adder_2
; args:
; - a1 (BitVec n): The first term to add, a list of bits.
; - a2 (BitVec n): The second term to add, a list of bits.
; - carry Bool: The current carry bit.
; - ac (BitVec m): The accumulated return value.
; return: a pair corresponding to the final carry bit and accumulated result.
(program $bv_ripple_carry_adder_2 ((n Int) (m Int) (b1 Bool) (b2 Bool) (a1 (BitVec n) :list) (a2 (BitVec n) :list) (carry Bool) (res (BitVec m)))
  ((BitVec n) (BitVec n) Bool (BitVec m)) (@Pair Bool (BitVec n))
  (
  (($bv_ripple_carry_adder_2 (@from_bools b1 a1) (@from_bools b2 a2) carry res) ($bv_ripple_carry_adder_2 a1 a2 
                                                                                  (or (and b1 b2) (and (xor b1 b2) carry))
                                                                                  (eo::cons @from_bools (xor (xor b1 b2) carry) res)))
  (($bv_ripple_carry_adder_2 @bv_empty @bv_empty carry res)                     (@pair carry ($nary_reverse res)))
  )
)

; program: $bv_ripple_carry_adder
; args:
; - a1 (BitVec n): The first term to add, a list of bits.
; - a2 (BitVec n): The second term to add, a list of bits.
; - carry Bool: The current carry bit.
; return: the result of adding a1 and a2.
(define $bv_ripple_carry_adder ((n Int :implicit) (a1 (BitVec n)) (a2 (BitVec n)) (carry Bool))
  (eo::match ((m Int) (carryr Bool) (res (BitVec m)))
    ($bv_ripple_carry_adder_2 a1 a2 carry @bv_empty)
    (((@pair carryr res) res))))

; define: $bv_mk_bitblast_step_add
; args:
; - a (BitVec n): An addition term over arguments that are lists of bits.
; - ac (BitVec n): The accumulated return value, a list of bits.
; return: the bitblasted term for a, given already processed arguments ac.
(program $bv_mk_bitblast_step_add ((n Int) (a1 (BitVec n)) (a2 (BitVec n) :list) (ac (BitVec n)))
  ((BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_add (bvadd a1 a2) ac) ($bv_mk_bitblast_step_add a2 ($bv_ripple_carry_adder ac a1 false)))
  (($bv_mk_bitblast_step_add a2 ac)            ac)
  )
)

;;; multiplication

; define: $bv_shift_add_multiplier_rec_step
; args:
; - b1 Bool: The bit of the first term at the given index.
; - a2 (BitVec n): The second term to multiply, a lists of bits.
; - k Int: The index of the bit we are considering.
; - res (BitVec n): The accumulated return value, a list of bits.
; - carray Bool: The current carry bit.
; return: the bitblasted term for processing the multiplication at the current index.
(program $bv_shift_add_multiplier_rec_step ((n Int) (m Int) (k Int) (b1 Bool) (b2 Bool) (a2 (BitVec n) :list) (res (BitVec n))
                                            (br Bool) (ar (BitVec m) :list) (carry Bool))
  (Bool (BitVec n) Int (BitVec n) Bool) (BitVec n)
  (
  (($bv_shift_add_multiplier_rec_step b1 a2 0 @bv_empty carry)                              @bv_empty)
  (($bv_shift_add_multiplier_rec_step b1 (@from_bools b2 a2) 0 (@from_bools br ar) carry)
      (eo::define ((aj (and b1 b2)))
      (eo::cons @from_bools (xor (xor br aj) carry)
        ($bv_shift_add_multiplier_rec_step b1 a2 0 ar (or (and br aj) (and (xor br aj) carry))))))
  (($bv_shift_add_multiplier_rec_step b1 a2 k (@from_bools br ar) carry)
      (eo::cons @from_bools br ($bv_shift_add_multiplier_rec_step b1 a2 (eo::add k -1) ar carry)))
  )
)

; define: $bv_shift_add_multiplier_rec
; args:
; - a1 (BitVec m): The remainder of the first term to multiply, a lists of bits.
; - a2 (BitVec n): The second term to multiply, a lists of bits.
; - k Int: The index of bits we are considering.
; - res (BitVec n): The accumulated return value, a list of bits.
; return: the bitblasted term for processing the multiplication of a1 and a2.
(program $bv_shift_add_multiplier_rec ((n Int) (m Int) (mm1 Int) (k Int) (b1 Bool) (a1 (BitVec mm1) :list) (a2 (BitVec n)) (res (BitVec n)))
  ((BitVec m) (BitVec n) Int (BitVec n)) (BitVec n)
  (
  (($bv_shift_add_multiplier_rec @bv_empty a2 k res)            res)
  (($bv_shift_add_multiplier_rec (@from_bools b1 a1) a2 k res)
     ($bv_shift_add_multiplier_rec a1 a2 (eo::add k 1) ($bv_shift_add_multiplier_rec_step b1 a2 k res false)))
  )
)
; define: $bv_shift_add_multiplier
; args:
; - a (BitVec n): The first term to multiply, a lists of bits.
; - b (BitVec n): The second term to multiply, a lists of bits.
; return: the bitblasted term for (bvmul a b).
(program $bv_shift_add_multiplier ((n Int) (b1 Bool) (a1 (BitVec n) :list) (a2 (BitVec n)))
  ((BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_shift_add_multiplier a2 (@from_bools b1 a1))
    (eo::define ((sz ($bv_bitwidth (eo::typeof a2))))
      ($bv_shift_add_multiplier_rec a1 a2 1 ($bv_bitblast_apply_binary and ($bv_bitblast_repeat b1 sz) a2))))
  )
)

; define: $bv_mk_bitblast_step_mul
; args:
; - a (BitVec n): A multiplication term over arguments that are lists of bits.
; - ac (BitVec n): The accumulated return value, a list of bits.
; return: the bitblasted term for a, given already processed arguments ac.
(program $bv_mk_bitblast_step_mul ((n Int) (a1 (BitVec n)) (a2 (BitVec n) :list) (ac (BitVec n)))
  ((BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_mul (bvmul a1 a2) ac) ($bv_mk_bitblast_step_mul a2 ($bv_shift_add_multiplier ac a1)))
  (($bv_mk_bitblast_step_mul a2 ac)            ac)
  )
)

;;; division and remainder

; define: $bv_div_mod_impl
; args:
; - x (BitVec n): The first argument to div/rem, expected to be a list of bits.
; - y (BitVec n): The second argument to div/rem, expected to be a list of bits.
; - zero (BitVec n): A list of bits corresponding to the zero bitvector of the given width.
; - sz Int: The number of bits left to process.
; return:
;   A pair corresponding to the bitblasted form of the quotient/remainder of x and y.
(program $bv_div_mod_impl ((n Int :implicit) (a1 (BitVec n)) (a2 (BitVec n)) (sz Int) (zero (BitVec n)))
  ((BitVec n) (BitVec n) (BitVec n) Int) (@Pair (BitVec n) (BitVec n))
  (
  (($bv_div_mod_impl a1 a2 zero 0)    (@pair zero zero))
  (($bv_div_mod_impl zero a2 zero sz) (@pair zero zero))
  (($bv_div_mod_impl a1 a2 zero sz)
     (eo::match ((m1 Int) (q1 (BitVec m1)) (r1 (BitVec m1)))
      ($bv_div_mod_impl ($bv_bitblast_rshift a1 1) a2 zero (eo::add sz -1))
      (((@pair q1 r1)
        (eo::define ((isodd (eo::list_nth @from_bools a1 0)))
        (eo::define ((q1s ($bv_bitblast_lshift q1 1)))
        (eo::define ((r1s ($bv_bitblast_lshift r1 1)))
        (eo::define ((r1sa ($bv_ripple_carry_adder r1s zero (ite (= isodd true) true false))))
        (eo::define ((a2n ($bv_bitblast_apply_unary not a2)))
        (eo::match ((m2 Int) (rmb_carry Bool) (rmb (BitVec m2)))
          ($bv_ripple_carry_adder_2 r1sa a2n true @bv_empty)
          (((@pair rmb_carry rmb)
            (eo::define ((q1ss (eo::match ((mm1 Int) (b1q Bool) (a1q (BitVec mm1) :list))
                                 q1s
                                 (((@from_bools b1q a1q) (@from_bools (ite (not rmb_carry) b1q true) a1q))))))
            (eo::define ((r1sa2 ($bv_bitblast_apply_ite (not rmb_carry) r1sa rmb)))
            (eo::match ((m3 Int) (amb_carry Bool) (amb (BitVec m3)))
              ($bv_ripple_carry_adder_2 a1 a2n true @bv_empty)
              (((@pair amb_carry amb)
                (@pair ($bv_bitblast_apply_ite (not amb_carry) zero q1ss) ($bv_bitblast_apply_ite (not amb_carry) a1 r1sa2)))))))))))))))))))
  )
)

; define: $bv_mk_bitblast_step_udiv
; args:
; - x (BitVec n): The first argument, expected to be a list of bits.
; - y (BitVec n): The second argument, expected to be a list of bits.
; return: the bitblasted term for (bvudiv x y).
(define $bv_mk_bitblast_step_udiv ((n Int :implicit) (a1 (BitVec n)) (a2 (BitVec n)))
  (eo::define ((sz ($bv_bitwidth (eo::typeof a1))))
  (eo::define ((zero ($bv_bitblast_zero sz)))
  (eo::match ((m Int) (q (BitVec m)) (r (BitVec m)))
    ($bv_div_mod_impl a1 a2 zero sz)
    (((@pair q r) (eo::define ((isz ($bv_mk_bitblast_step_eq a2 zero)))
                    ($bv_bitblast_apply_ite isz ($bv_bitblast_repeat true sz) q))))))))

; define: $bv_mk_bitblast_step_urem
; args:
; - x (BitVec n): The first argument, expected to be a list of bits.
; - y (BitVec n): The second argument, expected to be a list of bits.
; return: the bitblasted term for (bvurem x y).
(define $bv_mk_bitblast_step_urem ((n Int :implicit) (a1 (BitVec n)) (a2 (BitVec n)))
  (eo::define ((sz ($bv_bitwidth (eo::typeof a1))))
  (eo::define ((zero ($bv_bitblast_zero sz)))
  (eo::match ((m Int) (q (BitVec m)) (r (BitVec m)))
    ($bv_div_mod_impl a1 a2 zero sz)
    (((@pair q r) (eo::define ((isz ($bv_mk_bitblast_step_eq a2 zero)))
                    ($bv_bitblast_apply_ite isz a1 r))))))))

;;; ite

; define: $bv_mk_bitblast_step_ite
; args:
; - c (BitVec 1): The condition, expected to be a singleton list of bits.
; - x (BitVec n): The then branch, expected to be a list of bits.
; - y (BitVec n): The else branch, expected to be a list of bits.
; return: the bitblasted term for (bvite c x y).
(program $bv_mk_bitblast_step_ite ((n Int) (b1 Bool) (a1 (BitVec n) :list) (b2 Bool) (a2 (BitVec n) :list) (bc Bool))
  ((BitVec 1) (BitVec n) (BitVec n)) (BitVec n)
  (
  (($bv_mk_bitblast_step_ite (@from_bools bc) (@from_bools b1 a1) (@from_bools b2 a2))
    (eo::cons @from_bools (and (or (not bc) b1) (or bc b2)) ($bv_mk_bitblast_step_ite (@from_bools bc) a1 a2)))
  (($bv_mk_bitblast_step_ite (@from_bools bc) @bv_empty @bv_empty) @bv_empty)
  )
)

;;; constants

; program: $bv_const_to_bitlist_rec
; args:
; - c (BitVec n): The bitvector constant to process.
; - i Int: The index we are currently processing.
; - n Int: The bitwidth of c.
; return: the bitlist for a starting with index i.
(program $bv_const_to_bitlist_rec ((n Int) (c (BitVec n)) (i Int))
  ((BitVec n) Int Int) (BitVec n)
  (
    (($bv_const_to_bitlist_rec c n n)   @bv_empty)
    (($bv_const_to_bitlist_rec c i n)   (eo::cons @from_bools ($bv_bit_set c i) ($bv_const_to_bitlist_rec c (eo::add i 1) n)))
  )
)

; define: $bv_mk_bitblast_step_const
; args:
; - a (BitVec n): The bitvector constant to bitblast.
; return: the bitblasted term for a, which is its reverse bitlist.
(define $bv_mk_bitblast_step_const ((n Int :implicit) (a (BitVec n)))
  ($bv_const_to_bitlist_rec a 0 (eo::len a)))

;;; shifts

; define: $bv_mk_bitblast_step_shl_rec_step
; args:
; - a1 (BitVec m): The remainder of the first argument to shift, a lists of bits, which we strip the first i bits from.
; - a1c (BitVec n): The remainder of the first argument to shift, a lists of bits.
; - i Int: The number of bits left to strip from a1.
; - b2 Bool: Whether the bit of the shift amount we are currently processing was true.
; return: the bitblasted term for processing the left shift of a1 for the current bit.
(program $bv_mk_bitblast_step_shl_rec_step ((i Int) (n Int) (m Int) (mm1 Int)
                                             (b1 Bool) (a1 (BitVec mm1) :list)
                                             (b1c Bool) (a1c (BitVec n) :list) (b2 Bool))
  ((BitVec m) (BitVec n) Int Bool) (BitVec m)
  (
  (($bv_mk_bitblast_step_shl_rec_step @bv_empty a1c i b2)                              @bv_empty)
  (($bv_mk_bitblast_step_shl_rec_step (@from_bools b1 a1) (@from_bools b1c a1c) 0 b2)
    (eo::cons @from_bools (ite b2 b1c b1) ($bv_mk_bitblast_step_shl_rec_step a1 a1c 0 b2)))
  (($bv_mk_bitblast_step_shl_rec_step (@from_bools b1 a1) a1c i b2)
    (eo::cons @from_bools (ite b2 false b1) ($bv_mk_bitblast_step_shl_rec_step a1 a1c (eo::add i -1) b2)))
  )
)

; define: $bv_mk_bitblast_step_shl_rec
; args:
; - a1 (BitVec n): The current accumulated return value, starting with the first argument.
; - a2 (BitVec m): The remainder of the second argument to shift, a lists of bits.
; - s Int: The index of bits we are considering.
; - lsz Int: The bitwidth of a1.
; return: the bitblasted term for processing the left shift of a1 and a2.
(program $bv_mk_bitblast_step_shl_rec ((s Int) (lsz Int) (n Int) (m Int) (a1 (BitVec n)) (b2 Bool) (a2 (BitVec m) :list))
  ((BitVec n) (BitVec m) Int Int) (BitVec n)
  (
  (($bv_mk_bitblast_step_shl_rec a1 a2 lsz lsz)                a1)
  (($bv_mk_bitblast_step_shl_rec a1 (@from_bools b2 a2) s lsz)
    ($bv_mk_bitblast_step_shl_rec
      ($bv_mk_bitblast_step_shl_rec_step a1 a1 ($arith_eval_int_pow_2 s) b2)
      a2 (eo::add s 1) lsz))
  )
)

; define: $bv_mk_bitblast_step_shl
; args:
; - a1 (BitVec n): The first argument, expected to be a list of bits.
; - a2 (BitVec n): The second argument, expected to be a list of bits.
; return: the bitblasted term for (bvshl x y).
(define $bv_mk_bitblast_step_shl ((n Int :implicit) (a1 (BitVec n)) (a2 (BitVec n)))
  (eo::define ((sz ($bv_bitwidth (eo::typeof a1))))
  (eo::define ((lsz1 ($arith_eval_int_log_2 sz)))
  (eo::define ((lsz (eo::ite ($arith_eval_int_is_pow_2 sz) lsz1 (eo::add lsz1 1))))
  (eo::define ((res ($bv_mk_bitblast_step_shl_rec a1 a2 0 lsz)))
  (eo::define ((szc ($bv_mk_bitblast_step_const (eo::to_bin sz sz))))
    ($bv_bitblast_apply_ite ($bv_bitblast_ult a2 szc false) res ($bv_bitblast_repeat false sz))))))))


; define: $bv_mk_bitblast_step_shr_rec_step
; args:
; - a1 (BitVec m): The remainder of the first argument to shift, a lists of bits.
; - a1c (BitVec n): The remainder of the first argument to shift, a lists of bits, which we initially strip the first i bits from.
; - i Int: The number of bits left to strip from a1c.
; - b2 Bool: Whether the bit of the shift amount we are currently processing was true.
; - sbit Bool: The sign bit we are processing (the sign of first argument for bvashr, false otherwise).
; return: the bitblasted term for processing the right shift of a1 for the current bit.
(program $bv_mk_bitblast_step_shr_rec_step ((i Int) (n Int) (m Int) (mm1 Int)
                                             (b1 Bool) (a1 (BitVec mm1) :list)
                                             (b1c Bool) (a1c (BitVec n) :list) (b2 Bool) (sbit Bool))
  ((BitVec m) (BitVec n) Int Bool Bool) (BitVec m)
  (
  (($bv_mk_bitblast_step_shr_rec_step @bv_empty a1c i b2 sbit)                              @bv_empty)
  (($bv_mk_bitblast_step_shr_rec_step (@from_bools b1 a1) (@from_bools b1c a1c) 0 b2 sbit)
    (eo::cons @from_bools (ite (not b2) b1 b1c) ($bv_mk_bitblast_step_shr_rec_step a1 a1c 0 b2 sbit)))
  (($bv_mk_bitblast_step_shr_rec_step (@from_bools b1 a1) @bv_empty 0 b2 sbit)
    (eo::cons @from_bools (ite b2 sbit b1) ($bv_mk_bitblast_step_shr_rec_step a1 @bv_empty 0 b2 sbit)))
  (($bv_mk_bitblast_step_shr_rec_step a1 (@from_bools b1c a1c) i b2 sbit)
    ($bv_mk_bitblast_step_shr_rec_step a1 a1c (eo::add i -1) b2 sbit))
  )
)

; define: $bv_mk_bitblast_step_shl_rec
; args:
; - a1 (BitVec n): The current accumulated return value, starting with the first argument.
; - a2 (BitVec m): The remainder of the second argument to shift, a lists of bits.
; - s Int: The index of bits we are considering.
; - lsz Int: The bitwidth of a1.
; - sbit Bool: The sign bit we are processing (the sign of first argument for bvashr, false otherwise).
; return: the bitblasted term for processing the left shift of a1 and a2.
(program $bv_mk_bitblast_step_shr_rec ((s Int) (lsz Int) (n Int) (a1 (BitVec n)) (b2 Bool) (a2 (BitVec n) :list) (sbit Bool))
  ((BitVec n) (BitVec n) Int Int Bool) (BitVec n)
  (
  (($bv_mk_bitblast_step_shr_rec a1 a2 lsz lsz sbit)                a1)
  (($bv_mk_bitblast_step_shr_rec a1 (@from_bools b2 a2) s lsz sbit)
    ($bv_mk_bitblast_step_shr_rec
      ($bv_mk_bitblast_step_shr_rec_step a1 a1 ($arith_eval_int_pow_2 s) b2 sbit)
      a2 (eo::add s 1) lsz sbit))
  )
)

; define: $bv_mk_bitblast_step_shr
; args:
; - a1 (BitVec n): The first argument, expected to be a list of bits.
; - a2 (BitVec n): The second argument, expected to be a list of bits.
; - sbit Bool: The sign bit we are processing, which is the sign bit of a1 if processing bvashr and false otherwise.
; return: the bitblasted term for (bvashr a1 a2) or (bvlshr a1 a2).
(define $bv_mk_bitblast_step_shr ((n Int :implicit) (a1 (BitVec n)) (a2 (BitVec n)) (sbit Bool))
  (eo::define ((sz ($bv_bitwidth (eo::typeof a1))))
  (eo::define ((lsz1 ($arith_eval_int_log_2 sz)))
  (eo::define ((lsz (eo::ite ($arith_eval_int_is_pow_2 sz) lsz1 (eo::add lsz1 1))))
  (eo::define ((res ($bv_mk_bitblast_step_shr_rec a1 a2 0 lsz sbit)))
  (eo::define ((szc ($bv_mk_bitblast_step_const (eo::to_bin sz sz))))
    ($bv_bitblast_apply_ite ($bv_bitblast_ult a2 szc false) res ($bv_bitblast_repeat sbit sz))))))))

;;; variables

; program: $bv_mk_bitblast_step_var_rec
; args:
; - a (BitVec n): The bitvector variable to bitblast.
; - i Int: The index of the bit we are currently processing.
; return: the bitblasted term for variable a.
(program $bv_mk_bitblast_step_var_rec ((n Int) (a (BitVec n)) (i Int))
  ((BitVec n) Int) (BitVec n)
  (
    (($bv_mk_bitblast_step_var_rec a -1)  @bv_empty)
    (($bv_mk_bitblast_step_var_rec a i)   (eo::cons @from_bools (@bit i a) ($bv_mk_bitblast_step_var_rec a (eo::add i -1))))
  )
)

; define: $bv_mk_bitblast_step_var
; args:
; - a (BitVec n): The bitvector variable to bitblast.
; return: the bitblasted term for variable a.
(define $bv_mk_bitblast_step_var ((n Int :implicit) (a (BitVec n)))
  ($nary_reverse ($bv_mk_bitblast_step_var_rec a (eo::add ($bv_bitwidth (eo::typeof a)) -1))))

;;; $bv_mk_bitblast_step

; define: $bv_mk_bitblast_step
; args:
; - a T: The bitvector term or predicate to bitblast.
; return: the bitblasted term for a.
(define $bv_mk_bitblast_step ((T Type :implicit) (a T))
  (eo::match ((n Int) (a1 (BitVec n)) (a2 (BitVec n) :list) (u Int) (l Int) (m Int) (a3 (BitVec m) :list))
  a
  (
  ((= a1 a2)        ($bv_mk_bitblast_step_eq a1 a2))
  ((extract u l a1) ($bv_mk_bitblast_step_extract u l a1))
  ((concat a1 a3)   ($bv_mk_bitblast_step_concat a))
  (a1               (eo::ite (eo::is_bin a)
                      ($bv_mk_bitblast_step_const a)
                      ($bv_mk_bitblast_step_var a)))    ; otherwise assume a variable
  ))
)
