(include "../theories/Ints.eo")
(include "../theories/Arith.eo")
(include "../theories/BitVectors.eo")
(include "../programs/Utils.eo")

; Definitions of monomials and polynomials.
; A monomial is a list of terms that are ordered by `$compare_var` and a rational coefficient.
; A polynomial is a list of monomials whose monomials are ordered by `$compare_var`.
(declare-type @Monomial ())
(declare-const @mon (-> (! Type :var T :implicit) T Real @Monomial))

(declare-type @Polynomial ())
(declare-const @poly.zero @Polynomial)
(declare-const @poly (-> @Monomial @Polynomial @Polynomial) :right-assoc-nil @poly.zero)

; program: $poly_neg
; args:
; - p @Polynomial: The polynomial to negate.
; return: the negation of the given polynomial.
(program $poly_neg ((T Type) (c Real) (a T) (p @Polynomial :list))
  (@Polynomial) @Polynomial
  (
    (($poly_neg @poly.zero)           @poly.zero)
    (($poly_neg (@poly (@mon a c) p)) (eo::cons @poly (@mon a (eo::neg c)) ($poly_neg p)))
  )
)

; program: $poly_add
; args:
; - p1 @Polynomial: The first polynomial to add.
; - p2 @Polynomial: The second polynomial to add.
; return: the addition of the given polynomials.
(program $poly_add ((T Type) (U Type) (c1 Real) (a1 T) (c2 Real) (a2 U) (p @Polynomial) (p1 @Polynomial :list) (p2 @Polynomial :list))
  (@Polynomial @Polynomial) @Polynomial
  (
    (($poly_add (@poly (@mon a1 c1) p1) (@poly (@mon a2 c2) p2)) (eo::ite (eo::is_eq a1 a2)
                                                                  (eo::define ((ca (eo::add c1 c2)) (pa ($poly_add p1 p2)))
                                                                  ; check if cancels
                                                                  (eo::ite (eo::is_eq ca 0/1) pa (eo::cons @poly (@mon a1 ca) pa)))
                                                                (eo::ite ($compare_var a1 a2)
                                                                  (eo::cons @poly (@mon a1 c1) ($poly_add p1 (@poly (@mon a2 c2) p2)))
                                                                  (eo::cons @poly (@mon a2 c2) ($poly_add (@poly (@mon a1 c1) p1) p2)))))
    (($poly_add @poly.zero p)                                    p)
    (($poly_add p @poly.zero)                                    p)
  )
)

; program: $mvar_mul_mvar
; args:
; - a X: The first monomial variable to multiply.
; - b Y: The second monomial variable to multiply.
; return: the multiplication of the given monomial variables.
(program $mvar_mul_mvar ((T Type) (U Type) (V Type) (W Type) (X Type) (Y Type) (Z Type) (a1 T) (a2 U :list) (b1 V) (b2 W :list))
  (X Y) Z
  (
    (($mvar_mul_mvar (* a1 a2) (* b1 b2))  (eo::ite ($compare_var a1 b1)
                                            (eo::cons * a1 ($mvar_mul_mvar a2 (* b1 b2)))
                                            (eo::cons * b1 ($mvar_mul_mvar (* a1 a2) b2))))
    (($mvar_mul_mvar (* a1 a2) 1)          (* a1 a2))
    (($mvar_mul_mvar 1 (* b1 b2))          (* b1 b2))
    (($mvar_mul_mvar 1 1)                  1)
  )
)

; program: $mon_mul_mon
; args:
; - a @Monomial: The first monomial to multiply.
; - b @Monomial: The second monomial to multiply.
; return: the multiplication of the given monomials.
(program $mon_mul_mon ((T Type) (U Type) (a1 T) (a2 U) (c1 Real) (c2 Real))
  (@Monomial @Monomial) @Monomial
  (
    (($mon_mul_mon (@mon a1 c1) (@mon a2 c2))  (@mon ($mvar_mul_mvar a1 a2) (eo::mul c1 c2)))
  )
)

; program: $poly_mul_mon
; args:
; - a @Monomial: The monomial to multiply.
; - p @Polynomial: The polynomial to multiply.
; return: the multiplication of the polynomial by a monomial.
(program $poly_mul_mon ((m1 @Monomial) (m2 @Monomial) (p2 @Polynomial :list))
  (@Monomial @Polynomial) @Polynomial
  (
    (($poly_mul_mon m1 (@poly m2 p2)) ($poly_add (@poly ($mon_mul_mon m1 m2)) ($poly_mul_mon m1 p2)))   ; NOTE: this amounts to an insertion sort
    (($poly_mul_mon m1 @poly.zero)    @poly.zero)
  )
)

; program: $poly_mul
; args:
; - p1 @Polynomial: The first polynomial to multiply.
; - p2 @Polynomial: The second polynomial to multiply.
; return: the multiplication of the given polynomials.
(program $poly_mul ((m @Monomial) (p1 @Polynomial :list) (p @Polynomial))
  (@Polynomial @Polynomial) @Polynomial
  (
    (($poly_mul (@poly m p1) p) ($poly_add ($poly_mul_mon m p) ($poly_mul p1 p)))
    (($poly_mul @poly.zero p)   @poly.zero)
    (($poly_mul p @poly.zero)   @poly.zero)
  )
)

; program: $get_poly_norm
; args:
; - a T: The arithmetic term to process of type Int or Real.
; return: the polynomial corresponding to the (normalized) form of a.
(program $get_poly_norm ((T Type) (U Type) (V Type) (a T) (a1 U) (a2 V :list))
  (T) @Polynomial
  (
    (($get_poly_norm (- a1))       ($poly_neg ($get_poly_norm a1)))
    (($get_poly_norm (+ a1 a2))    ($poly_add ($get_poly_norm a1) ($get_poly_norm a2)))
    (($get_poly_norm (- a1 a2))    ($poly_add ($get_poly_norm a1) ($poly_neg ($get_poly_norm a2))))
    (($get_poly_norm (* a1 a2))    ($poly_mul ($get_poly_norm a1) ($get_poly_norm a2)))
    (($get_poly_norm (to_real a1)) ($get_poly_norm a1))
    (($get_poly_norm a)            (eo::define ((aq (eo::to_q a)))
                                  ; if it is a constant, which can be tested if to_q is idempotent after the first
                                  (eo::ite (eo::is_eq aq (eo::to_q aq))
                                    ; if it is zero, it cancels, otherwise it is 1 with itself as coefficient
                                    (eo::ite (eo::is_eq aq 0/1)
                                      @poly.zero
                                      (@poly (@mon 1 aq)))
                                  (@poly (@mon (* a) 1/1)))))    ; introduces list
  )
)

; define: $is_poly_norm
; args:
; - a T: The first arithmetic term to process, of type Int or Real.
; - b T: The second arithmetic term to process, of type Int or Real.
; return: true if a and b normalize to the same polynomial
(define $is_poly_norm ((T Type :implicit) (a T) (b T))
  (eo::is_eq ($get_poly_norm a) ($get_poly_norm b))
)

; program: $arith_poly_to_term_rec
; args:
; - p @Polynomial: The polynomial to convert to a term.
; return: The term corresponding to the polynomial p.
; note: This is a helper for $arith_poly_to_term below.
(program $arith_poly_to_term_rec ((T Type) (p @Polynomial :list) (a T) (c Real))
  (@Polynomial) T
  (
    (($arith_poly_to_term_rec @poly.zero) 0)
    (($arith_poly_to_term_rec (@poly (@mon a c) p)) (+ (* c a) ($arith_poly_to_term_rec p)))
  )
)

; define: $arith_poly_to_term
; args:
; - t T: The term to normalize. This is expected to be a term whose type is Int or Real.
; return: >
;   a term corresponding to the polynomial obtained by converting t to a polynomial.
;   This can be used for normalizing terms according to arithmetic.
(define $arith_poly_to_term ((T Type :implicit) (t T))
  ($arith_poly_to_term_rec ($get_poly_norm t)))

; program: $is_poly_norm_rel_consts
; args:
; - b Bool: >
;   a formula of the form (r cx cy) where r is a binary relation and cx and
;   cy are scaling factors.
; return: >
;   The result of checking if r is a polynomial normalization relation for a
;   formula of the form (= (r x1 x2) (r y1 y2)), where it is already known that
;   (= (* cx (- x1 x2)) (* cy (- y1 y2))). If r is any of <, <=, >=, or >, the
;   scaling factors must have the same sign. For bitvectors, they must be set to
;   1. Returns false for any other relation.
(program $is_poly_norm_rel_consts ((U Type) (r (-> U U Bool)) (cx U) (cy U) (b Bool))
  (Bool) Bool
  (
    (($is_poly_norm_rel_consts (< cx cy))  (eo::is_eq ($sgn cx) ($sgn cy)))
    (($is_poly_norm_rel_consts (<= cx cy)) (eo::is_eq ($sgn cx) ($sgn cy)))
    (($is_poly_norm_rel_consts (= cx cy))  true)
    (($is_poly_norm_rel_consts (>= cx cy)) (eo::is_eq ($sgn cx) ($sgn cy)))
    (($is_poly_norm_rel_consts (> cx cy))  (eo::is_eq ($sgn cx) ($sgn cy)))
    (($is_poly_norm_rel_consts b)          false)
  )
)

; program: $mk_poly_norm_rel
; args:
; - t U: The left hand side of the premise of ProofRule::ARITH_POLY_NORM_REL.
; - s U: The right hand side of the premise.
; - r (-> U U Bool): The relation of the conclusion.
; return: >
;   The conclusion of ProofRule::ARITH_POLY_NORM_REL. This program does not
;   evaluate if the input to this proof rule is invalid.
(program $mk_poly_norm_rel ((U Type) (r (-> U U Bool)) (x1 U) (x2 U) (y1 U) (y2 U) (cx U) (cy U) 
                            (n Int) (c (BitVec n)) (nil (BitVec n) :list) 
                            (xb1 (BitVec n)) (xb2 (BitVec n)) (yb1 (BitVec n)) (yb2 (BitVec n)))
  (U U (-> U U Bool)) Bool
  (
    (($mk_poly_norm_rel (* cx (- x1 x2)) (* cy (- y1 y2)) r) 
        (eo::requires ($is_poly_norm_rel_consts (r cx cy)) true
          (= (r x1 x2) (r y1 y2))))
    (($mk_poly_norm_rel (bvmul c (bvsub xb1 xb2) nil) (bvmul c (bvsub yb1 yb2) nil) =)
        (eo::requires (eo::to_z c) 1
        (eo::requires (eo::to_z nil) 1
          (= (= xb1 xb2) (= yb1 yb2)))))
  )
)
