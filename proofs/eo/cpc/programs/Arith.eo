(include "../theories/Ints.eo")
(include "../theories/Arith.eo")
(include "../programs/Utils.eo")

; define: $arith_eval_add
; args:
; - x T: The first arithmetic term to add.
; - y U: The second arithmetic term to add.
; return: >
;   The addition of x and y, for mixed arithmetic. Note that x and y
;   can each be integer or real. This method returns an integer value if x and y
;   are both integer, or a rational value otherwise.
(define $arith_eval_add ((T Type :implicit) (U Type :implicit) (x T) (y U))
  (eo::define ((xq (eo::to_q x)))
  (eo::define ((yq (eo::to_q y)))
    (eo::ite (eo::is_eq x xq)
      (eo::add xq yq)
      (eo::ite (eo::is_eq y yq)
        (eo::add xq yq)
        (eo::add x y)))))
)

; define: $arith_eval_sub
; args:
; - x T: The first arithmetic term to subtract.
; - y U: The second arithmetic term to subtract.
; return: >
;   The subtraction of x and y, for mixed arithmetic. Note that x and y
;   can each be integer or real. This method returns an integer value if x and y
;   are both integer, or a rational value otherwise.
(define $arith_eval_sub ((U Type :implicit) (T Type :implicit) (x U) (y T))
  ($arith_eval_add x (eo::neg y))
)

; define: $arith_eval_mul
; args:
; - x T: The first arithmetic term to multiply.
; - y U: The second arithmetic term to multiply.
; return: >
;   The multiplication of x and y, for mixed arithmetic. Note that x and y
;   can each be integer or real. This method returns an integer value if x and y
;   are both integer, or a rational value otherwise.
(define $arith_eval_mul ((T Type :implicit) (U Type :implicit) (x T) (y U))
  (eo::define ((xq (eo::to_q x)))
  (eo::define ((yq (eo::to_q y)))
    (eo::ite (eo::is_eq x xq)
      (eo::mul xq yq)
      (eo::ite (eo::is_eq y yq)
        (eo::mul xq yq)
        (eo::mul x y)))))
)

; define: $arith_eval_qsub
; args:
; - x T: The first arithmetic term to subtract.
; - y U: The second arithmetic term to subtract.
; return: The subtraction of x and y as a rational.
; note: This returns a rational value even if x and y are numeral values.
(define $arith_eval_qsub ((U Type :implicit) (T Type :implicit) (x U) (y T))
  (eo::add (eo::to_q x) (eo::neg (eo::to_q y)))
)

; program: $arith_eval_int_log_2_rec
; args:
; - x  Int: The term to compute the log (base 2) of, assumed to be a positive numeral value.
; return: The log base 2 of x.
; note: Helper method for $arith_eval_int_log_2 below.
(program $arith_eval_int_log_2_rec ((x Int))
  (Int) Int
  (
  (($arith_eval_int_log_2_rec 1) 0)
  (($arith_eval_int_log_2_rec x) (eo::add 1 ($arith_eval_int_log_2_rec (eo::zdiv x 2))))
  )
)

; define: $arith_eval_int_log_2
; args:
; - x Int: The term to compute the log (base 2) of.
; return: >
;   the log base 2 of x. If x is not strictly positive, we return
;   the term (int.log2 x).
(define $arith_eval_int_log_2 ((x Int))
  (eo::ite (eo::is_neg (eo::neg x)) ($arith_eval_int_log_2_rec x) (int.log2 x)))

; program: $arith_eval_is_pow_2_rec
; args:
; - x  Int: The term to compute whether it is a power of two, assumed to be a positive numeral value.
; return: true iff x is a power of two.
; note: Helper method for $arith_eval_is_pow_2 below.
(program $arith_eval_is_pow_2_rec ((x Int))
  (Int) Bool
  (
  (($arith_eval_is_pow_2_rec 1) true)
  (($arith_eval_is_pow_2_rec x) (eo::ite (eo::is_eq (eo::zmod x 2) 0) 
                                  ($arith_eval_is_pow_2_rec (eo::zdiv x 2))
                                  false))
  )
)

; define: $arith_eval_is_pow_2
; args:
; - x Int: The term to compute whether it is a power of two.
; return: >
;   true iff x is a power of two. If x is not a numeral value, we return
;   the term (int.ispow2 x).
(define $arith_eval_is_pow_2 ((x Int))
  (eo::ite (eo::is_z x) 
    (eo::ite (eo::is_neg x) false ($arith_eval_is_pow_2_rec x))
    (int.ispow2 x)))

;; =============== for ARITH_POLY_NORM

; Definitions of monomials and polynomials.
; A monomial is a list of terms that are ordered by `$compare_var` and a rational coefficient.
; A polynomial is a list of monomials whose monomials are ordered by `$compare_var`.
(declare-type @Monomial ())
(declare-const @mon (-> (! Type :var T :implicit) T Real @Monomial))

(declare-type @Polynomial ())
(declare-const @poly.zero @Polynomial)
(declare-const @poly (-> @Monomial @Polynomial @Polynomial) :right-assoc-nil @poly.zero)

; program: $poly_neg
; args:
; - p @Polynomial: The polynomial to negate.
; return: the negation of the given polynomial.
(program $poly_neg ((T Type) (c Real) (a T) (p @Polynomial :list))
  (@Polynomial) @Polynomial
  (
    (($poly_neg @poly.zero)           @poly.zero)
    (($poly_neg (@poly (@mon a c) p)) (eo::cons @poly (@mon a (eo::neg c)) ($poly_neg p)))
  )
)

; program: $poly_add
; args:
; - p1 @Polynomial: The first polynomial to add.
; - p2 @Polynomial: The second polynomial to add.
; return: the addition of the given polynomials.
(program $poly_add ((T Type) (U Type) (c1 Real) (a1 T) (c2 Real) (a2 U) (p @Polynomial) (p1 @Polynomial :list) (p2 @Polynomial :list))
  (@Polynomial @Polynomial) @Polynomial
  (
    (($poly_add (@poly (@mon a1 c1) p1) (@poly (@mon a2 c2) p2)) (eo::ite (eo::is_eq a1 a2)
                                                                  (eo::define ((ca (eo::add c1 c2)) (pa ($poly_add p1 p2)))
                                                                  ; check if cancels
                                                                  (eo::ite (eo::is_eq ca 0/1) pa (eo::cons @poly (@mon a1 ca) pa)))
                                                                (eo::ite ($compare_var a1 a2)
                                                                  (eo::cons @poly (@mon a1 c1) ($poly_add p1 (@poly (@mon a2 c2) p2)))
                                                                  (eo::cons @poly (@mon a2 c2) ($poly_add (@poly (@mon a1 c1) p1) p2)))))
    (($poly_add @poly.zero p)                                    p)
    (($poly_add p @poly.zero)                                    p)
  )
)

; program: $mvar_mul_mvar
; args:
; - a X: The first monomial variable to multiply.
; - b Y: The second monomial variable to multiply.
; return: the multiplication of the given monomial variables.
(program $mvar_mul_mvar ((T Type) (U Type) (V Type) (W Type) (X Type) (Y Type) (Z Type) (a1 T) (a2 U :list) (b1 V) (b2 W :list))
  (X Y) Z
  (
    (($mvar_mul_mvar (* a1 a2) (* b1 b2))  (eo::ite ($compare_var a1 b1)
                                            (eo::cons * a1 ($mvar_mul_mvar a2 (* b1 b2)))
                                            (eo::cons * b1 ($mvar_mul_mvar (* a1 a2) b2))))
    (($mvar_mul_mvar (* a1 a2) 1)          (* a1 a2))
    (($mvar_mul_mvar 1 (* b1 b2))          (* b1 b2))
    (($mvar_mul_mvar 1 1)                  1)
  )
)

; program: $mon_mul_mon
; args:
; - a @Monomial: The first monomial to multiply.
; - b @Monomial: The second monomial to multiply.
; return: the multiplication of the given monomials.
(program $mon_mul_mon ((T Type) (U Type) (a1 T) (a2 U) (c1 Real) (c2 Real))
  (@Monomial @Monomial) @Monomial
  (
    (($mon_mul_mon (@mon a1 c1) (@mon a2 c2))  (@mon ($mvar_mul_mvar a1 a2) (eo::mul c1 c2)))
  )
)

; program: $poly_mul_mon
; args:
; - a @Monomial: The monomial to multiply.
; - p @Polynomial: The polynomial to multiply.
; return: the multiplication of the polynomial by a monomial.
(program $poly_mul_mon ((m1 @Monomial) (m2 @Monomial) (p2 @Polynomial :list))
  (@Monomial @Polynomial) @Polynomial
  (
    (($poly_mul_mon m1 (@poly m2 p2)) ($poly_add (@poly ($mon_mul_mon m1 m2)) ($poly_mul_mon m1 p2)))   ; NOTE: this amounts to an insertion sort
    (($poly_mul_mon m1 @poly.zero)    @poly.zero)
  )
)

; program: $poly_mul
; args:
; - p1 @Polynomial: The first polynomial to multiply.
; - p2 @Polynomial: The second polynomial to multiply.
; return: the multiplication of the given polynomials.
(program $poly_mul ((m @Monomial) (p1 @Polynomial :list) (p @Polynomial))
  (@Polynomial @Polynomial) @Polynomial
  (
    (($poly_mul (@poly m p1) p) ($poly_add ($poly_mul_mon m p) ($poly_mul p1 p)))
    (($poly_mul @poly.zero p)   @poly.zero)
    (($poly_mul p @poly.zero)   @poly.zero)
  )
)

; program: $get_poly_norm
; args:
; - a T: The arithmetic term to process of type Int or Real.
; return: the polynomial corresponding to the (normalized) form of a.
(program $get_poly_norm ((T Type) (U Type) (V Type) (a T) (a1 U) (a2 V :list))
  (T) @Polynomial
  (
    (($get_poly_norm (- a1))       ($poly_neg ($get_poly_norm a1)))
    (($get_poly_norm (+ a1 a2))    ($poly_add ($get_poly_norm a1) ($get_poly_norm a2)))
    (($get_poly_norm (- a1 a2))    ($poly_add ($get_poly_norm a1) ($poly_neg ($get_poly_norm a2))))
    (($get_poly_norm (* a1 a2))    ($poly_mul ($get_poly_norm a1) ($get_poly_norm a2)))
    (($get_poly_norm (to_real a1)) ($get_poly_norm a1))
    (($get_poly_norm a)            (eo::define ((aq (eo::to_q a)))
                                  ; if it is a constant, which can be tested if to_q is idempotent after the first
                                  (eo::ite (eo::is_eq aq (eo::to_q aq))
                                    ; if it is zero, it cancels, otherwise it is 1 with itself as coefficient
                                    (eo::ite (eo::is_eq aq 0/1)
                                      @poly.zero
                                      (@poly (@mon 1 aq)))
                                  (@poly (@mon (* a) 1/1)))))    ; introduces list
  )
)

; define: $is_poly_norm
; args:
; - a T: The first arithmetic term to process, of type Int or Real.
; - b T: The second arithmetic term to process, of type Int or Real.
; return: true if a and b normalize to the same polynomial
(define $is_poly_norm ((T Type :implicit) (a T) (b T))
  (eo::is_eq ($get_poly_norm a) ($get_poly_norm b))
)

; program: $arith_poly_to_term_rec
; args:
; - p @Polynomial: The polynomial to convert to a term.
; return: The term corresponding to the polynomial p.
; note: This is a helper for $arith_poly_to_term below.
(program $arith_poly_to_term_rec ((T Type) (p @Polynomial :list) (a T) (c Real))
  (@Polynomial) T
  (
    (($arith_poly_to_term_rec @poly.zero) 0)
    (($arith_poly_to_term_rec (@poly (@mon a c) p)) (+ (* c a) ($arith_poly_to_term_rec p)))
  )
)

; define: $arith_poly_to_term
; args:
; - t T: The term to normalize. This is expected to be a term whose type is Int or Real.
; return: >
;   a term corresponding to the polynomial obtained by converting t to a polynomial.
;   This can be used for normalizing terms according to arithmetic.
(define $arith_poly_to_term ((T Type :implicit) (t T))
  ($arith_poly_to_term_rec ($get_poly_norm t)))
