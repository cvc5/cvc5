(include "../theories/Builtin.eo")
(include "../theories/Arith.eo")

; disclaimer: >
;   The types of functions over Strings is generalized in this
;   signature to support both strings and sequences. The SMT-LIB standard only
;   accepts strings.

; The sequence type.
; disclaimer: This sort is not in SMT-LIB.
(declare-type Seq (Type))

; disclaimer: This sort is not in SMT-LIB.
(declare-type Char ())

; define: String
; return: >
;   The string type.
;   Note that string is treated as a sequence of characters in this signature.
;   This is only for the purposes of simplifying the type rules below.
;   Internally, cvc5 will never generate any proofs involving the Char type.
; disclaimer: >
;   This sort is declared to be an atomic sort in SMT-LIB. We
;   generalize it to be defined as a sequence of characters, for the purposes
;   of lifting the theory definition and proof rules for strings to sequences.
(define String () (Seq Char))

; The regular expression type.
(declare-type RegLan ())

; String literals are strings.
(declare-consts <string> String)

; Empty sequence
; note: >
;   This symbol is used as the term denoting the empty sequence.
;   This is not the same as $seq_empty, which is defined as the
;   (user-facing) constructor of the empty string or sequence,
;   defined as $seq_empty below. Note seq.empty is never used for strings.
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const seq.empty ((T Type :implicit)) (Seq T))

; program: $seq_empty
; args:
; - T Type: The string-like type.
; return: The empty string of the given string-like type T.
; note: >
;   We define $seq_empty in this way since the same symbols in our theory
;   are used for strings and sequences, yet for the purposes of
;   e.g. evaluation, strings require using string literals as their
;   values. In places where seq.empty can be used for a string or
;   sequence (e.g., RARE), we use this program to ensure this is the case.
(program $seq_empty ((U Type))
  (Type) (Seq U)
  (
    (($seq_empty String)  "")
    (($seq_empty (Seq U)) (as seq.empty (Seq U)))
  )
)

; Core functions of strings.
(declare-parameterized-const str.len ((T Type :implicit)) (-> (Seq T) Int))

; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-parameterized-const str.++ ((T Type :implicit))
  (-> (Seq T) (Seq T) (Seq T)) :right-assoc-nil ($seq_empty (Seq T)))

; Extended functions for strings.
(declare-parameterized-const str.substr ((T Type :implicit))
  (-> (Seq T) Int Int (Seq T)))
(declare-parameterized-const str.contains ((T Type :implicit))
  (-> (Seq T) (Seq T) Bool))
(declare-parameterized-const str.replace ((T Type :implicit))
  (-> (Seq T) (Seq T) (Seq T) (Seq T)))
(declare-parameterized-const str.indexof ((T Type :implicit))
  (-> (Seq T) (Seq T) Int Int))
(declare-parameterized-const str.at ((T Type :implicit))
  (-> (Seq T) Int (Seq T)))
(declare-parameterized-const str.prefixof ((T Type :implicit))
  (-> (Seq T) (Seq T) Bool))
(declare-parameterized-const str.suffixof ((T Type :implicit))
  (-> (Seq T) (Seq T) Bool))
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const str.rev ((T Type :implicit)) (-> (Seq T) (Seq T)))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.unit (-> Int String))
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const str.update ((T Type :implicit))
  (-> (Seq T) Int (Seq T) (Seq T)))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.to_lower (-> String String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.to_upper (-> String String))
(declare-const str.to_code (-> String Int))
(declare-const str.from_code (-> Int String))
(declare-const str.is_digit (-> String Bool))
(declare-const str.to_int (-> String Int))
(declare-const str.from_int (-> Int String))
(declare-const str.< (-> String String Bool))
(declare-const str.<= (-> String String Bool))
(declare-parameterized-const str.replace_all ((T Type :implicit))
  (-> (Seq T) (Seq T) (Seq T) (Seq T)))
(declare-const str.replace_re (-> String RegLan String String))
(declare-const str.replace_re_all (-> String RegLan String String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.indexof_re (-> String RegLan Int Int))

; Regular expression operators.
(declare-const re.allchar RegLan)
(declare-const re.none RegLan)
(declare-const re.all RegLan)
(declare-const str.to_re (-> String RegLan))

; define: @re.empty
; return: The regular expression containing only the empty string.
(define @re.empty () (str.to_re ""))

(declare-const re.* (-> RegLan RegLan))
(declare-const re.+ (-> RegLan RegLan))
(declare-const re.opt (-> RegLan RegLan))
(declare-const re.comp (-> RegLan RegLan))
(declare-const re.range (-> String String RegLan))
; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const re.++ (-> RegLan RegLan RegLan) :right-assoc-nil @re.empty)
(declare-const re.inter (-> RegLan RegLan RegLan) :right-assoc-nil re.all)
; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const re.union (-> RegLan RegLan RegLan) :right-assoc-nil re.none)
(declare-const re.diff (-> RegLan RegLan RegLan))
(declare-const re.loop (-> Int Int RegLan RegLan))
(declare-const str.in_re (-> String RegLan Bool))

; Sequence-specific operators.
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const seq.unit ((T Type :implicit)) (-> T (Seq T)))
; disclaimer: This function is not in SMT-LIB.
(declare-parameterized-const seq.nth ((T Type :implicit))
  (-> (Seq T) Int (eo::ite (eo::eq T Char) Int T)))

; Sequence operators are automatically translated to the string operators.
; disclaimer: This function is not in SMT-LIB.
(define seq.len () str.len)
; disclaimer: This function is not in SMT-LIB.
(define seq.++ () str.++)
; disclaimer: This function is not in SMT-LIB.
(define seq.extract () str.substr)
; disclaimer: This function is not in SMT-LIB.
(define seq.contains () str.contains)
; disclaimer: This function is not in SMT-LIB.
(define seq.replace () str.replace)
; disclaimer: This function is not in SMT-LIB.
(define seq.replace_all () str.replace_all)
; disclaimer: This function is not in SMT-LIB.
(define seq.indexof () str.indexof)
; disclaimer: This function is not in SMT-LIB.
(define seq.prefixof () str.prefixof)
; disclaimer: This function is not in SMT-LIB.
(define seq.suffixof () str.suffixof)
; disclaimer: This function is not in SMT-LIB.
(define seq.rev () str.rev)
; disclaimer: This function is not in SMT-LIB.
(define seq.update () str.update)
; disclaimer: This function is not in SMT-LIB.
(define seq.at () str.at)

; Skolem functions for strings and sequences.

(declare-parameterized-const @re_unfold_pos_component
  ((s String :opaque) (r RegLan :opaque) (n Int :opaque)) 
  String)
(declare-parameterized-const @strings_deq_diff
  ((T Type :implicit) (s (Seq T) :opaque) (t (Seq T) :opaque))
  Int)
(declare-parameterized-const @strings_stoi_result ((s String :opaque))
  (-> Int Int))
(declare-parameterized-const @strings_stoi_non_digit ((s String :opaque)) Int)
(declare-parameterized-const @strings_itos_result ((n Int :opaque))
  (-> Int Int))
(declare-parameterized-const @strings_num_occur
  ((T Type :implicit) (s (Seq T)) (t (Seq T)))
  Int)
(declare-parameterized-const @strings_num_occur_re 
  ((e String :opaque) (b RegLan :opaque))
  Int)
(declare-parameterized-const @strings_occur_index
  ((T Type :implicit) (s (Seq T)) (t (Seq T)))
  (-> Int Int))
(declare-parameterized-const @strings_occur_index_re
  ((s String :opaque) (r RegLan :opaque))
  (-> Int Int))
(declare-parameterized-const @strings_occur_len_re
  ((s String :opaque) (r RegLan :opaque))
  (-> Int Int))
(declare-parameterized-const @strings_replace_all_result
  ((T Type :implicit) (t (Seq T) :opaque))
  (-> Int (Seq T)))
(declare-parameterized-const @re_first_match_pre
  ((h String :opaque) (e RegLan :opaque))
  String)
(declare-parameterized-const @re_first_match
  ((i String :opaque) (f RegLan :opaque))
  String)
(declare-parameterized-const @re_first_match_post
  ((j String :opaque) (g RegLan :opaque))
  String)

(declare-parameterized-const @witness_string_length ((T Type))
  (-> Int Int T))
