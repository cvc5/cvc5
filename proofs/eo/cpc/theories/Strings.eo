(include "../theories/Builtin.eo")
(include "../theories/Arith.eo")

; disclaimer: >
;   The types of functions over Strings is generalized in this
;   signature to support both strings and sequences. The SMT-LIB standard only
;   accepts strings.

; The sequence type.
; disclaimer: This sort is not in SMT-LIB.
(declare-type Seq (Type))

; disclaimer: This sort is not in SMT-LIB.
(declare-type Char ())

; define: String
; return: >
;   The string type.
;   Note that string is treated as a sequence of characters in this signature.
;   This is only for the purposes of simplifying the type rules below.
;   Internally, cvc5 will never generate any proofs involving the Char type.
; disclaimer: >
;   This sort is declared to be an atomic sort in SMT-LIB. We
;   generalize it to be defined as a sequence of characters, for the purposes
;   of lifting the theory definition and proof rules for strings to sequences.
(define String () (Seq Char))

; The regular expression type.
(declare-type RegLan ())

; String literals are strings.
(declare-consts <string> String)

; Empty sequence
; disclaimer: This function is not in SMT-LIB.
(declare-const seq.empty (-> (! Type :var T) T))

; program: $mk_emptystr
; args:
; - U Type: The string-like type.
; return: The empty string of the given string-like sort U.
(program $mk_emptystr ((U Type))
  (Type) U
  (
    (($mk_emptystr String)  "")
    (($mk_emptystr (Seq U)) (seq.empty (Seq U)))
  )
)

; Core functions of strings.
(declare-const str.len 
  (-> (! Type :var T :implicit)
      (Seq T) Int))

; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-parameterized-const str.++ ((T Type))
  (-> (Seq T) (Seq T) (Seq T)) :right-assoc-nil ($mk_emptystr (Seq T)))

; Extended functions for strings.
(declare-const str.substr (-> (! Type :var T :implicit)
                              (Seq T) Int Int (Seq T)))
(declare-const str.contains (-> (! Type :var T :implicit)
                                (Seq T) (Seq T) Bool))
(declare-const str.replace (-> (! Type :var T :implicit)
                               (Seq T) (Seq T) (Seq T) (Seq T)))
(declare-const str.indexof (-> (! Type :var T :implicit)
                               (Seq T) (Seq T) Int Int))
(declare-const str.at (-> (! Type :var T :implicit)
                          (Seq T) Int (Seq T)))
(declare-const str.prefixof (-> (! Type :var T :implicit)
                                (Seq T) (Seq T) Bool))
(declare-const str.suffixof (-> (! Type :var T :implicit)
                                (Seq T) (Seq T) Bool))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.rev (-> (! Type :var T :implicit)
                           (Seq T) (Seq T)))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.unit (-> Int String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.update (-> (! Type :var T :implicit)
                              (Seq T) Int (Seq T) (Seq T)))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.to_lower (-> String String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.to_upper (-> String String))
(declare-const str.to_code (-> String Int))
(declare-const str.from_code (-> Int String))
(declare-const str.is_digit (-> String Bool))
(declare-const str.to_int (-> String Int))
(declare-const str.from_int (-> Int String))
(declare-const str.< (-> String String Bool))
(declare-const str.<= (-> String String Bool))
(declare-const str.replace_all (-> (! Type :var T :implicit)
                                   (Seq T) (Seq T) (Seq T) (Seq T)))
(declare-const str.replace_re (-> String RegLan String String))
(declare-const str.replace_re_all (-> String RegLan String String))
; disclaimer: This function is not in SMT-LIB.
(declare-const str.indexof_re (-> String RegLan Int Int))

; Regular expression operators.
(declare-const re.allchar RegLan)
(declare-const re.none RegLan)
(declare-const re.all RegLan)
(declare-const str.to_re (-> String RegLan))

; define: @re.empty
; return: The regular expression containing only the empty string.
(define @re.empty () (str.to_re ""))

(declare-const re.* (-> RegLan RegLan))
(declare-const re.+ (-> RegLan RegLan))
(declare-const re.opt (-> RegLan RegLan))
(declare-const re.comp (-> RegLan RegLan))
(declare-const re.range (-> String String RegLan))
; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const re.++ (-> RegLan RegLan RegLan) :right-assoc-nil @re.empty)
(declare-const re.inter (-> RegLan RegLan RegLan) :right-assoc-nil re.all)
; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const re.union (-> RegLan RegLan RegLan) :right-assoc-nil re.none)
(declare-const re.diff (-> RegLan RegLan RegLan))
(declare-const re.loop (-> Int Int RegLan RegLan))
(declare-const str.in_re (-> String RegLan Bool))

; Sequence-specific operators.
; disclaimer: This function is not in SMT-LIB.
(declare-const seq.unit (-> (! Type :var T :implicit) T (Seq T)))
; disclaimer: This function is not in SMT-LIB.
(declare-const seq.nth (-> (! Type :var T :implicit) (Seq T) Int (eo::ite (eo::is_eq T Char) Int T)))

; Sequence operators are automatically translated to the string operators.
; disclaimer: This function is not in SMT-LIB.
(define seq.len () str.len)
; disclaimer: This function is not in SMT-LIB.
(define seq.++ () str.++)
; disclaimer: This function is not in SMT-LIB.
(define seq.extract () str.substr)
; disclaimer: This function is not in SMT-LIB.
(define seq.contains () str.contains)
; disclaimer: This function is not in SMT-LIB.
(define seq.replace () str.replace)
; disclaimer: This function is not in SMT-LIB.
(define seq.replace_all () str.replace_all)
; disclaimer: This function is not in SMT-LIB.
(define seq.indexof () str.indexof)
; disclaimer: This function is not in SMT-LIB.
(define seq.prefixof () str.prefixof)
; disclaimer: This function is not in SMT-LIB.
(define seq.suffixof () str.suffixof)
; disclaimer: This function is not in SMT-LIB.
(define seq.rev () str.rev)
; disclaimer: This function is not in SMT-LIB.
(define seq.update () str.update)
; disclaimer: This function is not in SMT-LIB.
(define seq.at () str.at)

; Skolem functions for strings and sequences.

(declare-const @re_unfold_pos_component (-> (! String :opaque) (! RegLan :opaque) (! Int :opaque) String))
(declare-const @strings_deq_diff (-> (! Type :var T :implicit) (! (Seq T) :opaque) (! (Seq T) :opaque) Int))
(declare-const @strings_stoi_result (-> (! String :opaque) Int Int))
(declare-const @strings_stoi_non_digit (-> (! String :opaque) Int))
(declare-const @strings_itos_result (-> (! Int :opaque) Int Int))

(declare-const @strings_num_occur (-> (! Type :var T :implicit) (! (Seq T) :opaque) (! (Seq T) :opaque) Int))
(declare-const @strings_num_occur_re (-> (! String :opaque) (! RegLan :opaque) Int))
(declare-const @strings_occur_index (-> (! Type :var T :implicit) (! (Seq T) :opaque) (! (Seq T) :opaque) Int Int))
(declare-const @strings_occur_index_re (-> (! String :opaque) (! RegLan :opaque) Int Int))
(declare-const @strings_occur_len_re (-> (! String :opaque) (! RegLan :opaque) Int Int))

(declare-const @strings_replace_all_result (-> (! Type :var T :implicit) (! (Seq T) :opaque) Int (Seq T)))

(declare-const @re_first_match_pre (-> (! String :opaque) (! RegLan :opaque) String))
(declare-const @re_first_match (-> (! String :opaque) (! RegLan :opaque) String))
(declare-const @re_first_match_post (-> (! String :opaque) (! RegLan :opaque) String))


