(include "../programs/Utils.eo")

; Note that the Bool sort is native to Eunoia

(declare-parameterized-const ite ((A Type :implicit)) (-> Bool A A A))
(declare-const not (-> Bool Bool))

; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const or (-> Bool Bool Bool) :right-assoc-nil false)

; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const and (-> Bool Bool Bool) :right-assoc-nil true)

(declare-const => (-> Bool Bool Bool) :right-assoc)

(declare-const xor (-> Bool Bool Bool) :left-assoc)

(declare-parameterized-const = ((A Type :implicit)) (-> A A Bool) :chainable and)

; program: $get_lambda_type
; args:
; - L List: The list of variables of the lambda to process.
; - B Type: The type of the body of the lambda.
; return: >
;   The type of a lambda having the list of variables L and
;   body type B.
(program $get_lambda_type ((x @List) (xs @List :list) (B Type))
  (@List Type) Type
  (
    (($get_lambda_type (@list x xs) B) (-> (eo::typeof x) ($get_lambda_type xs B)))
    (($get_lambda_type @list.nil B)    B)
  )
)

; disclaimer: this function is not in SMT-LIB.
(declare-parameterized-const lambda ((B Type :implicit) (L @List)) (-> B ($get_lambda_type L B)) :binder @list)

(declare-parameterized-const distinct ((A Type :implicit)) (-> A A Bool) :pairwise and)

; The purification skolem.
(declare-parameterized-const @purify ((A Type :implicit) (t A :opaque)) A)
