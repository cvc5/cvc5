(include "../programs/Utils.eo")

; Note that the Bool sort is native to Eunoia

(declare-parameterized-const ite ((A Type :implicit)) (-> Bool A A A))
(declare-const not (-> Bool Bool))

; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const or (-> Bool Bool Bool) :right-assoc-nil false)

; disclaimer: >
;   This function is declared in SMT-LIB to be :left-assoc. We
;   declare it to be :right-assoc-nil to model cvc5's treatment of variadic
;   functions.
(declare-const and (-> Bool Bool Bool) :right-assoc-nil true)

(declare-const => (-> Bool Bool Bool) :right-assoc)

(declare-const xor (-> Bool Bool Bool) :left-assoc)

(declare-parameterized-const = ((A Type :implicit)) (-> A A Bool) :chainable and)

; program: $get_lambda_type
; args:
; - V @List: On the initial call to this method, this is a singleton list that
;            is the expected type of the first argument.
; - L @List: The list of variables of the lambda to process.
; - B Type: The type of the body of the lambda.
; return: >
;   The type of a lambda having the list of variables L and
;   body type B.
; note: This is a helper for the type of lambda below.
(program $get_lambda_type ((x @List) (xs @List :list) (B Type) (T Type))
  :signature (@List @List Type) Type
  (
  (($get_lambda_type (@list T) (@list x xs) B)
     (eo::requires (eo::typeof x) T ($get_lambda_type @list.nil xs B)))
  (($get_lambda_type @list.nil (@list x xs) B)
     (-> (eo::typeof x) ($get_lambda_type @list.nil xs B)))
  (($get_lambda_type @list.nil @list.nil B) B)
  )
)

; disclaimer: this function is not in SMT-LIB.
; note: >
;   The type rule here expects an explicit list L, then an argument B that is
;   the body of the lambda. The return type is a function (-> T ...) where
;   T is the type of the first argument of L. Additional function argument
;   types are based on the remainder of the list L based on the side condition
;   $get_lambda_type above. Note this type rule implies that lambdas must have
;   a non-empty list to be well typed.
(declare-parameterized-const lambda ((B Type :implicit) (T Type :implicit) (L @List))
  (-> B (-> T ($get_lambda_type (@list T) L B))) :binder @list)

(declare-parameterized-const distinct ((A Type :implicit)) (-> A A Bool) :pairwise and)

; The purification skolem.
(declare-parameterized-const @purify ((A Type :implicit) (t A :opaque)) A)
