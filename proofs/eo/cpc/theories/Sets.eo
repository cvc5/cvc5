(include "../programs/Utils.eo")
(include "../theories/Builtin.eo")
(include "../theories/Arith.eo")
(include "../theories/Datatypes.eo")

; disclaimer: >
;   This sort is not in the SMT-LIB standard. All further
;   function symbols over this sort are also not part of the SMT-LIB standard.
(declare-type Set (Type))

; Constants for the theory of sets.
; note: type rule does not check the type is set.
(declare-const set.empty (-> (! Type :var T) T))

; Operators for the theory of sets.
(declare-const set.singleton (-> (! Type :var T :implicit) T (Set T)))
(declare-const set.union (-> (! Type :var T :implicit) (Set T) (Set T) (Set T)))
(declare-const set.inter (-> (! Type :var T :implicit) (Set T) (Set T) (Set T)))
(declare-const set.minus (-> (! Type :var T :implicit) (Set T) (Set T) (Set T)))
(declare-const set.member (-> (! Type :var T :implicit) T (Set T) Bool))
(declare-const set.subset (-> (! Type :var T :implicit) (Set T) (Set T) Bool))
(declare-const set.choose (-> (! Type :var T :implicit) (Set T) T))
(declare-const set.is_empty (-> (! Type :var T :implicit) (Set T) Bool))
(declare-const set.is_singleton (-> (! Type :var T :implicit) (Set T) Bool))
(declare-const set.insert (-> (! Type :var T :implicit) @List (Set T) (Set T)))

; Skolems for the theory of sets.
(declare-const @sets_deq_diff (-> (! Type :var T :implicit) (! (Set T) :opaque) (! (Set T) :opaque) T))
