name: Install dependencies
description: Install necessary dependencies on the target system
inputs:
  with-documentation:
    default: false
  with-python-bindings:
    default: false
  with-python-packaging:
    default: false
  windows-build:
    default: false
    type: boolean
runs:
  using: composite
  steps:
    - name: Install Linux software
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "::group::Install Linux software"
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          libbsd-dev \
          libcln-dev \
          libedit-dev \
          libgmp-dev \
          libtinfo-dev \
          flex \
          libfl-dev \
          flexc++
        python3 -m pip install --user pexpect setuptools toml
        # Make ImageVersion accessible as env.image_version. Environment
        # variables of the runner are not automatically imported:
        #
        # https://github.com/actions/runner/blob/master/docs/adrs/0278-env-context.md#dont-populate-the-env-context-with-environment-variables-from-runner-machine
        echo "SED=sed" >> $GITHUB_ENV
        echo "CCACHE_CONFIGPATH=/home/runner/.ccache/ccache.conf" >> $GITHUB_ENV
        echo "image_version=$ImageVersion" >> $GITHUB_ENV
        echo "num_proc=$(( $(nproc) + 1 ))" >> $GITHUB_ENV
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        echo "::endgroup::"

    - name: Install software for cross-compiling for Windows
      # Boolean inputs are actually strings:
      # https://github.com/actions/runner/issues/1483
      if: inputs.windows-build == 'true'
      shell: bash
      run: |
        echo "::group::Install software for cross-compiling for Windows"
        sudo apt-get update
        sudo apt-get install -y \
          mingw-w64

        # cvc5 requires the POSIX version of MinGW to implement the time limit
        # using threads
        sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
        sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
        echo "::endgroup::"

    # Note: macOS comes with a libedit; it does not need to brew-installed
    - name: Install macOS software
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "::group::Install macOS software"
        brew update --quiet
        brew install \
          ccache \
          cln \
          gmp \
          pkgconfig \
          flex \
          gnu-sed
        python3 -m pip install --user pexpect setuptools toml
        # Make ImageVersion accessible as env.image_version. Environment
        # variables of the runner are not automatically imported:
        #
        # https://github.com/actions/runner/blob/master/docs/adrs/0278-env-context.md#dont-populate-the-env-context-with-environment-variables-from-runner-machine
        echo "SED=gsed" >> $GITHUB_ENV
        echo "CCACHE_CONFIGPATH=/Users/runner/Library/Preferences/ccache/ccache.conf" >> $GITHUB_ENV
        echo "image_version=$ImageVersion" >> $GITHUB_ENV
        echo "num_proc=$(( $(sysctl -n hw.logicalcpu) + 1 ))" >> $GITHUB_ENV
        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        echo "::endgroup::"

    - name: Install software for Python bindings
      if: inputs.with-python-bindings == 'true'
      shell: bash
      run: |
        echo "::group::Install software for Python bindings"
        python3 -m pip install -q --upgrade pip
        python3 -m pip install --user pytest scikit-build
        python3 -m pytest --version
        python3 -m pip install --user Cython==0.29.*
        # Add binary path of user site-packages to PATH
        echo "$(python3 -m site --user-base)/bin" >> $GITHUB_PATH
        echo "::endgroup::"

    - name: Install software for Python packaging
      if: inputs.with-python-packaging == 'true'
      shell: bash
      run: |
        echo "::group::Install software for Python packaging"
        python3 -m pip install -q --upgrade pip
        python3 -m pip install --user twine
        python3 -m pip install --user -U urllib3 requests
        echo "::endgroup::"
    
    - name: Install software for documentation
      if: inputs.with-documentation == 'true'
      shell: bash
      run: |
        echo "::group::Install software for documentation"
        sudo apt-get install -y doxygen python3-docutils python3-jinja2
        python3 -m pip install --user \
          sphinxcontrib-bibtex sphinx-tabs sphinx-rtd-theme breathe \
          sphinxcontrib-programoutput
        echo "::endgroup::"
