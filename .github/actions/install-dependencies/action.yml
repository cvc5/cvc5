name: Install dependencies
description: Install necessary dependencies on the target system
inputs:
  with-documentation:
    default: false
  with-python-bindings:
    default: false
  with-python-packaging:
    default: false
  windows-build:
    default: false
    type: boolean
  shell:
    default: bash
runs:
  using: composite
  steps:
    - name: Install Linux software
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Install Linux software"
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          libbsd-dev \
          libcln-dev \
          libedit-dev \
          libgmp-dev \
          libtinfo-dev \
          libfl-dev
        echo "SED=sed" >> $GITHUB_ENV
        echo "CCACHE_CONFIGPATH=/home/runner/.ccache/ccache.conf" >> $GITHUB_ENV
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        echo "::endgroup::"

    - name: Install software for cross-compiling for Windows
      # Boolean inputs are actually strings:
      # https://github.com/actions/runner/issues/1483
      if: runner.os == 'Linux' && inputs.windows-build == 'true'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Install software for cross-compiling for Windows"
        sudo apt-get update
        sudo apt-get install -y \
          mingw-w64

        # cvc5 requires the POSIX version of MinGW to implement the time limit
        # using threads
        sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
        sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
        echo "::endgroup::"

    - name: Install Windows software
      if: runner.os == 'Windows' && inputs.windows-build == 'true'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: MINGW64
        path-type: inherit
        install: |
          make
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gmp

    - name: Set up num_proc variable for Linux and Windows
      if: runner.os == 'Linux' || runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Set up num_proc variable for Linux and Windows"
        echo "num_proc=$(( $(nproc) + 1 ))" >> $GITHUB_ENV
        echo "::endgroup::"

    # Note: macOS comes with a libedit; it does not need to brew-installed
    - name: Install macOS software
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Install macOS software"
        brew config
        brew untap homebrew/core homebrew/cask
        brew config

        brew install \
          ccache \
          gmp \
          pkgconfig \
          gnu-sed
        echo "SED=gsed" >> $GITHUB_ENV
        echo "CCACHE_CONFIGPATH=/Users/runner/Library/Preferences/ccache/ccache.conf" >> $GITHUB_ENV
        echo "num_proc=$(( $(sysctl -n hw.logicalcpu) + 1 ))" >> $GITHUB_ENV
        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        echo "::endgroup::"

    - name: Install Python modules for building and testing
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Install Python modules for building and testing"
        python3 -m pip install --user -r contrib/requirements_build.txt
        python3 -m pip install --user pexpect # For interactive shell tests
        echo "::endgroup::"

    - name: Install software for Python bindings
      if: inputs.with-python-bindings == 'true'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Install software for Python bindings"
        python3 -m pip install -q --upgrade pip
        python3 -m pip install --user -r contrib/requirements_python_dev.txt
        # Add binary path of user site-packages to PATH
        echo "$(python3 -m site --user-base)/bin" >> $GITHUB_PATH
        echo "::endgroup::"

    - name: Install software for Python packaging
      if: inputs.with-python-packaging == 'true'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Install software for Python packaging"
        python3 -m pip install -q --upgrade pip
        python3 -m pip install --user twine
        python3 -m pip install --user -U urllib3 requests
        echo "::endgroup::"
    
    - name: Install software for documentation
      if: inputs.with-documentation == 'true'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Install software for documentation"
        sudo apt-get install -y doxygen python3-docutils python3-jinja2
        python3 -m pip install --user \
          sphinx==7.1.2 \
          sphinxcontrib-bibtex==2.5.0 sphinx-tabs==3.4.1 sphinx-rtd-theme==1.3.0 breathe==4.35.0 \
          sphinxcontrib-programoutput==0.17
        echo "::endgroup::"
