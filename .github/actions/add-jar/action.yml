name: Add self-contained JAR with the cvc5 Java bindings
description: |
  Creates a JAR that includes the cvc5 Java bindings
  along with the necessary native libraries.
inputs:
  install-path:
    description: path to the directory with installed artifacts
  jar-libs-dir:
    description: name of the directory that will contain the libraries within the JAR
  jar-name:
    description: target name of the JAR
  github-token-latest:
    description: token to upload JAR to latest
  github-token-release:
    description: token to upload JAR to release
  shell:
    default: bash
runs:
  using: composite
  steps:
    - name: Create JAR contents (Linux)
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Create JAR contents (Linux)"
        mkdir ${{ inputs.jar-libs-dir }}
        cd ${{ inputs.jar-libs-dir }}
        cat > filenames.txt <<EOF
        libgmp.so.10
        libpoly.so.0
        libpolyxx.so.0
        libcvc5.so.1
        libcvc5parser.so.1
        libcvc5jni.so
        EOF
        cat filenames.txt | xargs -I {} cp ${{ inputs.install-path }}/lib/{} .
        echo "::endgroup::"

    - name: Create JAR contents (macOS)
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Create JAR contents (macOS)"
        mkdir ${{ inputs.jar-libs-dir }}
        cd ${{ inputs.jar-libs-dir }}
        cat > filenames.txt <<EOF
        libgmp.10.dylib
        libpoly.0.dylib
        libpolyxx.0.dylib
        libcvc5.1.dylib
        libcvc5parser.1.dylib
        libcvc5jni.dylib
        EOF
        cat filenames.txt | xargs -I {} cp ${{ inputs.install-path }}/lib/{} .
        echo "::endgroup::"

    - name: Create JAR contents (Windows)
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Create JAR contents (Windows)"
        mkdir ${{ inputs.jar-libs-dir }}
        cd ${{ inputs.jar-libs-dir }}
        cat > filenames.txt <<EOF
        libwinpthread-1.dll
        libgcc_s_seh-1.dll
        libstdc++-6.dll
        libpoly.dll
        libpolyxx.dll
        libcvc5.dll
        libcvc5parser.dll
        cvc5jni.dll
        EOF
        cat filenames.txt | xargs -I {} cp ${{ inputs.install-path }}/bin/{} .
        echo "::endgroup::"

    - name: Create JAR
      shell: ${{ inputs.shell }}
      run: |
        echo "::group::Create JAR"
        unzip ${{ inputs.install-path }}/share/java/cvc5.jar
        jar cf ${{ inputs.jar-name }}.jar AUTHORS COPYING licenses io ${{ inputs.jar-libs-dir }}
        echo "::endgroup::"

    - name: Test JAR
      shell: ${{ inputs.shell }}
      run: |
        javac -cp "${{ inputs.jar-name }}.jar" ./examples/api/java/QuickStart.java -d .
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          java -cp "${{ inputs.jar-name }}.jar;." QuickStart
        else
          java -cp "${{ inputs.jar-name }}.jar:." QuickStart
        fi
        rm QuickStart.class

    - name: Store to latest
      if: github.ref == 'refs/heads/main'
      uses: ./.github/actions/store-to-latest
      with:
        asset-filename: ${{ inputs.jar-name }}.jar
        github-token: ${{ inputs.github-token-latest }}

    - name: Store to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: ./.github/actions/store-to-release
      with:
        asset-filename: ${{ inputs.jar-name }}.jar
        github-token: ${{ inputs.github-token-release }}
