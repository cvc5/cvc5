#####################
## CMakeLists.txt
## Top contributors (to current version):
##   Mathias Preiner, Aina Niemetz, Gereon Kremer
## This file is part of the CVC4 project.
## Copyright (c) 2009-2021 by the authors listed in the file AUTHORS
## in the top-level source directory and their institutional affiliations.
## All rights reserved.  See the file COPYING in the top-level source
## directory for licensing information.
##
cmake_minimum_required(VERSION 3.9)

#-----------------------------------------------------------------------------#
# Project configuration

project(cvc4)

include(GNUInstallDirs)

set(CVC4_MAJOR   1) # Major component of the version of CVC4.
set(CVC4_MINOR   9) # Minor component of the version of CVC4.
set(CVC4_RELEASE 0) # Release component of the version of CVC4.

# Extraversion component of the version of CVC4.
set(CVC4_EXTRAVERSION "-prerelease")

# Shared library versioning. Increment SOVERSION for every new CVC4 release.
set(CVC4_SOVERSION 7)

# Full release string for CVC4.
if(CVC4_RELEASE)
  set(CVC4_RELEASE_STRING
      "${CVC4_MAJOR}.${CVC4_MINOR}.${CVC4_RELEASE}${CVC4_EXTRAVERSION}")
else()
  set(CVC4_RELEASE_STRING "${CVC4_MAJOR}.${CVC4_MINOR}${CVC4_EXTRAVERSION}")
endif()

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
set(CMAKE_C_STANDARD 99)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

# Generate compile_commands.json, which can be used for various code completion
# plugins.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

#-----------------------------------------------------------------------------#
# Policies

# Required for FindGLPK since it sets CMAKE_REQUIRED_LIBRARIES
if(POLICY CMP0075)
  cmake_policy(SET CMP0075 NEW)
endif()

#-----------------------------------------------------------------------------#
# Tell CMake where to find our dependencies

if(ABC_DIR)
  list(APPEND CMAKE_PREFIX_PATH "${ABC_DIR}")
endif()
if(CADICAL_DIR)
  list(APPEND CMAKE_PREFIX_PATH "${CADICAL_DIR}")
endif()
if(CRYPTOMINISAT_DIR)
  list(APPEND CMAKE_PREFIX_PATH "${CRYPTOMINISAT_DIR}")
endif()
if(GLPK_DIR)
  list(APPEND CMAKE_PREFIX_PATH "${GLPK_DIR}")
endif()
if(GMP_DIR)
  list(APPEND CMAKE_PREFIX_PATH "${GMP_DIR}")
endif()
if(KISSAT_DIR)
  list(APPEND CMAKE_PREFIX_PATH "${KISSAT_DIR}")
endif()
if(POLY_DIR)
  list(APPEND CMAKE_PREFIX_PATH "${POLY_DIR}")
endif()
if(SYMFPU_DIR)
  list(APPEND CMAKE_PREFIX_PATH "${SYMFPU_DIR}")
endif()

# By default the contrib/get-* scripts install dependencies to deps/install.
list(APPEND CMAKE_PREFIX_PATH "${PROJECT_SOURCE_DIR}/deps/install")

#-----------------------------------------------------------------------------#

include(Helpers)

#-----------------------------------------------------------------------------#
# User options

# License
option(ENABLE_GPL "Enable GPL dependencies")

# General build options
#
# >> 3-valued: IGNORE ON OFF
#    > allows to detect if set by user (default: IGNORE)
#    > only necessary for options set for build types
cvc4_option(ENABLE_ASAN           "Enable ASAN build")
cvc4_option(ENABLE_UBSAN          "Enable UBSan build")
cvc4_option(ENABLE_TSAN           "Enable TSan build")
cvc4_option(ENABLE_ASSERTIONS     "Enable assertions")
cvc4_option(ENABLE_COMP_INC_TRACK
            "Enable optimizations for incremental SMT-COMP tracks")
cvc4_option(ENABLE_DEBUG_SYMBOLS  "Enable debug symbols")
cvc4_option(ENABLE_DUMPING        "Enable dumping")
cvc4_option(ENABLE_MUZZLE         "Suppress ALL non-result output")
cvc4_option(ENABLE_STATISTICS     "Enable statistics")
cvc4_option(ENABLE_TRACING        "Enable tracing")
cvc4_option(ENABLE_UNIT_TESTING   "Enable unit testing")
cvc4_option(ENABLE_VALGRIND       "Enable valgrind instrumentation")
cvc4_option(ENABLE_SHARED         "Build as shared library")
cvc4_option(ENABLE_STATIC_BINARY
            "Build static binaries with statically linked system libraries")
# >> 2-valued: ON OFF
#    > for options where we don't need to detect if set by user (default: OFF)
option(ENABLE_BEST             "Enable dependencies known to give best performance")
option(ENABLE_COVERAGE         "Enable support for gcov coverage testing")
option(ENABLE_DEBUG_CONTEXT_MM "Enable the debug context memory manager")
option(ENABLE_PROFILING        "Enable support for gprof profiling")

# Optional dependencies
#
# >> 3-valued: IGNORE ON OFF
#    > allows to detect if set by user (default: IGNORE)
#    > only necessary for options set for ENABLE_BEST
cvc4_option(USE_ABC           "Use ABC for AIG bit-blasting")
cvc4_option(USE_CADICAL       "Use CaDiCaL SAT solver")
cvc4_option(USE_CLN           "Use CLN instead of GMP")
cvc4_option(USE_CRYPTOMINISAT "Use CryptoMiniSat SAT solver")
cvc4_option(USE_GLPK          "Use GLPK simplex solver")
cvc4_option(USE_KISSAT        "Use Kissat SAT solver")
cvc4_option(USE_EDITLINE      "Use Editline for better interactive support")
# >> 2-valued: ON OFF
#    > for options where we don't need to detect if set by user (default: OFF)
option(USE_POLY               "Use LibPoly for polynomial arithmetic")
option(USE_SYMFPU             "Use SymFPU for floating point support")
option(USE_PYTHON2            "Force Python 2 (deprecated)")

# Custom install directories for dependencies
# If no directory is provided by the user, we first check if the dependency was
# installed via the corresponding contrib/get-* script and if not found, we
# check the intalled system version. If the user provides a directory we
# immediately fail if the dependency was not found at the specified location.
set(ABC_DIR           "" CACHE STRING "Set ABC install directory")
set(CADICAL_DIR       "" CACHE STRING "Set CaDiCaL install directory")
set(CRYPTOMINISAT_DIR "" CACHE STRING "Set CryptoMiniSat install directory")
set(GLPK_DIR          "" CACHE STRING "Set GLPK install directory")
set(GMP_DIR           "" CACHE STRING "Set GMP install directory")
set(KISSAT_DIR        "" CACHE STRING "Set Kissat install directory")
set(POLY_DIR          "" CACHE STRING "Set LibPoly install directory")
set(SYMFPU_DIR        "" CACHE STRING "Set SymFPU install directory")

# Prepend binaries with prefix on make install
set(PROGRAM_PREFIX    "" CACHE STRING "Program prefix on make install")

# Supprted language bindings based on new C++ API
option(BUILD_BINDINGS_PYTHON "Build Python bindings based on new C++ API ")
option(BUILD_BINDINGS_JAVA "Build Java bindings based on new C++ API ")

# Build limitations
option(BUILD_LIB_ONLY         "Only build the library")

#-----------------------------------------------------------------------------#
# Internal cmake variables

set(OPTIMIZATION_LEVEL 3)
set(GPL_LIBS "")

#-----------------------------------------------------------------------------#
# Determine number of threads available, used to configure (default) parallel
# execution of custom test targets (can be overriden with ARGS=-jN).

include(ProcessorCount)
ProcessorCount(CTEST_NTHREADS)
if(CTEST_NTHREADS EQUAL 0)
  set(CTEST_NTHREADS 1)
endif()

#-----------------------------------------------------------------------------#
# Build types

# Note: Module CodeCoverage requires the name of the debug build to conform
#       to cmake standards (first letter uppercase).
set(BUILD_TYPES Production Debug Testing Competition)

if(ENABLE_ASAN OR ENABLE_UBSAN OR ENABLE_TSAN)
  set(CMAKE_BUILD_TYPE Debug)
endif()

# Set the default build type to Production
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE
      Production CACHE STRING "Options are: ${BUILD_TYPES}" FORCE)
  # Provide drop down menu options in cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${BUILD_TYPES})
endif()

# Check if specified build type is valid.
list(FIND BUILD_TYPES ${CMAKE_BUILD_TYPE} FOUND_BUILD_TYPE)
if(${FOUND_BUILD_TYPE} EQUAL -1)
  message(FATAL_ERROR
    "'${CMAKE_BUILD_TYPE}' is not a valid build type. "
    "Available builds are: ${BUILD_TYPES}")
endif()

message(STATUS "Building ${CMAKE_BUILD_TYPE} build")
include(Config${CMAKE_BUILD_TYPE})

#-----------------------------------------------------------------------------#
# Compiler flags

add_check_c_cxx_flag("-O${OPTIMIZATION_LEVEL}")
add_check_c_cxx_flag("-Wall")
add_check_c_cxx_flag("-Wno-unused-private-field")
add_check_c_flag("-fexceptions")
add_check_cxx_flag("-Wsuggest-override")
add_check_cxx_flag("-Wnon-virtual-dtor")
add_check_c_cxx_flag("-Wimplicit-fallthrough")
add_check_c_cxx_flag("-Wshadow")

# Temporarily disable -Wclass-memaccess to suppress 'no trivial copy-assignment'
# cdlist.h warnings. Remove when fixed.
add_check_cxx_flag("-Wno-class-memaccess")

if (WIN32)
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--stack,100000000")
endif ()

#-----------------------------------------------------------------------------#
# Use ld.gold if available

execute_process(COMMAND ${CMAKE_C_COMPILER}
                -fuse-ld=gold
                -Wl,--version ERROR_QUIET OUTPUT_VARIABLE LD_VERSION)
if ("${LD_VERSION}" MATCHES "GNU gold")
  string(APPEND CMAKE_EXE_LINKER_FLAGS " -fuse-ld=gold")
  string(APPEND CMAKE_SHARED_LINKER_FLAGS " -fuse-ld=gold")
  string(APPEND CMAKE_MODULE_LINKER_FLAGS " -fuse-ld=gold")
  message(STATUS "Using GNU gold linker.")
endif ()

#-----------------------------------------------------------------------------#
# Option defaults (three-valued options (cvc4_option(...)))
#
# These options are only set if their value is IGNORE. Otherwise, the user
# already set the option, which we don't want to overwrite.

if(ENABLE_STATIC_BINARY)
  cvc4_set_option(ENABLE_SHARED OFF)
else()
  cvc4_set_option(ENABLE_SHARED ON)
endif()

#-----------------------------------------------------------------------------#

# Only enable unit testing if assertions are enabled. Otherwise, unit tests
# that expect AssertionException to be thrown will fail.
if(NOT ENABLE_ASSERTIONS)
  message(WARNING "Disabling unit tests since assertions are disabled.")
  set(ENABLE_UNIT_TESTING OFF)
endif()

#-----------------------------------------------------------------------------#
# Shared/static libraries
#
# This needs to be set before any find_package(...) command since we want to
# search for static libraries with suffix .a.

if(ENABLE_SHARED)
  set(BUILD_SHARED_LIBS ON)
  if(ENABLE_STATIC_BINARY)
    set(ENABLE_STATIC_BINARY OFF)
    message(WARNING "Disabling static binary since shared build is enabled.")
  endif()

  # Set visibility to default if unit tests are enabled
  if(ENABLE_UNIT_TESTING)
    set(CMAKE_CXX_VISIBILITY_PRESET default)
    set(CMAKE_VISIBILITY_INLINES_HIDDEN 0)
  endif()

  # Embed the installation prefix as an RPATH in the executable such that the
  # linker can find our libraries (such as libcvc4parser) when executing the
  # cvc4 binary. This is for example useful when installing CVC4 with a custom
  # prefix on macOS (e.g. when using homebrew in a non-standard directory). If
  # we do not set this option, then the linker will not be able to find the
  # required libraries when trying to run CVC4.
  #
  # Also embed the installation prefix of the installed contrib libraries as an
  # RPATH. This allows to install a dynamically linked binary that depends on
  # dynamically linked libraries. This is dangerous, as the installed binary
  # breaks if the contrib library is removed or changes in other ways, we thus
  # print a big warning and only allow if installing to a custom installation
  # prefix.
  #
  # More information on RPATH in CMake:
  # https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/RPATH-handling
  set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR};${PROJECT_SOURCE_DIR}/deps/install/lib")
else()
  # When building statically, we *only* want static archives/libraries
  if (WIN32)
      set(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
  else()
      set(CMAKE_FIND_LIBRARY_SUFFIXES .a)
  endif()
  set(BUILD_SHARED_LIBS OFF)
  cvc4_set_option(ENABLE_STATIC_BINARY ON)

  # Never build unit tests as static binaries, otherwise we'll end up with
  # ~300MB per unit test.
  if(ENABLE_UNIT_TESTING)
    message(WARNING "Disabling unit tests since static build is enabled.")
    set(ENABLE_UNIT_TESTING OFF)
  endif()

  if (BUILD_BINDINGS_PYTHON)
    message(FATAL_ERROR "Building Python bindings is not possible "
                        "when building statically")
  endif()
endif()

#-----------------------------------------------------------------------------#
# Enable the ctest testing framework

# This needs to be enabled here rather than in subdirectory test in order to
# allow calling ctest from the root build directory.
enable_testing()

#-----------------------------------------------------------------------------#
# Check options, find packages and configure build.

if(USE_PYTHON2)
  find_package(PythonInterp 2.7 REQUIRED)
else()
  find_package(PythonInterp 3 REQUIRED)
endif()

find_package(GMP REQUIRED)

if(ENABLE_ASAN)
  # -fsanitize=address requires CMAKE_REQUIRED_FLAGS to be explicitely set,
  # otherwise the -fsanitize=address check will fail while linking.
  set(CMAKE_REQUIRED_FLAGS -fsanitize=address)
  add_required_c_cxx_flag("-fsanitize=address")
  unset(CMAKE_REQUIRED_FLAGS)
  add_required_c_cxx_flag("-fno-omit-frame-pointer")
  add_check_c_cxx_flag("-fsanitize-recover=address")
endif()

if(ENABLE_UBSAN)
  add_required_c_cxx_flag("-fsanitize=undefined")
  add_definitions(-DCVC4_USE_UBSAN)
endif()

if(ENABLE_TSAN)
  # -fsanitize=thread requires CMAKE_REQUIRED_FLAGS to be explicitely set,
  # otherwise the -fsanitize=thread check will fail while linking.
  set(CMAKE_REQUIRED_FLAGS -fsanitize=thread)
  add_required_c_cxx_flag("-fsanitize=thread")
  unset(CMAKE_REQUIRED_FLAGS)
endif()

if(ENABLE_ASSERTIONS)
  add_definitions(-DCVC4_ASSERTIONS)
else()
  add_definitions(-DNDEBUG)
endif()

if(ENABLE_COVERAGE)
  include(CodeCoverage)
  APPEND_COVERAGE_COMPILER_FLAGS()
  add_definitions(-DCVC4_COVERAGE)
  # Note: The ctest command returns a non-zero exit code if tests fail or run
  # into a timeout. As a consequence, the coverage report is not generated. To
  # prevent this we always return with exit code 0 after the ctest command has
  # finished.
  setup_target_for_coverage_gcovr_html(
    NAME coverage
    EXECUTABLE
      ctest -j${CTEST_NTHREADS} -LE "example"
        --output-on-failure $$ARGS || exit 0
    DEPENDS
      build-tests)
endif()

if(ENABLE_DEBUG_CONTEXT_MM)
  add_definitions(-DCVC4_DEBUG_CONTEXT_MEMORY_MANAGER)
endif()

if(ENABLE_DEBUG_SYMBOLS)
  add_check_c_cxx_flag("-ggdb3")
endif()

if(ENABLE_COMP_INC_TRACK)
  add_definitions(-DCVC4_SMTCOMP_APPLICATION_TRACK)
endif()

if(ENABLE_MUZZLE)
  add_definitions(-DCVC4_MUZZLE)
endif()

if(ENABLE_DUMPING)
  add_definitions(-DCVC4_DUMPING)
endif()

if(ENABLE_PROFILING)
  add_definitions(-DCVC4_PROFILING)
  add_check_c_cxx_flag("-pg")
endif()

if(ENABLE_TRACING)
  add_definitions(-DCVC4_TRACING)
endif()

if(ENABLE_STATISTICS)
  add_definitions(-DCVC4_STATISTICS_ON)
endif()

if(ENABLE_VALGRIND)
  find_package(Valgrind REQUIRED)
  add_definitions(-DCVC4_VALGRIND)
endif()

if(USE_ABC)
  find_package(ABC REQUIRED)
  add_definitions(-DCVC4_USE_ABC ${ABC_ARCH_FLAGS})
endif()

if(USE_CADICAL)
  find_package(CaDiCaL REQUIRED)
  add_definitions(-DCVC4_USE_CADICAL)
endif()

if(USE_CLN)
  set(GPL_LIBS "${GPL_LIBS} cln")
  find_package(CLN 1.2.2 REQUIRED)
  set(CVC4_USE_CLN_IMP 1)
  set(CVC4_USE_GMP_IMP 0)
else()
  set(CVC4_USE_CLN_IMP 0)
  set(CVC4_USE_GMP_IMP 1)
endif()

if(USE_CRYPTOMINISAT)
  # CryptoMiniSat requires pthreads support
  set(THREADS_PREFER_PTHREAD_FLAG ON)
  find_package(Threads REQUIRED)
  if(THREADS_HAVE_PTHREAD_ARG)
    add_c_cxx_flag(-pthread)
  endif()
  find_package(CryptoMiniSat REQUIRED)
  add_definitions(-DCVC4_USE_CRYPTOMINISAT)
endif()

if(USE_GLPK)
  set(GPL_LIBS "${GPL_LIBS} glpk")
  find_package(GLPK REQUIRED)
  add_definitions(-DCVC4_USE_GLPK)
endif()

if(USE_KISSAT)
  find_package(Kissat REQUIRED)
  add_definitions(-DCVC4_USE_KISSAT)
endif()

if(USE_POLY)
  find_package(Poly REQUIRED)
  add_definitions(-DCVC4_USE_POLY)
  set(CVC4_USE_POLY_IMP 1)
else()
  set(CVC4_USE_POLY_IMP 0)
endif()

if(USE_EDITLINE)
  find_package(Editline REQUIRED)
  set(HAVE_LIBEDITLINE 1)
  if(Editline_COMPENTRY_FUNC_RETURNS_CHARPTR)
    set(EDITLINE_COMPENTRY_FUNC_RETURNS_CHARP 1)
  endif()
endif()

if(USE_SYMFPU)
  find_package(SymFPU REQUIRED)
  add_definitions(-DCVC4_USE_SYMFPU)
  set(CVC4_USE_SYMFPU 1)
else()
  set(CVC4_USE_SYMFPU 0)
endif()

if(GPL_LIBS)
  if(NOT ENABLE_GPL)
    message(FATAL_ERROR
      "Bad configuration detected: BSD-licensed code only, but also requested "
      "GPLed libraries: ${GPL_LIBS}")
  endif()
  set(CVC4_GPL_DEPS 1)
endif()

#-----------------------------------------------------------------------------#
# Provide targets to inspect iwyu suggestions

include(IWYU)

#-----------------------------------------------------------------------------#
# Generate CVC4's cvc4autoconfig.h header

include(ConfigureCVC4)
if(NOT ENABLE_SHARED)
  set(CVC4_STATIC_BUILD ON)
endif()
configure_file(cvc4autoconfig.h.in cvc4autoconfig.h)
unset(CVC4_STATIC_BUILD)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

#-----------------------------------------------------------------------------#
# Add subdirectories

add_subdirectory(doc)
add_subdirectory(src)
add_subdirectory(test)

if(BUILD_BINDINGS_PYTHON)
  set(BUILD_BINDINGS_PYTHON_VERSION ${PYTHON_VERSION_MAJOR})
  add_subdirectory(src/api/python)
endif()

if(BUILD_BINDINGS_JAVA)
  add_subdirectory(src/api/java)
  message(WARNING "Java API is currently under development.")
endif()

#-----------------------------------------------------------------------------#
# Package configuration
#
# Export CVC4 targets to support find_package(CVC4) in other cmake projects.

include(CMakePackageConfigHelpers)

# If we install a dynamically linked binary that also uses dynamically used
# libraries from deps/install/lib, we need to be cautious. Changing these
# shared libraries from deps/install/lib most probably breaks the binary.
# We only allow such an installation for custom installation prefixes
# (in the assumption that only reasonably experienced users use this and
# also that custom installation prefixes are not used for longer periods of
# time anyway). Also, we print a big warning with further instructions.
if(NOT ENABLE_STATIC_BINARY)
  # Get the libraries that cvc4 links against
  get_target_property(libs cvc4 INTERFACE_LINK_LIBRARIES)
  set(LIBS_SHARED_FROM_DEPS "")
  foreach(lib ${libs})
    # Filter out those that are linked dynamically and come from deps/install
    if(lib MATCHES ".*/deps/install/lib/.*\.so")
      list(APPEND LIBS_SHARED_FROM_DEPS ${lib})
    endif()
  endforeach()
  list(LENGTH LIBS_SHARED_FROM_DEPS list_len)
  # Check if we actually use such "dangerous" libraries
  if(list_len GREATER 0)
    # Print a generic warning
    install(CODE "message(WARNING \"You are installing a dynamically linked \
    binary of CVC4 which may be a problem if you are using any dynamically \
    linked third-party library that you obtained through one of the \
    contrib/get-xxx scripts. The binary uses the rpath mechanism to find these \
    locally, hence executing such a contrib script removing the \
    \\\"deps/install\\\" folder most probably breaks the installed binary! \
    Consider installing the dynamically linked dependencies on your system \
    manually or link cvc4 statically.\")")
    # Print the libraries in question
    foreach(lib ${LIBS_SHARED_FROM_DEPS})
      install(CODE "message(WARNING \"The following library is used by the cvc4 binary: ${lib}\")")
    endforeach()
    # Check if we use a custom installation prefix
    if(CMAKE_INSTALL_PREFIX STREQUAL "/usr/local")
      install(CODE "message(FATAL_ERROR \"To avoid installing a \
      soon-to-be-broken binary, system-wide installation is disabled if the \
      binary depends on locally-built shared libraries.\")")
    else()
      install(CODE "message(WARNING \"You have selected a custom install \
      directory ${CMAKE_INSTALL_PREFIX}, so we expect you understood the \
      previous warning and know what you are doing.\")")
    endif()
  endif()
endif()

install(EXPORT cvc4-targets
  FILE CVC4Targets.cmake
  NAMESPACE CVC4::
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/CVC4)

configure_package_config_file(
  ${CMAKE_SOURCE_DIR}/cmake/CVC4Config.cmake.in
  ${CMAKE_BINARY_DIR}/cmake/CVC4Config.cmake
  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/CVC4
  PATH_VARS CMAKE_INSTALL_LIBDIR
)

write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/CVC4ConfigVersion.cmake
  VERSION ${CVC4_RELEASE_STRING}
  COMPATIBILITY ExactVersion
)

install(FILES
  ${CMAKE_BINARY_DIR}/cmake/CVC4Config.cmake
  ${CMAKE_BINARY_DIR}/CVC4ConfigVersion.cmake
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/CVC4
)


#-----------------------------------------------------------------------------#
# Print build configuration

# Set colors.
if(NOT WIN32)
  string(ASCII 27 Esc)
  set(Green "${Esc}[32m")
  set(Blue "${Esc}[1;34m")
  set(ResetColor "${Esc}[m")
endif()

# Convert build type to lower case.
string(TOLOWER ${CMAKE_BUILD_TYPE} CVC4_BUILD_PROFILE_STRING)

# Get all definitions added via add_definitions.
get_directory_property(CVC4_DEFINITIONS COMPILE_DEFINITIONS)
string(REPLACE ";" " " CVC4_DEFINITIONS "${CVC4_DEFINITIONS}")

message("")
print_info("CVC4 ${CVC4_RELEASE_STRING}")
message("")
if(ENABLE_COMP_INC_TRACK)
  print_config("Build profile             " "${CVC4_BUILD_PROFILE_STRING} (incremental)")
else()
  print_config("Build profile             " "${CVC4_BUILD_PROFILE_STRING}")
endif()
message("")
print_config("GPL                       " ENABLE_GPL)
print_config("Best configuration        " ENABLE_BEST)
message("")
print_config("Assertions                " ENABLE_ASSERTIONS)
print_config("Debug symbols             " ENABLE_DEBUG_SYMBOLS)
print_config("Debug context mem mgr     " ENABLE_DEBUG_CONTEXT_MM)
message("")
print_config("Dumping                   " ENABLE_DUMPING)
print_config("Muzzle                    " ENABLE_MUZZLE)
print_config("Proofs                    " ENABLE_PROOFS)
print_config("Statistics                " ENABLE_STATISTICS)
print_config("Tracing                   " ENABLE_TRACING)
message("")
print_config("ASan                      " ENABLE_ASAN)
print_config("UBSan                     " ENABLE_UBSAN)
print_config("TSan                      " ENABLE_TSAN)
print_config("Coverage (gcov)           " ENABLE_COVERAGE)
print_config("Profiling (gprof)         " ENABLE_PROFILING)
print_config("Unit tests                " ENABLE_UNIT_TESTING)
print_config("Valgrind                  " ENABLE_VALGRIND)
message("")
print_config("Shared libs               " ENABLE_SHARED)
print_config("Static binary             " ENABLE_STATIC_BINARY)
print_config("Python bindings           " BUILD_BINDINGS_PYTHON)
print_config("Java bindings             " BUILD_BINDINGS_JAVA)
print_config("Python2                   " USE_PYTHON2)
message("")
print_config("ABC                       " USE_ABC)
print_config("CaDiCaL                   " USE_CADICAL)
print_config("CryptoMiniSat             " USE_CRYPTOMINISAT)
print_config("GLPK                      " USE_GLPK)
print_config("Kissat                    " USE_KISSAT)
print_config("LibPoly                   " USE_POLY)
message("")
print_config("Build libcvc4 only        " BUILD_LIB_ONLY)

if(CVC4_USE_CLN_IMP)
  print_config("MP library                " "cln")
else()
  print_config("MP library                " "gmp")
endif()
print_config("Editline                  " ${USE_EDITLINE})
print_config("SymFPU                    " ${USE_SYMFPU})
message("")
if(ABC_DIR)
  print_config("ABC dir                   " ${ABC_DIR})
endif()
if(CADICAL_DIR)
  print_config("CADICAL dir               " ${CADICAL_DIR})
endif()
if(CRYPTOMINISAT_DIR)
  print_config("CRYPTOMINISAT dir         " ${CRYPTOMINISAT_DIR})
endif()
if(GLPK_DIR)
  print_config("GLPK dir                  " ${GLPK_DIR})
endif()
if(GMP_DIR)
  print_config("GMP dir                   " ${GMP_DIR})
endif()
if(KISSAT_DIR)
  print_config("KISSAT dir                " ${KISSAT_DIR})
endif()
if(POLY_DIR)
  print_config("LibPoly dir               " ${POLY_DIR})
endif()
if(SYMFPU_DIR)
  print_config("SYMFPU dir                " ${SYMFPU_DIR})
endif()
message("")
print_config("CPPLAGS (-D...)" "${CVC4_DEFINITIONS}")
print_config("CXXFLAGS       " "${CMAKE_CXX_FLAGS}")
print_config("CFLAGS         " "${CMAKE_C_FLAGS}")
print_config("Linker flags   " "${CMAKE_EXE_LINKER_FLAGS}")
message("")
print_config("Install prefix " "${CMAKE_INSTALL_PREFIX}")
message("")

if(GPL_LIBS)
  message(
  "${Blue}CVC4 license: "
  "${Yellow}GPLv3 (due to optional libraries; see below)${ResetColor}"
  "\n"
  "\n"
  "Please note that CVC4 will be built against the following GPLed libraries:"
  "\n"
  "${GPL_LIBS}"
  "\n"
  "As these libraries are covered under the GPLv3, so is this build of CVC4."
  "\n"
  "CVC4 is also available to you under the terms of the (modified) BSD license."
  "\n"
  "If you prefer to license CVC4 under those terms, please configure CVC4 to"
  "\n"
  "disable all optional GPLed library dependencies (-DENABLE_BSD_ONLY=ON)."
  )
else()
  message(
  "${Blue}CVC4 license:${ResetColor} modified BSD"
  "\n"
  "\n"
  "Note that this configuration is NOT built against any GPL'ed libraries, so"
  "\n"
  "it is covered by the (modified) BSD license.  This is, however, not the best"
  "\n"
  "performing configuration of CVC4.  To build against GPL'ed libraries which"
  "\n"
  "improve CVC4's performance, re-configure with '-DENABLE_GPL -DENABLE_BEST'."
  )
endif()

if("${CMAKE_GENERATOR}" STREQUAL "Ninja")
  set(BUILD_COMMAND_NAME "ninja")
else()
  set(BUILD_COMMAND_NAME "make")
endif()

message("")
message("Now just type '${BUILD_COMMAND_NAME}', "
        "followed by '${BUILD_COMMAND_NAME} check' "
        "or '${BUILD_COMMAND_NAME} install'.")
message("")
