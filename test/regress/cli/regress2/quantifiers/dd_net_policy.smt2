; EXPECT: sat
(set-logic ALL)
(set-option :fmf-bound true)
(declare-datatype NodeMobile ((Rnode)))
(declare-datatype NodeInfra ((Bnode) (Cnode)))
(declare-datatype NodeBase ((Dnode)))
(declare-datatype Node ((mobile (mnode NodeMobile)) (infra (inode NodeInfra)) (base (bnode NodeBase))))
(define-fun R () Node (mobile Rnode))
(define-fun D () Node (base Dnode))
(declare-datatype Packet ((P1)))
(declare-datatype Channel ((Ch3)))
(declare-fun GlobalState_prcv (Node Packet Int) Bool)
(declare-datatype Action ((act_idle) (act_send (_dst Node) (_chn Channel))))
(declare-fun max_period () Int)
(assert (>= max_period 0))
(declare-fun get-action-for-time-slot (Node Int Int) Action)
(define-fun get-action ((x Node) (t Int)) Action (get-action-for-time-slot x t 0))
(define-fun get-sends ((x Node) (y Node) (p Packet) (t Int)) Bool (let ((x_act_at_t (get-action x t))) (and (ite ((_ is act_send) x_act_at_t) (and (= (_dst x_act_at_t) y)) false))))
(assert (forall ((x Node) (p Packet)) (= (GlobalState_prcv x p 0) (= x R))))
(assert (forall ((x Node) (t Int)) (=> (and (>= t 0) (< t max_period)) (and (forall ((p Packet)) (= (GlobalState_prcv x p (+ t 1)) (or (GlobalState_prcv x p t) (exists ((y Node)) (get-sends y x p t)))))))))
(assert (forall ((x Node) (y Node) (t Int)) (let ((x_act_at_t (get-action x t))) (let ((y_act_at_t (get-action y t))) (=> (and (>= t 0) (< t max_period) (not (= x y))) (=> (and ((_ is act_send) x_act_at_t) ((_ is act_send) y_act_at_t)) (not (= (_chn x_act_at_t) (_chn y_act_at_t)))))))))
(assert (GlobalState_prcv D P1 max_period))
(check-sat)
