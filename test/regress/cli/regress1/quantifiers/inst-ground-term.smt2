; COMMAND-LINE: --enum-inst
; EXPECT: unsat
(set-logic AUFLIA)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_set_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_set_bool_fun$ 0)
(declare-fun uu$ () A_set_bool_fun$)
(declare-fun eqv$ (A$) A_bool_fun$)
(declare-fun member$ (A_set$ A_set_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_set_bool_fun$ A_set$) Bool)
(declare-fun member$a (A$) A_set_bool_fun$)
(declare-fun collect$a (A_set_bool_fun$) A_set_set$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$ uu$ ?v0) (exists ((?v1 A$)) (and (= ?v0 (collect$ (eqv$ ?v1))) true))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (exists ((?v0 A_set$)) (member$ ?v0 (collect$a uu$)))) :named a1))
(assert (! (forall ((?v0 A_set_bool_fun$) (?v1 A_set$)) (=> (fun_app$ ?v0 ?v1) (member$ ?v1 (collect$a ?v0)))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$)) (=> (fun_app$a ?v0 ?v1) (fun_app$ (member$a ?v1) (collect$ ?v0)))) :named a3))
(check-sat)
