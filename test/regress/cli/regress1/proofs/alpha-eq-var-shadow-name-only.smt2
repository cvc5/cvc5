; EXPECT: unsat
(set-logic AUFLIA)
(declare-sort Index$ 0)
(declare-sort State1$ 0)
(declare-sort State2$ 0)
(declare-sort Index_set$ 0)
(declare-sort State1_set$ 0)
(declare-sort State2_set$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort Index_bool_fun$ 0)
(declare-sort Index_behaviour$ 0)
(declare-sort State1_bool_fun$ 0)
(declare-sort State2_bool_fun$ 0)
(declare-sort Index_index_prod$ 0)
(declare-sort State1_behaviour$ 0)
(declare-sort State2_behaviour$ 0)
(declare-sort State1_state1_fun$ 0)
(declare-sort State1_state2_fun$ 0)
(declare-sort State2_state1_fun$ 0)
(declare-sort State2_state2_fun$ 0)
(declare-sort Index_index_prod_set$ 0)
(declare-sort Bool_bool_bool_fun_fun$ 0)
(declare-sort Index_behaviour_bool_fun$ 0)
(declare-sort Index_index_bool_fun_fun$ 0)
(declare-sort Index_index_prod_bool_fun$ 0)
(declare-sort State1_behaviour_bool_fun$ 0)
(declare-sort State2_behaviour_bool_fun$ 0)
(declare-sort State1_behaviour_behaviour$ 0)
(declare-sort State1_state1_bool_fun_fun$ 0)
(declare-sort State1_state2_bool_fun_fun$ 0)
(declare-sort State2_behaviour_behaviour$ 0)
(declare-sort State2_state1_bool_fun_fun$ 0)
(declare-sort State2_state2_bool_fun_fun$ 0)
(declare-sort State1_state1_behaviour_fun$ 0)
(declare-sort State2_state2_behaviour_fun$ 0)
(declare-sort Index_index_behaviour_bool_fun_fun$ 0)
(declare-sort State1_behaviour_bool_fun_bool_fun$ 0)
(declare-sort State2_behaviour_bool_fun_bool_fun$ 0)
(declare-sort State1_behaviour_behaviour_bool_fun$ 0)
(declare-sort State2_behaviour_behaviour_bool_fun$ 0)
(declare-sort Index_state1_state1_bool_fun_fun_fun$ 0)
(declare-sort Index_state1_state2_bool_fun_fun_fun$ 0)
(declare-sort Index_state2_state1_bool_fun_fun_fun$ 0)
(declare-sort Index_state2_state2_bool_fun_fun_fun$ 0)
(declare-sort State1_state1_behaviour_bool_fun_fun$ 0)
(declare-sort State2_state2_behaviour_bool_fun_fun$ 0)
(declare-sort State1_behaviour_state1_behaviour_fun$ 0)
(declare-sort State1_behaviour_state2_behaviour_fun$ 0)
(declare-sort State2_behaviour_state1_behaviour_fun$ 0)
(declare-sort State2_behaviour_state2_behaviour_fun$ 0)
(declare-sort State1_bool_fun_state1_bool_fun_bool_fun_fun$ 0)
(declare-sort State1_bool_fun_state2_bool_fun_bool_fun_fun$ 0)
(declare-sort State2_bool_fun_state1_bool_fun_bool_fun_fun$ 0)
(declare-sort State2_bool_fun_state2_bool_fun_bool_fun_fun$ 0)
(declare-sort State1_state1_behaviour_bool_fun_fun_bool_fun$ 0)
(declare-sort State2_state2_behaviour_bool_fun_fun_bool_fun$ 0)
(declare-sort Index_index_prod_index_index_prod_bool_fun_fun$ 0)
(declare-sort State1_behaviour_state1_behaviour_bool_fun_fun$ 0)
(declare-sort State1_behaviour_state2_behaviour_bool_fun_fun$ 0)
(declare-sort State2_behaviour_state1_behaviour_bool_fun_fun$ 0)
(declare-sort State2_behaviour_state2_behaviour_bool_fun_fun$ 0)
(declare-sort Index_index_prod_state1_state1_bool_fun_fun_fun$ 0)
(declare-sort Index_index_prod_state1_state2_bool_fun_fun_fun$ 0)
(declare-sort Index_index_prod_state2_state1_bool_fun_fun_fun$ 0)
(declare-sort Index_index_prod_state2_state2_bool_fun_fun_fun$ 0)
(declare-sort Index_state1_prod_index_state1_prod_bool_fun_fun$ 0)
(declare-sort Index_state2_prod_index_state2_prod_bool_fun_fun$ 0)
(declare-sort State1_index_prod_state1_index_prod_bool_fun_fun$ 0)
(declare-sort State2_index_prod_state2_index_prod_bool_fun_fun$ 0)
(declare-sort State1_state1_prod_state1_state1_prod_bool_fun_fun$ 0)
(declare-sort State1_state2_prod_state1_state2_prod_bool_fun_fun$ 0)
(declare-sort State2_state1_prod_state2_state1_prod_bool_fun_fun$ 0)
(declare-sort State2_state2_prod_state2_state2_prod_bool_fun_fun$ 0)
(declare-sort State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$ 0)
(declare-sort State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$ 0)
(declare-sort State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_fun$ 0)
(declare-sort State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_fun$ 0)
(declare-sort State1_behaviour_bool_fun_state1_behaviour_bool_fun_bool_fun_fun$ 0)
(declare-sort State1_behaviour_bool_fun_state2_behaviour_bool_fun_bool_fun_fun$ 0)
(declare-sort State2_behaviour_bool_fun_state1_behaviour_bool_fun_bool_fun_fun$ 0)
(declare-sort State2_behaviour_bool_fun_state2_behaviour_bool_fun_bool_fun_fun$ 0)
(declare-sort State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_bool_fun_fun$ 0)
(declare-sort State1_state1_bool_fun_fun_state2_state2_bool_fun_fun_bool_fun_fun$ 0)
(declare-sort State2_state2_bool_fun_fun_state1_state1_bool_fun_fun_bool_fun_fun$ 0)
(declare-sort State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_bool_fun_fun$ 0)
(declare-sort Index_index_index_prod_prod_index_index_index_prod_prod_bool_fun_fun$ 0)
(declare-sort Index_index_prod_index_prod_index_index_prod_index_prod_bool_fun_fun$ 0)
(declare-sort State1_state1_behaviour_bool_fun_fun_state1_state1_behaviour_bool_fun_fun_bool_fun_fun$ 0)
(declare-sort State1_state1_behaviour_bool_fun_fun_state2_state2_behaviour_bool_fun_fun_bool_fun_fun$ 0)
(declare-sort State2_state2_behaviour_bool_fun_fun_state1_state1_behaviour_bool_fun_fun_bool_fun_fun$ 0)
(declare-sort State2_state2_behaviour_bool_fun_fun_state2_state2_behaviour_bool_fun_fun_bool_fun_fun$ 0)
(declare-sort Index_index_prod_index_index_prod_prod_index_index_prod_index_index_prod_prod_bool_fun_fun$ 0)
(declare-fun i2$ () Index$)
(declare-fun s1$ () State1$)
(declare-fun s2$ () State2$)
(declare-fun uu$ (Index_set$) Index_bool_fun$)
(declare-fun bot$ () State1_set$)
(declare-fun i1a$ () Index$)
(declare-fun inf$ (State1_state1_bool_fun_fun$) State1_bool_fun$)
(declare-fun s1a$ () State1$)
(declare-fun s2$a () State2$)
(declare-fun sup$ (Index_index_bool_fun_fun$ Index_index_bool_fun_fun$) Index_index_bool_fun_fun$)
(declare-fun uua$ (State2_set$) State2_bool_fun$)
(declare-fun uub$ (State1_set$) State1_bool_fun$)
(declare-fun uuc$ () State2_state2_bool_fun_fun$)
(declare-fun uud$ () State1_state1_bool_fun_fun$)
(declare-fun uue$ () Index_index_prod_index_index_prod_bool_fun_fun$)
(declare-fun uuf$ () Index_index_bool_fun_fun$)
(declare-fun uug$ () State1_state1_bool_fun_fun$)
(declare-fun uuh$ () State2_state2_bool_fun_fun$)
(declare-fun uui$ () State2_bool_fun$)
(declare-fun uuj$ () State2_bool_fun$)
(declare-fun uuk$ () State1_bool_fun$)
(declare-fun uul$ () State1_bool_fun$)
(declare-fun uum$ (Bool_bool_fun$ State2_bool_fun$) State2_bool_fun$)
(declare-fun uun$ (Bool_bool_fun$ State1_bool_fun$) State1_bool_fun$)
(declare-fun uuo$ () State2_state2_fun$)
(declare-fun uup$ () State2_state2_fun$)
(declare-fun uuq$ () State1_state1_fun$)
(declare-fun uur$ () State1_state1_fun$)
(declare-fun uus$ () Bool_bool_bool_fun_fun$)
(declare-fun uut$ () State1_behaviour_bool_fun$)
(declare-fun uuu$ () State2_behaviour_bool_fun$)
(declare-fun uuv$ () Index_index_bool_fun_fun$)
(declare-fun wfP$ (Index_index_bool_fun_fun$) Bool)
(declare-fun bot$a () State2_set$)
(declare-fun inf$a (State2_state2_bool_fun_fun$) State2_bool_fun$)
(declare-fun inf$b (Index_index_bool_fun_fun$) Index_bool_fun$)
(declare-fun inf$c (State1_behaviour_state1_behaviour_bool_fun_fun$) State1_behaviour_bool_fun$)
(declare-fun inf$d (State2_behaviour_state2_behaviour_bool_fun_fun$) State2_behaviour_bool_fun$)
(declare-fun s2_a$ () State2$)
(declare-fun safe$ (State1_state1_bool_fun_fun$ State1_bool_fun$) State1_bool_fun$)
(declare-fun sup$a (State1_state1_bool_fun_fun$ State1_state1_bool_fun_fun$) State1_state1_bool_fun_fun$)
(declare-fun sup$b (State2_state2_bool_fun_fun$ State2_state2_bool_fun_fun$) State2_state2_bool_fun_fun$)
(declare-fun uniq$ (State2_bool_fun$) Bool)
(declare-fun wfP$a (State2_state2_bool_fun_fun$) Bool)
(declare-fun wfP$b (State1_state1_bool_fun_fun$) Bool)
(declare-fun wfP$c (Index_index_prod_index_index_prod_bool_fun_fun$) Bool)
(declare-fun wfP$d (Index_state2_prod_index_state2_prod_bool_fun_fun$) Bool)
(declare-fun wfP$e (Index_state1_prod_index_state1_prod_bool_fun_fun$) Bool)
(declare-fun wfP$f (State2_index_prod_state2_index_prod_bool_fun_fun$) Bool)
(declare-fun wfP$g (State2_state2_prod_state2_state2_prod_bool_fun_fun$) Bool)
(declare-fun wfP$h (State2_state1_prod_state2_state1_prod_bool_fun_fun$) Bool)
(declare-fun wfP$i (State1_index_prod_state1_index_prod_bool_fun_fun$) Bool)
(declare-fun wfP$j (State1_state2_prod_state1_state2_prod_bool_fun_fun$) Bool)
(declare-fun wfP$k (State1_state1_prod_state1_state1_prod_bool_fun_fun$) Bool)
(declare-fun wfP$l (Index_index_index_prod_prod_index_index_index_prod_prod_bool_fun_fun$) Bool)
(declare-fun asymp$ (Index_index_bool_fun_fun$) Bool)
(declare-fun match$ () Index_state1_state2_bool_fun_fun_fun$)
(declare-fun order$ () Index_index_bool_fun_fun$)
(declare-fun safe$a (State2_state2_bool_fun_fun$ State2_bool_fun$) State2_bool_fun$)
(declare-fun safe$b (Index_index_bool_fun_fun$ Index_bool_fun$) Index_bool_fun$)
(declare-fun step1$ () State1_state1_bool_fun_fun$)
(declare-fun step2$ () State2_state2_bool_fun_fun$)
(declare-fun uniq$a (State2_behaviour_bool_fun$) Bool)
(declare-fun uniq$b (State1_bool_fun$) Bool)
(declare-fun uniq$c (State1_behaviour_bool_fun$) Bool)
(declare-fun final1$ () State1_bool_fun$)
(declare-fun final2$ () State2_bool_fun$)
(declare-fun inf_wf$ (State1_state1_bool_fun_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod$) State1_bool_fun$)
(declare-fun insert$ (State1$ State1_set$) State1_set$)
(declare-fun member$ (State2$ State2_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun collect$ (Index_bool_fun$) Index_set$)
(declare-fun fun_app$ (State2_behaviour_bool_fun$ State2_behaviour$) Bool)
(declare-fun inf_wf$a (State2_state2_bool_fun_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod$) State2_bool_fun$)
(declare-fun inf_wf$b (State1_state1_bool_fun_fun$ Index_index_bool_fun_fun$ Index$) State1_bool_fun$)
(declare-fun inf_wf$c (State2_state2_bool_fun_fun$ Index_index_bool_fun_fun$ Index$) State2_bool_fun$)
(declare-fun insert$a (State2$ State2_set$) State2_set$)
(declare-fun irreflp$ (Index_index_bool_fun_fun$) Bool)
(declare-fun less_eq$ (Index_index_bool_fun_fun$ Index_index_bool_fun_fun$) Bool)
(declare-fun member$a (State1$ State1_set$) Bool)
(declare-fun member$b (Index$ Index_set$) Bool)
(declare-fun member$c (Index_index_prod$ Index_index_prod_set$) Bool)
(declare-fun rel_fun$ (State1_behaviour_state1_behaviour_bool_fun_fun$ Bool_bool_bool_fun_fun$) State1_behaviour_bool_fun_state1_behaviour_bool_fun_bool_fun_fun$)
(declare-fun tranclp$ (State1_state1_bool_fun_fun$) State1_state1_bool_fun_fun$)
(declare-fun bi_total$ (State1_state1_bool_fun_fun$) Bool)
(declare-fun collect$a (State2_bool_fun$) State2_set$)
(declare-fun collect$b (State1_bool_fun$) State1_set$)
(declare-fun diverges$ () State2_behaviour$)
(declare-fun finished$ (State1_state1_bool_fun_fun$) State1_bool_fun$)
(declare-fun fun_app$a (State1_behaviour_bool_fun$ State1_behaviour$) Bool)
(declare-fun fun_app$b (State2_bool_fun$ State2$) Bool)
(declare-fun fun_app$c (State1_bool_fun$ State1$) Bool)
(declare-fun fun_app$d (Index_bool_fun$ Index$) Bool)
(declare-fun fun_app$e (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$f (Bool_bool_bool_fun_fun$ Bool) Bool_bool_fun$)
(declare-fun fun_app$g (State2_state2_bool_fun_fun$ State2$) State2_bool_fun$)
(declare-fun fun_app$h (State1_state1_bool_fun_fun$ State1$) State1_bool_fun$)
(declare-fun fun_app$i (Index_index_bool_fun_fun$ Index$) Index_bool_fun$)
(declare-fun fun_app$j (Index_index_prod_bool_fun$ Index_index_prod$) Bool)
(declare-fun fun_app$k (Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod$) Index_index_prod_bool_fun$)
(declare-fun fun_app$l (State2_state2_fun$ State2$) State2$)
(declare-fun fun_app$m (State1_state1_fun$ State1$) State1$)
(declare-fun fun_app$n (State1_state2_bool_fun_fun$ State1$) State2_bool_fun$)
(declare-fun fun_app$o (Index_state1_state2_bool_fun_fun_fun$ Index$) State1_state2_bool_fun_fun$)
(declare-fun fun_app$p (State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_fun$ State1_state1_bool_fun_fun$) State1_state1_bool_fun_fun$)
(declare-fun fun_app$q (Index_state2_state2_bool_fun_fun_fun$ Index$) State2_state2_bool_fun_fun$)
(declare-fun fun_app$r (State2_state1_bool_fun_fun$ State2$) State1_bool_fun$)
(declare-fun fun_app$s (Index_state2_state1_bool_fun_fun_fun$ Index$) State2_state1_bool_fun_fun$)
(declare-fun fun_app$t (Index_state1_state1_bool_fun_fun_fun$ Index$) State1_state1_bool_fun_fun$)
(declare-fun fun_app$u (State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_fun$ State2_state2_bool_fun_fun$) State2_state2_bool_fun_fun$)
(declare-fun fun_app$v (State1_state1_behaviour_bool_fun_fun$ State1$) State1_behaviour_bool_fun$)
(declare-fun fun_app$w (State1_state1_behaviour_fun$ State1$) State1_behaviour$)
(declare-fun fun_app$x (State2_state2_behaviour_bool_fun_fun$ State2$) State2_behaviour_bool_fun$)
(declare-fun fun_app$y (Index_behaviour_bool_fun$ Index_behaviour$) Bool)
(declare-fun fun_app$z (Index_index_behaviour_bool_fun_fun$ Index$) Index_behaviour_bool_fun$)
(declare-fun is_wrong$ () State1_behaviour_bool_fun$)
(declare-fun less_eq$a (State1_state1_bool_fun_fun$ State1_state1_bool_fun_fun$) Bool)
(declare-fun less_eq$b (State2_state2_bool_fun_fun$ State2_state2_bool_fun_fun$) Bool)
(declare-fun rel_fun$a (State1_behaviour_state2_behaviour_bool_fun_fun$ Bool_bool_bool_fun_fun$) State1_behaviour_bool_fun_state2_behaviour_bool_fun_bool_fun_fun$)
(declare-fun rel_fun$b (State2_behaviour_state1_behaviour_bool_fun_fun$ Bool_bool_bool_fun_fun$) State2_behaviour_bool_fun_state1_behaviour_bool_fun_bool_fun_fun$)
(declare-fun rel_fun$c (State2_behaviour_state2_behaviour_bool_fun_fun$ Bool_bool_bool_fun_fun$) State2_behaviour_bool_fun_state2_behaviour_bool_fun_bool_fun_fun$)
(declare-fun rel_fun$d (State1_state1_bool_fun_fun$ State1_behaviour_state1_behaviour_bool_fun_fun$ State1_state1_behaviour_fun$ State1_state1_behaviour_fun$) Bool)
(declare-fun rel_fun$e (State1_state2_bool_fun_fun$ State1_behaviour_state2_behaviour_bool_fun_fun$ State1_state1_behaviour_fun$ State2_state2_behaviour_fun$) Bool)
(declare-fun rel_fun$f (State2_state1_bool_fun_fun$ State2_behaviour_state1_behaviour_bool_fun_fun$ State2_state2_behaviour_fun$ State1_state1_behaviour_fun$) Bool)
(declare-fun rel_fun$g (State2_state2_bool_fun_fun$ State2_behaviour_state2_behaviour_bool_fun_fun$ State2_state2_behaviour_fun$ State2_state2_behaviour_fun$) Bool)
(declare-fun rel_fun$h (State1_state1_behaviour_bool_fun_fun_state1_state1_behaviour_bool_fun_fun_bool_fun_fun$ Bool_bool_bool_fun_fun$ State1_state1_behaviour_bool_fun_fun_bool_fun$ State1_state1_behaviour_bool_fun_fun_bool_fun$) Bool)
(declare-fun rel_fun$i (State1_state1_bool_fun_fun$ State1_behaviour_bool_fun_state1_behaviour_bool_fun_bool_fun_fun$) State1_state1_behaviour_bool_fun_fun_state1_state1_behaviour_bool_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$j (State1_state1_behaviour_bool_fun_fun_state2_state2_behaviour_bool_fun_fun_bool_fun_fun$ Bool_bool_bool_fun_fun$ State1_state1_behaviour_bool_fun_fun_bool_fun$ State2_state2_behaviour_bool_fun_fun_bool_fun$) Bool)
(declare-fun rel_fun$k (State1_state2_bool_fun_fun$ State1_behaviour_bool_fun_state2_behaviour_bool_fun_bool_fun_fun$) State1_state1_behaviour_bool_fun_fun_state2_state2_behaviour_bool_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$l (State2_state2_behaviour_bool_fun_fun_state1_state1_behaviour_bool_fun_fun_bool_fun_fun$ Bool_bool_bool_fun_fun$ State2_state2_behaviour_bool_fun_fun_bool_fun$ State1_state1_behaviour_bool_fun_fun_bool_fun$) Bool)
(declare-fun rel_fun$m (State2_state1_bool_fun_fun$ State2_behaviour_bool_fun_state1_behaviour_bool_fun_bool_fun_fun$) State2_state2_behaviour_bool_fun_fun_state1_state1_behaviour_bool_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$n (State2_state2_behaviour_bool_fun_fun_state2_state2_behaviour_bool_fun_fun_bool_fun_fun$ Bool_bool_bool_fun_fun$ State2_state2_behaviour_bool_fun_fun_bool_fun$ State2_state2_behaviour_bool_fun_fun_bool_fun$) Bool)
(declare-fun rel_fun$o (State2_state2_bool_fun_fun$ State2_behaviour_bool_fun_state2_behaviour_bool_fun_bool_fun_fun$) State2_state2_behaviour_bool_fun_fun_state2_state2_behaviour_bool_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$p (State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_bool_fun_fun$ State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_bool_fun_fun$ State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_fun$ State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_fun$) Bool)
(declare-fun rel_fun$q (State1_state1_bool_fun_fun$ State1_bool_fun_state1_bool_fun_bool_fun_fun$) State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$r (State1_state1_bool_fun_fun$ Bool_bool_bool_fun_fun$) State1_bool_fun_state1_bool_fun_bool_fun_fun$)
(declare-fun rel_fun$s (State1_state1_bool_fun_fun_state2_state2_bool_fun_fun_bool_fun_fun$ State1_state1_bool_fun_fun_state2_state2_bool_fun_fun_bool_fun_fun$ State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_fun$ State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_fun$) Bool)
(declare-fun rel_fun$t (State1_state2_bool_fun_fun$ State1_bool_fun_state2_bool_fun_bool_fun_fun$) State1_state1_bool_fun_fun_state2_state2_bool_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$u (State1_state2_bool_fun_fun$ Bool_bool_bool_fun_fun$) State1_bool_fun_state2_bool_fun_bool_fun_fun$)
(declare-fun rel_fun$v (State2_state2_bool_fun_fun_state1_state1_bool_fun_fun_bool_fun_fun$ State2_state2_bool_fun_fun_state1_state1_bool_fun_fun_bool_fun_fun$ State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_fun$ State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_fun$) Bool)
(declare-fun rel_fun$w (State2_state1_bool_fun_fun$ State2_bool_fun_state1_bool_fun_bool_fun_fun$) State2_state2_bool_fun_fun_state1_state1_bool_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$x (State2_state1_bool_fun_fun$ Bool_bool_bool_fun_fun$) State2_bool_fun_state1_bool_fun_bool_fun_fun$)
(declare-fun rel_fun$y (State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_bool_fun_fun$ State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_bool_fun_fun$ State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_fun$ State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_fun$) Bool)
(declare-fun rel_fun$z (State2_state2_bool_fun_fun$ State2_bool_fun_state2_bool_fun_bool_fun_fun$) State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_bool_fun_fun$)
(declare-fun rtranclp$ () State1_state1_bool_fun_fun_state1_state1_bool_fun_fun_fun$)
(declare-fun tranclp$a (Index_index_bool_fun_fun$) Index_index_bool_fun_fun$)
(declare-fun tranclp$b (State2_state2_bool_fun_fun$) State2_state2_bool_fun_fun$)
(declare-fun tranclp$c (Index_index_prod_index_index_prod_bool_fun_fun$) Index_index_prod_index_index_prod_bool_fun_fun$)
(declare-fun tranclp$d (State1_behaviour_state1_behaviour_bool_fun_fun$) State1_behaviour_state1_behaviour_bool_fun_fun$)
(declare-fun tranclp$e (State2_behaviour_state2_behaviour_bool_fun_fun$) State2_behaviour_state2_behaviour_bool_fun_fun$)
(declare-fun bi_total$a (State1_behaviour_state1_behaviour_bool_fun_fun$) Bool)
(declare-fun bi_total$b (State1_state2_bool_fun_fun$) Bool)
(declare-fun bi_total$c (State1_behaviour_state2_behaviour_bool_fun_fun$) Bool)
(declare-fun bi_total$d (State2_state1_bool_fun_fun$) Bool)
(declare-fun bi_total$e (State2_behaviour_state1_behaviour_bool_fun_fun$) Bool)
(declare-fun bi_total$f (State2_state2_bool_fun_fun$) Bool)
(declare-fun bi_total$g (State2_behaviour_state2_behaviour_bool_fun_fun$) Bool)
(declare-fun bi_unique$ (State1_state1_bool_fun_fun$) Bool)
(declare-fun diverges$a () State1_behaviour$)
(declare-fun diverges$b () Index_behaviour$)
(declare-fun diverges$c () State1_behaviour_behaviour$)
(declare-fun finished$a (State2_state2_bool_fun_fun$) State2_bool_fun$)
(declare-fun finished$b (Index_index_bool_fun_fun$) Index_bool_fun$)
(declare-fun fun_app$aa (State2_state2_behaviour_fun$ State2$) State2_behaviour$)
(declare-fun fun_app$ab (State1_state1_behaviour_bool_fun_fun_bool_fun$ State1_state1_behaviour_bool_fun_fun$) Bool)
(declare-fun fun_app$ac (State2_state2_behaviour_bool_fun_fun_bool_fun$ State2_state2_behaviour_bool_fun_fun$) Bool)
(declare-fun fun_app$ad (State2_behaviour_behaviour_bool_fun$ State2_behaviour_behaviour$) Bool)
(declare-fun fun_app$ae (State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$ State2_behaviour$) State2_behaviour_behaviour_bool_fun$)
(declare-fun fun_app$af (State1_behaviour_behaviour_bool_fun$ State1_behaviour_behaviour$) Bool)
(declare-fun fun_app$ag (State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$ State1_behaviour$) State1_behaviour_behaviour_bool_fun$)
(declare-fun fun_app$ah (State1_behaviour_state1_behaviour_bool_fun_fun$ State1_behaviour$) State1_behaviour_bool_fun$)
(declare-fun fun_app$ai (State2_behaviour_state2_behaviour_bool_fun_fun$ State2_behaviour$) State2_behaviour_bool_fun$)
(declare-fun fun_app$aj (State1_behaviour_state2_behaviour_bool_fun_fun$ State1_behaviour$) State2_behaviour_bool_fun$)
(declare-fun fun_app$ak (State2_behaviour_state1_behaviour_bool_fun_fun$ State2_behaviour$) State1_behaviour_bool_fun$)
(declare-fun fun_app$al (State1_behaviour_state1_behaviour_fun$ State1_behaviour$) State1_behaviour$)
(declare-fun fun_app$am (State2_behaviour_state1_behaviour_fun$ State2_behaviour$) State1_behaviour$)
(declare-fun fun_app$an (State1_behaviour_state2_behaviour_fun$ State1_behaviour$) State2_behaviour$)
(declare-fun fun_app$ao (State2_behaviour_state2_behaviour_fun$ State2_behaviour$) State2_behaviour$)
(declare-fun fun_app$ap (State1_state2_fun$ State1$) State2$)
(declare-fun fun_app$aq (State2_state1_fun$ State2$) State1$)
(declare-fun fun_app$ar (State1_behaviour_bool_fun_bool_fun$ State1_behaviour_bool_fun$) Bool)
(declare-fun fun_app$as (State1_behaviour_bool_fun_state1_behaviour_bool_fun_bool_fun_fun$ State1_behaviour_bool_fun$) State1_behaviour_bool_fun_bool_fun$)
(declare-fun fun_app$at (State2_behaviour_bool_fun_bool_fun$ State2_behaviour_bool_fun$) Bool)
(declare-fun fun_app$au (State1_behaviour_bool_fun_state2_behaviour_bool_fun_bool_fun_fun$ State1_behaviour_bool_fun$) State2_behaviour_bool_fun_bool_fun$)
(declare-fun fun_app$av (State2_behaviour_bool_fun_state1_behaviour_bool_fun_bool_fun_fun$ State2_behaviour_bool_fun$) State1_behaviour_bool_fun_bool_fun$)
(declare-fun fun_app$aw (State2_behaviour_bool_fun_state2_behaviour_bool_fun_bool_fun_fun$ State2_behaviour_bool_fun$) State2_behaviour_bool_fun_bool_fun$)
(declare-fun is_wrong$a () State2_behaviour_bool_fun$)
(declare-fun is_wrong$b (State1_behaviour_behaviour$) Bool)
(declare-fun lex_prodp$ (Index_index_bool_fun_fun$ Index_index_prod_index_index_prod_bool_fun_fun$) Index_index_index_prod_prod_index_index_index_prod_prod_bool_fun_fun$)
(declare-fun rel_fun$aa (State2_state2_bool_fun_fun$ Bool_bool_bool_fun_fun$) State2_bool_fun_state2_bool_fun_bool_fun_fun$)
(declare-fun rtranclp$a (Index_index_bool_fun_fun$) Index_index_bool_fun_fun$)
(declare-fun rtranclp$b () State2_state2_bool_fun_fun_state2_state2_bool_fun_fun_fun$)
(declare-fun rtranclp$c (State1_behaviour_state1_behaviour_bool_fun_fun$) State1_behaviour_state1_behaviour_bool_fun_fun$)
(declare-fun rtranclp$d (State2_behaviour_state2_behaviour_bool_fun_fun$) State2_behaviour_state2_behaviour_bool_fun_fun$)
(declare-fun semantics$ (State1_state1_bool_fun_fun$ State1_bool_fun$) Bool)
(declare-fun undefined$ () State2$)
(declare-fun bi_unique$a (State1_state2_bool_fun_fun$) Bool)
(declare-fun bi_unique$b (State2_state1_bool_fun_fun$) Bool)
(declare-fun bi_unique$c (State2_state2_bool_fun_fun$) Bool)
(declare-fun goes_wrong$ () State1_state1_behaviour_fun$)
(declare-fun left_total$ () State1_state1_behaviour_bool_fun_fun_bool_fun$)
(declare-fun lex_prodp$a (Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_bool_fun_fun$) Index_index_prod_index_prod_index_index_prod_index_prod_bool_fun_fun$)
(declare-fun lex_prodp$b (Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_index_index_prod_bool_fun_fun$) Index_index_prod_index_index_prod_prod_index_index_prod_index_index_prod_prod_bool_fun_fun$)
(declare-fun lex_prodp$c (Index_index_bool_fun_fun$ Index_index_bool_fun_fun$) Index_index_prod_index_index_prod_bool_fun_fun$)
(declare-fun lex_prodp$d (Index_index_bool_fun_fun$ State2_state2_bool_fun_fun$) Index_state2_prod_index_state2_prod_bool_fun_fun$)
(declare-fun lex_prodp$e (Index_index_bool_fun_fun$ State1_state1_bool_fun_fun$) Index_state1_prod_index_state1_prod_bool_fun_fun$)
(declare-fun lex_prodp$f (State2_state2_bool_fun_fun$ Index_index_bool_fun_fun$) State2_index_prod_state2_index_prod_bool_fun_fun$)
(declare-fun lex_prodp$g (State2_state2_bool_fun_fun$ State2_state2_bool_fun_fun$) State2_state2_prod_state2_state2_prod_bool_fun_fun$)
(declare-fun lex_prodp$h (State2_state2_bool_fun_fun$ State1_state1_bool_fun_fun$) State2_state1_prod_state2_state1_prod_bool_fun_fun$)
(declare-fun lex_prodp$i (State1_state1_bool_fun_fun$ Index_index_bool_fun_fun$) State1_index_prod_state1_index_prod_bool_fun_fun$)
(declare-fun lex_prodp$j (State1_state1_bool_fun_fun$ State2_state2_bool_fun_fun$) State1_state2_prod_state1_state2_prod_bool_fun_fun$)
(declare-fun lex_prodp$k (State1_state1_bool_fun_fun$ State1_state1_bool_fun_fun$) State1_state1_prod_state1_state1_prod_bool_fun_fun$)
(declare-fun semantics$a (State2_state2_bool_fun_fun$ State2_bool_fun$) Bool)
(declare-fun semantics$b (Index_index_bool_fun_fun$ Index_bool_fun$) Bool)
(declare-fun semantics$c (State2_behaviour_state2_behaviour_bool_fun_fun$ State2_behaviour_bool_fun$) Bool)
(declare-fun semantics$d (State1_behaviour_state1_behaviour_bool_fun_fun$ State1_behaviour_bool_fun$) Bool)
(declare-fun terminates$ () State1_state1_behaviour_fun$)
(declare-fun undefined$a () State1$)
(declare-fun goes_wrong$a (Index$) Index_behaviour$)
(declare-fun goes_wrong$b () State2_state2_behaviour_fun$)
(declare-fun left_total$a (State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$) Bool)
(declare-fun left_total$b (State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$) Bool)
(declare-fun left_total$c () State2_state2_behaviour_bool_fun_fun_bool_fun$)
(declare-fun left_total$d (State1_state1_bool_fun_fun$) Bool)
(declare-fun left_total$e (State2_state2_bool_fun_fun$) Bool)
(declare-fun left_total$f (Index_index_bool_fun_fun$) Bool)
(declare-fun left_total$g (State1_behaviour_state1_behaviour_bool_fun_fun$) Bool)
(declare-fun left_total$h (State2_behaviour_state2_behaviour_bool_fun_fun$) Bool)
(declare-fun terminates$a (Index$) Index_behaviour$)
(declare-fun terminates$b () State2_state2_behaviour_fun$)
(declare-fun right_unique$ (State2_state2_bool_fun_fun$) Bool)
(declare-fun well_founded$ (Index_index_bool_fun_fun$) Bool)
(declare-fun is_Terminates$ () State1_behaviour_bool_fun$)
(declare-fun map_behaviour$ (State1_state1_fun$) State1_behaviour_state1_behaviour_fun$)
(declare-fun rel_behaviour$ (State1_state1_behaviour_bool_fun_fun$) State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$)
(declare-fun right_unique$a (State2_state2_behaviour_bool_fun_fun$) Bool)
(declare-fun right_unique$b (Index_index_bool_fun_fun$) Bool)
(declare-fun right_unique$c (Index_index_behaviour_bool_fun_fun$) Bool)
(declare-fun right_unique$d (State1_behaviour_state1_behaviour_bool_fun_fun$) Bool)
(declare-fun right_unique$e (State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$) Bool)
(declare-fun right_unique$f (State2_behaviour_state2_behaviour_bool_fun_fun$) Bool)
(declare-fun right_unique$g (State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$) Bool)
(declare-fun right_unique$h (State1_state1_bool_fun_fun$) Bool)
(declare-fun right_unique$i (State1_state1_behaviour_bool_fun_fun$) Bool)
(declare-fun set_behaviour$ (State1_behaviour$) State1_set$)
(declare-fun state_behaves$ (State1_state1_bool_fun_fun$ State1_bool_fun$) State1_state1_behaviour_bool_fun_fun$)
(declare-fun un_Goes_wrong$ (State1_behaviour$) State1$)
(declare-fun un_Terminates$ (State1_behaviour$) State1$)
(declare-fun well_founded$a (State2_state2_bool_fun_fun$) Bool)
(declare-fun well_founded$b (State1_state1_bool_fun_fun$) Bool)
(declare-fun well_founded$c (Index_index_prod_index_index_prod_bool_fun_fun$) Bool)
(declare-fun well_founded$d (Index_index_index_prod_prod_index_index_index_prod_prod_bool_fun_fun$) Bool)
(declare-fun well_founded$e (Index_index_prod_index_prod_index_index_prod_index_prod_bool_fun_fun$) Bool)
(declare-fun well_founded$f (Index_index_prod_index_index_prod_prod_index_index_prod_index_index_prod_prod_bool_fun_fun$) Bool)
(declare-fun case_behaviour$ (State2_bool_fun$ Bool State2_bool_fun$) State2_behaviour_bool_fun$)
(declare-fun is_Terminates$a () State2_behaviour_bool_fun$)
(declare-fun is_Terminates$b (State1_behaviour_behaviour$) Bool)
(declare-fun map_behaviour$a (State2_state1_fun$) State2_behaviour_state1_behaviour_fun$)
(declare-fun map_behaviour$b (State1_state2_fun$) State1_behaviour_state2_behaviour_fun$)
(declare-fun map_behaviour$c (State2_state2_fun$) State2_behaviour_state2_behaviour_fun$)
(declare-fun pred_behaviour$ (State1_bool_fun$) State1_behaviour_bool_fun$)
(declare-fun rel_behaviour$a (State1_state1_bool_fun_fun$) State1_behaviour_state1_behaviour_bool_fun_fun$)
(declare-fun rel_behaviour$b (State1_state2_bool_fun_fun$) State1_behaviour_state2_behaviour_bool_fun_fun$)
(declare-fun rel_behaviour$c (State2_state1_bool_fun_fun$) State2_behaviour_state1_behaviour_bool_fun_fun$)
(declare-fun rel_behaviour$d (State2_state2_bool_fun_fun$) State2_behaviour_state2_behaviour_bool_fun_fun$)
(declare-fun rel_behaviour$e (State2_state2_behaviour_bool_fun_fun$) State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$)
(declare-fun set_behaviour$a (State2_behaviour$) State2_set$)
(declare-fun state_behaves$a (State2_state2_bool_fun_fun$ State2_bool_fun$) State2_state2_behaviour_bool_fun_fun$)
(declare-fun state_behaves$b (Index_index_bool_fun_fun$ Index_bool_fun$) Index_index_behaviour_bool_fun_fun$)
(declare-fun state_behaves$c (State2_behaviour_state2_behaviour_bool_fun_fun$ State2_behaviour_bool_fun$) State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$)
(declare-fun state_behaves$d (State1_behaviour_state1_behaviour_bool_fun_fun$ State1_behaviour_bool_fun$) State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$)
(declare-fun un_Goes_wrong$a (State2_behaviour$) State2$)
(declare-fun un_Goes_wrong$b (State1_behaviour_behaviour$) State1_behaviour$)
(declare-fun un_Terminates$a (State2_behaviour$) State2$)
(declare-fun un_Terminates$b (State1_behaviour_behaviour$) State1_behaviour$)
(declare-fun case_behaviour$a (State1_bool_fun$ Bool State1_bool_fun$) State1_behaviour_bool_fun$)
(declare-fun case_behaviour$b (State2_state2_fun$ State2$ State2_state2_fun$ State2_behaviour$) State2$)
(declare-fun case_behaviour$c (State1_state1_fun$ State1$ State1_state1_fun$ State1_behaviour$) State1$)
(declare-fun pred_behaviour$a (State2_bool_fun$) State2_behaviour_bool_fun$)
(declare-fun backward_simulation$ (State1_state1_bool_fun_fun$ State2_state2_bool_fun_fun$ State1_bool_fun$ State2_bool_fun$ Index_index_bool_fun_fun$ Index_state1_state2_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation$a (State2_state2_bool_fun_fun$ State2_state2_bool_fun_fun$ State2_bool_fun$ State2_bool_fun$ Index_index_bool_fun_fun$ Index_state2_state2_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation$b (State2_state2_bool_fun_fun$ State1_state1_bool_fun_fun$ State2_bool_fun$ State1_bool_fun$ Index_index_bool_fun_fun$ Index_state2_state1_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation$c (State1_state1_bool_fun_fun$ State1_state1_bool_fun_fun$ State1_bool_fun$ State1_bool_fun$ Index_index_bool_fun_fun$ Index_state1_state1_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation$d (State1_state1_bool_fun_fun$ State1_state1_bool_fun_fun$ State1_bool_fun$ State1_bool_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_state1_state1_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation$e (State1_state1_bool_fun_fun$ State2_state2_bool_fun_fun$ State1_bool_fun$ State2_bool_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_state1_state2_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation$f (State2_state2_bool_fun_fun$ State1_state1_bool_fun_fun$ State2_bool_fun$ State1_bool_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_state2_state1_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation$g (State2_state2_bool_fun_fun$ State2_state2_bool_fun_fun$ State2_bool_fun$ State2_bool_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_state2_state2_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation_axioms$ (State1_state1_bool_fun_fun$ State2_state2_bool_fun_fun$ State1_bool_fun$ State2_bool_fun$ Index_index_bool_fun_fun$ Index_state1_state2_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation_axioms$a (State2_state2_bool_fun_fun$ State2_state2_bool_fun_fun$ State2_bool_fun$ State2_bool_fun$ Index_index_bool_fun_fun$ Index_state2_state2_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation_axioms$b (State2_state2_bool_fun_fun$ State1_state1_bool_fun_fun$ State2_bool_fun$ State1_bool_fun$ Index_index_bool_fun_fun$ Index_state2_state1_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation_axioms$c (State1_state1_bool_fun_fun$ State1_state1_bool_fun_fun$ State1_bool_fun$ State1_bool_fun$ Index_index_bool_fun_fun$ Index_state1_state1_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation_axioms$d (State1_state1_bool_fun_fun$ State1_state1_bool_fun_fun$ State1_bool_fun$ State1_bool_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_state1_state1_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation_axioms$e (State1_state1_bool_fun_fun$ State2_state2_bool_fun_fun$ State1_bool_fun$ State2_bool_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_state1_state2_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation_axioms$f (State2_state2_bool_fun_fun$ State1_state1_bool_fun_fun$ State2_bool_fun$ State1_bool_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_state2_state1_bool_fun_fun_fun$) Bool)
(declare-fun backward_simulation_axioms$g (State2_state2_bool_fun_fun$ State2_state2_bool_fun_fun$ State2_bool_fun$ State2_bool_fun$ Index_index_prod_index_index_prod_bool_fun_fun$ Index_index_prod_state2_state2_bool_fun_fun_fun$) Bool)
(assert (! (forall ((?v0 State2_behaviour$)) (! (= (fun_app$ uuu$ ?v0) (= ?v0 diverges$)) :pattern ((fun_app$ uuu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 State1_behaviour$)) (! (= (fun_app$a uut$ ?v0) (= ?v0 diverges$a)) :pattern ((fun_app$a uut$ ?v0)))) :named a1))
(assert (! (forall ((?v0 State2_set$) (?v1 State2$)) (! (= (fun_app$b (uua$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$b (uua$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 State1_set$) (?v1 State1$)) (! (= (fun_app$c (uub$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$c (uub$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Index_set$) (?v1 Index$)) (! (= (fun_app$d (uu$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$d (uu$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 Bool) (?v1 Bool)) (! (= (fun_app$e (fun_app$f uus$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$e (fun_app$f uus$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (! (= (fun_app$b (fun_app$g uuh$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$g uuh$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (! (= (fun_app$c (fun_app$h uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (fun_app$h uug$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 Index$) (?v1 Index$)) (! (= (fun_app$d (fun_app$i uuv$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$i uuv$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (! (= (fun_app$b (uum$ ?v0 ?v1) ?v2) (fun_app$e ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (uum$ ?v0 ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (! (= (fun_app$c (uun$ ?v0 ?v1) ?v2) (fun_app$e ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (uun$ ?v0 ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 Index_index_prod$) (?v1 Index_index_prod$)) (! (= (fun_app$j (fun_app$k uue$ ?v0) ?v1) false) :pattern ((fun_app$j (fun_app$k uue$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (! (= (fun_app$b (fun_app$g uuc$ ?v0) ?v1) false) :pattern ((fun_app$b (fun_app$g uuc$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (! (= (fun_app$c (fun_app$h uud$ ?v0) ?v1) false) :pattern ((fun_app$c (fun_app$h uud$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 Index$) (?v1 Index$)) (! (= (fun_app$d (fun_app$i uuf$ ?v0) ?v1) false) :pattern ((fun_app$d (fun_app$i uuf$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 State2$)) (! (= (fun_app$l uup$ ?v0) ?v0) :pattern ((fun_app$l uup$ ?v0)))) :named a15))
(assert (! (forall ((?v0 State1$)) (! (= (fun_app$m uur$ ?v0) ?v0) :pattern ((fun_app$m uur$ ?v0)))) :named a16))
(assert (! (forall ((?v0 State2$)) (! (= (fun_app$l uuo$ ?v0) undefined$) :pattern ((fun_app$l uuo$ ?v0)))) :named a17))
(assert (! (forall ((?v0 State1$)) (! (= (fun_app$m uuq$ ?v0) undefined$a) :pattern ((fun_app$m uuq$ ?v0)))) :named a18))
(assert (! (forall ((?v0 State2$)) (! (= (fun_app$b uuj$ ?v0) false) :pattern ((fun_app$b uuj$ ?v0)))) :named a19))
(assert (! (forall ((?v0 State1$)) (! (= (fun_app$c uul$ ?v0) false) :pattern ((fun_app$c uul$ ?v0)))) :named a20))
(assert (! (forall ((?v0 State2$)) (! (= (fun_app$b uui$ ?v0) true) :pattern ((fun_app$b uui$ ?v0)))) :named a21))
(assert (! (forall ((?v0 State1$)) (! (= (fun_app$c uuk$ ?v0) true) :pattern ((fun_app$c uuk$ ?v0)))) :named a22))
(assert (! (not thesis$) :named a23))
(assert (! (forall ((?v0 State1$) (?v1 Index$)) (=> (and (fun_app$c (fun_app$h (tranclp$ step1$) s1$) ?v0) (fun_app$b (fun_app$n (fun_app$o match$ ?v1) ?v0) s2$)) thesis$)) :named a24))
(assert (! (exists ((?v0 Index$) (?v1 State1$)) (and (fun_app$c (fun_app$h (tranclp$ step1$) s1$) ?v1) (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) s2$))) :named a25))
(assert (! (fun_app$c (fun_app$h (tranclp$ step1$) s1a$) s1$) :named a26))
(assert (! (fun_app$b (fun_app$n (fun_app$o match$ i2$) s1$) s2_a$) :named a27))
(assert (! (or (exists ((?v0 Index$) (?v1 State1$)) (and (fun_app$c (fun_app$h (tranclp$ step1$) s1$) ?v1) (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) s2$))) (exists ((?v0 Index$)) (and (fun_app$b (fun_app$n (fun_app$o match$ ?v0) s1$) s2$) (fun_app$d (fun_app$i order$ ?v0) i2$)))) :named a28))
(assert (! (exists ((?v0 Index$) (?v1 State1$)) (and (fun_app$c (fun_app$h (tranclp$ step1$) s1a$) ?v1) (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) s2_a$))) :named a29))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (=> (fun_app$c (fun_app$h step1$ ?v0) ?v1) (not (fun_app$c (finished$ step1$) ?v0)))) :named a30))
(assert (! (fun_app$b (fun_app$n (fun_app$o match$ i1a$) s1a$) s2$a) :named a31))
(assert (! (=> (forall ((?v0 Index$) (?v1 State1$)) (=> (and (fun_app$c (fun_app$h (tranclp$ step1$) s1a$) ?v1) (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) s2_a$)) false)) false) :named a32))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (and (forall ((?v3 State1$) (?v4 State1$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v4) (fun_app$c (fun_app$h ?v0 ?v3) ?v4))) false)) (forall ((?v3 State1$) (?v4 State1$) (?v5 State1$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v3) ?v4) (fun_app$c (fun_app$h ?v0 ?v4) ?v5)))) false)))) false)) :named a33))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (and (forall ((?v3 Index$) (?v4 Index$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v4) (fun_app$d (fun_app$i ?v0 ?v3) ?v4))) false)) (forall ((?v3 Index$) (?v4 Index$) (?v5 Index$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v3) ?v4) (fun_app$d (fun_app$i ?v0 ?v4) ?v5)))) false)))) false)) :named a34))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (and (forall ((?v3 State2$) (?v4 State2$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v4) (fun_app$b (fun_app$g ?v0 ?v3) ?v4))) false)) (forall ((?v3 State2$) (?v4 State2$) (?v5 State2$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v3) ?v4) (fun_app$b (fun_app$g ?v0 ?v4) ?v5)))) false)))) false)) :named a35))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (= (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (or (exists ((?v3 State1$) (?v4 State1$)) (and (= ?v1 ?v3) (and (= ?v2 ?v4) (fun_app$c (fun_app$h ?v0 ?v3) ?v4)))) (exists ((?v3 State1$) (?v4 State1$) (?v5 State1$)) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v3) ?v4) (fun_app$c (fun_app$h ?v0 ?v4) ?v5)))))))) :named a36))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (= (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (or (exists ((?v3 Index$) (?v4 Index$)) (and (= ?v1 ?v3) (and (= ?v2 ?v4) (fun_app$d (fun_app$i ?v0 ?v3) ?v4)))) (exists ((?v3 Index$) (?v4 Index$) (?v5 Index$)) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v3) ?v4) (fun_app$d (fun_app$i ?v0 ?v4) ?v5)))))))) :named a37))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (= (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (or (exists ((?v3 State2$) (?v4 State2$)) (and (= ?v1 ?v3) (and (= ?v2 ?v4) (fun_app$b (fun_app$g ?v0 ?v3) ?v4)))) (exists ((?v3 State2$) (?v4 State2$) (?v5 State2$)) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v3) ?v4) (fun_app$b (fun_app$g ?v0 ?v4) ?v5)))))))) :named a38))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2))) :named a39))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v1) ?v2) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2))) :named a40))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2))) :named a41))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$h ?v0 ?v2) ?v3)) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v3))) :named a42))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$i ?v0 ?v2) ?v3)) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v3))) :named a43))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (fun_app$b (fun_app$g ?v0 ?v2) ?v3)) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v3))) :named a44))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v2) ?v3)) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v3))) :named a45))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v2) ?v3)) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v3))) :named a46))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v2) ?v3)) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v3))) :named a47))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1_bool_fun$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (and (forall ((?v4 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v2) (fun_app$c ?v3 ?v4))) (forall ((?v4 State1$) (?v5 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v4) ?v5) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v5) ?v2) (fun_app$c ?v3 ?v5))) (fun_app$c ?v3 ?v4))))) (fun_app$c ?v3 ?v1))) :named a48))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index_bool_fun$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (and (forall ((?v4 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v4) ?v2) (fun_app$d ?v3 ?v4))) (forall ((?v4 Index$) (?v5 Index$)) (=> (and (fun_app$d (fun_app$i ?v0 ?v4) ?v5) (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v5) ?v2) (fun_app$d ?v3 ?v5))) (fun_app$d ?v3 ?v4))))) (fun_app$d ?v3 ?v1))) :named a49))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2_bool_fun$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (and (forall ((?v4 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v2) (fun_app$b ?v3 ?v4))) (forall ((?v4 State2$) (?v5 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v4) ?v5) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v5) ?v2) (fun_app$b ?v3 ?v5))) (fun_app$b ?v3 ?v4))))) (fun_app$b ?v3 ?v1))) :named a50))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v2) ?v3)) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v3))) :named a51))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i ?v0 ?v1) ?v2) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v2) ?v3)) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v3))) :named a52))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v2) ?v3)) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v3))) :named a53))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1_state1_bool_fun_fun$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (and (forall ((?v4 State1$) (?v5 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v5) (fun_app$c (fun_app$h ?v3 ?v4) ?v5))) (forall ((?v4 State1$) (?v5 State1$) (?v6 State1$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v4) ?v5) (and (fun_app$c (fun_app$h ?v3 ?v4) ?v5) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v5) ?v6) (fun_app$c (fun_app$h ?v3 ?v5) ?v6)))) (fun_app$c (fun_app$h ?v3 ?v4) ?v6))))) (fun_app$c (fun_app$h ?v3 ?v1) ?v2))) :named a54))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index_index_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (and (forall ((?v4 Index$) (?v5 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v4) ?v5) (fun_app$d (fun_app$i ?v3 ?v4) ?v5))) (forall ((?v4 Index$) (?v5 Index$) (?v6 Index$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v4) ?v5) (and (fun_app$d (fun_app$i ?v3 ?v4) ?v5) (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v5) ?v6) (fun_app$d (fun_app$i ?v3 ?v5) ?v6)))) (fun_app$d (fun_app$i ?v3 ?v4) ?v6))))) (fun_app$d (fun_app$i ?v3 ?v1) ?v2))) :named a55))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2_state2_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (and (forall ((?v4 State2$) (?v5 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v5) (fun_app$b (fun_app$g ?v3 ?v4) ?v5))) (forall ((?v4 State2$) (?v5 State2$) (?v6 State2$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v4) ?v5) (and (fun_app$b (fun_app$g ?v3 ?v4) ?v5) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v5) ?v6) (fun_app$b (fun_app$g ?v3 ?v5) ?v6)))) (fun_app$b (fun_app$g ?v3 ?v4) ?v6))))) (fun_app$b (fun_app$g ?v3 ?v1) ?v2))) :named a56))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (and (=> (fun_app$c (fun_app$h ?v0 ?v1) ?v2) false) (forall ((?v3 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v1) ?v3) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v3) ?v2)) false)))) false)) :named a57))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (and (=> (fun_app$d (fun_app$i ?v0 ?v1) ?v2) false) (forall ((?v3 Index$)) (=> (and (fun_app$d (fun_app$i ?v0 ?v1) ?v3) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v3) ?v2)) false)))) false)) :named a58))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (and (=> (fun_app$b (fun_app$g ?v0 ?v1) ?v2) false) (forall ((?v3 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v1) ?v3) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v3) ?v2)) false)))) false)) :named a59))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1_bool_fun$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (and (forall ((?v4 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v1) ?v4) (fun_app$c ?v3 ?v4))) (forall ((?v4 State1$) (?v5 State1$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v4) (and (fun_app$c (fun_app$h ?v0 ?v4) ?v5) (fun_app$c ?v3 ?v4))) (fun_app$c ?v3 ?v5))))) (fun_app$c ?v3 ?v2))) :named a60))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index_bool_fun$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (and (forall ((?v4 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v1) ?v4) (fun_app$d ?v3 ?v4))) (forall ((?v4 Index$) (?v5 Index$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v4) (and (fun_app$d (fun_app$i ?v0 ?v4) ?v5) (fun_app$d ?v3 ?v4))) (fun_app$d ?v3 ?v5))))) (fun_app$d ?v3 ?v2))) :named a61))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2_bool_fun$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (and (forall ((?v4 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v1) ?v4) (fun_app$b ?v3 ?v4))) (forall ((?v4 State2$) (?v5 State2$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v4) (and (fun_app$b (fun_app$g ?v0 ?v4) ?v5) (fun_app$b ?v3 ?v4))) (fun_app$b ?v3 ?v5))))) (fun_app$b ?v3 ?v2))) :named a62))
(assert (! (well_founded$ order$) :named a63))
(assert (! (forall ((?v0 State1$)) (=> (fun_app$c (inf$ step1$) ?v0) (not (fun_app$c (finished$ step1$) ?v0)))) :named a64))
(assert (! (fun_app$b (fun_app$g step2$ s2_a$) s2$) :named a65))
(assert (! (wfP$ order$) :named a66))
(assert (! (or (exists ((?v0 Index$) (?v1 State1$)) (and (fun_app$c (fun_app$h (tranclp$ step1$) s1a$) ?v1) (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) s2_a$))) (exists ((?v0 Index$)) (and (fun_app$b (fun_app$n (fun_app$o match$ ?v0) s1a$) s2_a$) (fun_app$d (fun_app$i (tranclp$a order$) ?v0) i1a$)))) :named a67))
(assert (! (forall ((?v0 Index$) (?v1 State1$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$g step2$ ?v2) ?v3)) (or (exists ((?v4 Index$) (?v5 State1$)) (and (fun_app$c (fun_app$h (tranclp$ step1$) ?v1) ?v5) (fun_app$b (fun_app$n (fun_app$o match$ ?v4) ?v5) ?v3))) (exists ((?v4 Index$)) (and (fun_app$b (fun_app$n (fun_app$o match$ ?v4) ?v1) ?v3) (fun_app$d (fun_app$i order$ ?v4) ?v0)))))) :named a68))
(assert (! (forall ((?v0 Index$) (?v1 State1$)) (=> (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) s2$a) (or (exists ((?v2 Index$) (?v3 State1$)) (and (fun_app$c (fun_app$h (tranclp$ step1$) ?v1) ?v3) (fun_app$b (fun_app$n (fun_app$o match$ ?v2) ?v3) s2_a$))) (exists ((?v2 Index$)) (and (fun_app$b (fun_app$n (fun_app$o match$ ?v2) ?v1) s2_a$) (fun_app$d (fun_app$i (tranclp$a order$) ?v2) ?v0)))))) :named a69))
(assert (! (forall ((?v0 State1$) (?v1 State1$) (?v2 State1$)) (=> (and (forall ((?v3 State1$) (?v4 State1$) (?v5 State1$)) (=> (and (fun_app$c (fun_app$h step1$ ?v3) ?v4) (fun_app$c (fun_app$h step1$ ?v3) ?v5)) (= ?v4 ?v5))) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v0) ?v1) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v0) ?v2) (and (fun_app$c (finished$ step1$) ?v1) (fun_app$c (finished$ step1$) ?v2))))) (= ?v1 ?v2))) :named a70))
(assert (! (forall ((?v0 State1$)) (=> (fun_app$c final1$ ?v0) (fun_app$c (finished$ step1$) ?v0))) :named a71))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$)) (! (= (fun_app$c (finished$ ?v0) ?v1) (not (exists ((?v2 State1$)) (fun_app$c (fun_app$h ?v0 ?v1) ?v2)))) :pattern ((fun_app$c (finished$ ?v0) ?v1)))) :named a72))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$)) (! (= (fun_app$b (finished$a ?v0) ?v1) (not (exists ((?v2 State2$)) (fun_app$b (fun_app$g ?v0 ?v1) ?v2)))) :pattern ((fun_app$b (finished$a ?v0) ?v1)))) :named a73))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$)) (= (backward_simulation_axioms$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (forall ((?v6 Index$) (?v7 State1$) (?v8 State2$)) (=> (and (fun_app$b (fun_app$n (fun_app$o ?v5 ?v6) ?v7) ?v8) (fun_app$b ?v3 ?v8)) (fun_app$c ?v2 ?v7))) (forall ((?v6 Index$) (?v7 State1$) (?v8 State2$) (?v9 State2$)) (=> (and (fun_app$b (fun_app$n (fun_app$o ?v5 ?v6) ?v7) ?v8) (fun_app$b (fun_app$g ?v1 ?v8) ?v9)) (or (exists ((?v10 Index$) (?v11 State1$)) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v7) ?v11) (fun_app$b (fun_app$n (fun_app$o ?v5 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$b (fun_app$n (fun_app$o ?v5 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v4 ?v10) ?v6))))))))) :named a74))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$)) (= (backward_simulation_axioms$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (forall ((?v6 Index$) (?v7 State2$) (?v8 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$q ?v5 ?v6) ?v7) ?v8) (fun_app$b ?v3 ?v8)) (fun_app$b ?v2 ?v7))) (forall ((?v6 Index$) (?v7 State2$) (?v8 State2$) (?v9 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$q ?v5 ?v6) ?v7) ?v8) (fun_app$b (fun_app$g ?v1 ?v8) ?v9)) (or (exists ((?v10 Index$) (?v11 State2$)) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v7) ?v11) (fun_app$b (fun_app$g (fun_app$q ?v5 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$b (fun_app$g (fun_app$q ?v5 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v4 ?v10) ?v6))))))))) :named a75))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$)) (= (backward_simulation_axioms$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (forall ((?v6 Index$) (?v7 State2$) (?v8 State1$)) (=> (and (fun_app$c (fun_app$r (fun_app$s ?v5 ?v6) ?v7) ?v8) (fun_app$c ?v3 ?v8)) (fun_app$b ?v2 ?v7))) (forall ((?v6 Index$) (?v7 State2$) (?v8 State1$) (?v9 State1$)) (=> (and (fun_app$c (fun_app$r (fun_app$s ?v5 ?v6) ?v7) ?v8) (fun_app$c (fun_app$h ?v1 ?v8) ?v9)) (or (exists ((?v10 Index$) (?v11 State2$)) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v7) ?v11) (fun_app$c (fun_app$r (fun_app$s ?v5 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$c (fun_app$r (fun_app$s ?v5 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v4 ?v10) ?v6))))))))) :named a76))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$)) (= (backward_simulation_axioms$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (forall ((?v6 Index$) (?v7 State1$) (?v8 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$t ?v5 ?v6) ?v7) ?v8) (fun_app$c ?v3 ?v8)) (fun_app$c ?v2 ?v7))) (forall ((?v6 Index$) (?v7 State1$) (?v8 State1$) (?v9 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$t ?v5 ?v6) ?v7) ?v8) (fun_app$c (fun_app$h ?v1 ?v8) ?v9)) (or (exists ((?v10 Index$) (?v11 State1$)) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v7) ?v11) (fun_app$c (fun_app$h (fun_app$t ?v5 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$c (fun_app$h (fun_app$t ?v5 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v4 ?v10) ?v6))))))))) :named a77))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (=> (fun_app$b (fun_app$g step2$ ?v0) ?v1) (not (fun_app$b (finished$a step2$) ?v0)))) :named a78))
(assert (! (fun_app$b (fun_app$g (tranclp$b step2$) s2$a) s2_a$) :named a79))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (= (rtranclp$a (rtranclp$a ?v0)) (rtranclp$a ?v0))) :named a80))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (fun_app$p rtranclp$ (fun_app$p rtranclp$ ?v0)) (fun_app$p rtranclp$ ?v0))) :named a81))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (fun_app$u rtranclp$b (fun_app$u rtranclp$b ?v0)) (fun_app$u rtranclp$b ?v0))) :named a82))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v1) ?v2) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2))) :named a83))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2))) :named a84))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2))) :named a85))
(assert (! (forall ((?v0 State1$)) (or (exists ((?v1 State1$)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v0) ?v1) (fun_app$c (finished$ step1$) ?v1))) (fun_app$c (inf$ step1$) ?v0))) :named a86))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (= (tranclp$a (rtranclp$a ?v0)) (rtranclp$a ?v0))) :named a87))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (tranclp$ (fun_app$p rtranclp$ ?v0)) (fun_app$p rtranclp$ ?v0))) :named a88))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (tranclp$b (fun_app$u rtranclp$b ?v0)) (fun_app$u rtranclp$b ?v0))) :named a89))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (= (rtranclp$a (tranclp$a ?v0)) (rtranclp$a ?v0))) :named a90))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (fun_app$p rtranclp$ (tranclp$ ?v0)) (fun_app$p rtranclp$ ?v0))) :named a91))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (fun_app$u rtranclp$b (tranclp$b ?v0)) (fun_app$u rtranclp$b ?v0))) :named a92))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (and (forall ((?v3 Index$)) (=> (and (= ?v1 ?v3) (= ?v2 ?v3)) false)) (forall ((?v3 Index$) (?v4 Index$) (?v5 Index$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v3) ?v4) (fun_app$d (fun_app$i ?v0 ?v4) ?v5)))) false)))) false)) :named a93))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (and (forall ((?v3 State1$)) (=> (and (= ?v1 ?v3) (= ?v2 ?v3)) false)) (forall ((?v3 State1$) (?v4 State1$) (?v5 State1$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v3) ?v4) (fun_app$c (fun_app$h ?v0 ?v4) ?v5)))) false)))) false)) :named a94))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (and (forall ((?v3 State2$)) (=> (and (= ?v1 ?v3) (= ?v2 ?v3)) false)) (forall ((?v3 State2$) (?v4 State2$) (?v5 State2$)) (=> (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v3) ?v4) (fun_app$b (fun_app$g ?v0 ?v4) ?v5)))) false)))) false)) :named a95))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (= (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (or (exists ((?v3 Index$)) (and (= ?v1 ?v3) (= ?v2 ?v3))) (exists ((?v3 Index$) (?v4 Index$) (?v5 Index$)) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v3) ?v4) (fun_app$d (fun_app$i ?v0 ?v4) ?v5)))))))) :named a96))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (= (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (or (exists ((?v3 State1$)) (and (= ?v1 ?v3) (= ?v2 ?v3))) (exists ((?v3 State1$) (?v4 State1$) (?v5 State1$)) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v3) ?v4) (fun_app$c (fun_app$h ?v0 ?v4) ?v5)))))))) :named a97))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (= (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (or (exists ((?v3 State2$)) (and (= ?v1 ?v3) (= ?v2 ?v3))) (exists ((?v3 State2$) (?v4 State2$) (?v5 State2$)) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v3) ?v4) (fun_app$b (fun_app$g ?v0 ?v4) ?v5)))))))) :named a98))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$)) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v1)) :named a99))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$)) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v1)) :named a100))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$)) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v1)) :named a101))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$i ?v0 ?v2) ?v3)) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v3))) :named a102))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$h ?v0 ?v2) ?v3)) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v3))) :named a103))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (fun_app$b (fun_app$g ?v0 ?v2) ?v3)) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v3))) :named a104))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_index_bool_fun_fun$) (?v2 Index$) (?v3 Index$)) (=> (and (forall ((?v4 Index$) (?v5 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v4) ?v5) (fun_app$d (fun_app$i ?v1 ?v4) ?v5))) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3)) (fun_app$d (fun_app$i (rtranclp$a ?v1) ?v2) ?v3))) :named a105))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1$) (?v3 State1$)) (=> (and (forall ((?v4 State1$) (?v5 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v5) (fun_app$c (fun_app$h ?v1 ?v4) ?v5))) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3)) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v1) ?v2) ?v3))) :named a106))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2$) (?v3 State2$)) (=> (and (forall ((?v4 State2$) (?v5 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v5) (fun_app$b (fun_app$g ?v1 ?v4) ?v5))) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3)) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v1) ?v2) ?v3))) :named a107))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3)) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v3))) :named a108))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3)) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v3))) :named a109))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3)) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v3))) :named a110))
(assert (! (forall ((?v0 Index$) (?v1 Index_bool_fun$)) (= (member$b ?v0 (collect$ ?v1)) (fun_app$d ?v1 ?v0))) :named a111))
(assert (! (forall ((?v0 State2$) (?v1 State2_bool_fun$)) (= (member$ ?v0 (collect$a ?v1)) (fun_app$b ?v1 ?v0))) :named a112))
(assert (! (forall ((?v0 State1$) (?v1 State1_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$c ?v1 ?v0))) :named a113))
(assert (! (forall ((?v0 Index_set$)) (= (collect$ (uu$ ?v0)) ?v0)) :named a114))
(assert (! (forall ((?v0 State2_set$)) (= (collect$a (uua$ ?v0)) ?v0)) :named a115))
(assert (! (forall ((?v0 State1_set$)) (= (collect$b (uub$ ?v0)) ?v0)) :named a116))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index_bool_fun$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (and (fun_app$d ?v3 ?v1) (forall ((?v4 Index$) (?v5 Index$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v4) (and (fun_app$d (fun_app$i ?v0 ?v4) ?v5) (fun_app$d ?v3 ?v4))) (fun_app$d ?v3 ?v5))))) (fun_app$d ?v3 ?v2))) :named a117))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1_bool_fun$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (and (fun_app$c ?v3 ?v1) (forall ((?v4 State1$) (?v5 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v4) (and (fun_app$c (fun_app$h ?v0 ?v4) ?v5) (fun_app$c ?v3 ?v4))) (fun_app$c ?v3 ?v5))))) (fun_app$c ?v3 ?v2))) :named a118))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2_bool_fun$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (and (fun_app$b ?v3 ?v1) (forall ((?v4 State2$) (?v5 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v4) (and (fun_app$b (fun_app$g ?v0 ?v4) ?v5) (fun_app$b ?v3 ?v4))) (fun_app$b ?v3 ?v5))))) (fun_app$b ?v3 ?v2))) :named a119))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (and (=> (= ?v1 ?v2) false) (forall ((?v3 Index$)) (=> (and (fun_app$d (fun_app$i ?v0 ?v1) ?v3) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v3) ?v2)) false)))) false)) :named a120))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (and (=> (= ?v1 ?v2) false) (forall ((?v3 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v1) ?v3) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v3) ?v2)) false)))) false)) :named a121))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (and (=> (= ?v1 ?v2) false) (forall ((?v3 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v1) ?v3) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v3) ?v2)) false)))) false)) :named a122))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index_bool_fun$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (and (fun_app$d ?v3 ?v2) (forall ((?v4 Index$) (?v5 Index$)) (=> (and (fun_app$d (fun_app$i ?v0 ?v4) ?v5) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v5) ?v2) (fun_app$d ?v3 ?v5))) (fun_app$d ?v3 ?v4))))) (fun_app$d ?v3 ?v1))) :named a123))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1_bool_fun$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (and (fun_app$c ?v3 ?v2) (forall ((?v4 State1$) (?v5 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v4) ?v5) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v5) ?v2) (fun_app$c ?v3 ?v5))) (fun_app$c ?v3 ?v4))))) (fun_app$c ?v3 ?v1))) :named a124))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2_bool_fun$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (and (fun_app$b ?v3 ?v2) (forall ((?v4 State2$) (?v5 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v4) ?v5) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v5) ?v2) (fun_app$b ?v3 ?v5))) (fun_app$b ?v3 ?v4))))) (fun_app$b ?v3 ?v1))) :named a125))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i ?v0 ?v1) ?v2) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3)) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v3))) :named a126))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3)) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v3))) :named a127))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3)) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v3))) :named a128))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (and (fun_app$d (finished$b ?v0) ?v1) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2)) (= ?v1 ?v2))) :named a129))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (and (fun_app$c (finished$ ?v0) ?v1) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2)) (= ?v1 ?v2))) :named a130))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (and (fun_app$b (finished$a ?v0) ?v1) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2)) (= ?v1 ?v2))) :named a131))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (exists ((?v3 Index$)) (and (fun_app$d (fun_app$i ?v0 ?v1) ?v3) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v3) ?v2))))) :named a132))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (exists ((?v3 State1$)) (and (fun_app$c (fun_app$h ?v0 ?v1) ?v3) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v3) ?v2))))) :named a133))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (exists ((?v3 State2$)) (and (fun_app$b (fun_app$g ?v0 ?v1) ?v3) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v3) ?v2))))) :named a134))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (or (= ?v1 ?v2) (and (not (= ?v1 ?v2)) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2))))) :named a135))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (or (= ?v1 ?v2) (and (not (= ?v1 ?v2)) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2))))) :named a136))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (or (= ?v1 ?v2) (and (not (= ?v1 ?v2)) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2))))) :named a137))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2))) :named a138))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2))) :named a139))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2))) :named a140))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$i ?v0 ?v2) ?v3)) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v3))) :named a141))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$h ?v0 ?v2) ?v3)) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v3))) :named a142))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (fun_app$b (fun_app$g ?v0 ?v2) ?v3)) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v3))) :named a143))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i ?v0 ?v1) ?v2) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3)) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v3))) :named a144))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3)) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v3))) :named a145))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3)) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v3))) :named a146))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v2) ?v3)) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v3))) :named a147))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v2) ?v3)) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v3))) :named a148))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v2) ?v3)) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v3))) :named a149))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3)) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v3))) :named a150))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3)) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v3))) :named a151))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3)) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v3))) :named a152))
(assert (! (forall ((?v0 Index_state1_state2_bool_fun_fun_fun$) (?v1 State2_bool_fun$) (?v2 State1_bool_fun$) (?v3 State2_state2_bool_fun_fun$) (?v4 State1_state1_bool_fun_fun$) (?v5 Index_index_bool_fun_fun$)) (=> (and (forall ((?v6 Index$) (?v7 State1$) (?v8 State2$)) (=> (and (fun_app$b (fun_app$n (fun_app$o ?v0 ?v6) ?v7) ?v8) (fun_app$b ?v1 ?v8)) (fun_app$c ?v2 ?v7))) (forall ((?v6 Index$) (?v7 State1$) (?v8 State2$) (?v9 State2$)) (=> (and (fun_app$b (fun_app$n (fun_app$o ?v0 ?v6) ?v7) ?v8) (fun_app$b (fun_app$g ?v3 ?v8) ?v9)) (or (exists ((?v10 Index$) (?v11 State1$)) (and (fun_app$c (fun_app$h (tranclp$ ?v4) ?v7) ?v11) (fun_app$b (fun_app$n (fun_app$o ?v0 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$b (fun_app$n (fun_app$o ?v0 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v5 ?v10) ?v6))))))) (backward_simulation_axioms$ ?v4 ?v3 ?v2 ?v1 ?v5 ?v0))) :named a153))
(assert (! (forall ((?v0 Index_state2_state2_bool_fun_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2_bool_fun$) (?v3 State2_state2_bool_fun_fun$) (?v4 State2_state2_bool_fun_fun$) (?v5 Index_index_bool_fun_fun$)) (=> (and (forall ((?v6 Index$) (?v7 State2$) (?v8 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$q ?v0 ?v6) ?v7) ?v8) (fun_app$b ?v1 ?v8)) (fun_app$b ?v2 ?v7))) (forall ((?v6 Index$) (?v7 State2$) (?v8 State2$) (?v9 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$q ?v0 ?v6) ?v7) ?v8) (fun_app$b (fun_app$g ?v3 ?v8) ?v9)) (or (exists ((?v10 Index$) (?v11 State2$)) (and (fun_app$b (fun_app$g (tranclp$b ?v4) ?v7) ?v11) (fun_app$b (fun_app$g (fun_app$q ?v0 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$b (fun_app$g (fun_app$q ?v0 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v5 ?v10) ?v6))))))) (backward_simulation_axioms$a ?v4 ?v3 ?v2 ?v1 ?v5 ?v0))) :named a154))
(assert (! (forall ((?v0 Index_state2_state1_bool_fun_fun_fun$) (?v1 State1_bool_fun$) (?v2 State2_bool_fun$) (?v3 State1_state1_bool_fun_fun$) (?v4 State2_state2_bool_fun_fun$) (?v5 Index_index_bool_fun_fun$)) (=> (and (forall ((?v6 Index$) (?v7 State2$) (?v8 State1$)) (=> (and (fun_app$c (fun_app$r (fun_app$s ?v0 ?v6) ?v7) ?v8) (fun_app$c ?v1 ?v8)) (fun_app$b ?v2 ?v7))) (forall ((?v6 Index$) (?v7 State2$) (?v8 State1$) (?v9 State1$)) (=> (and (fun_app$c (fun_app$r (fun_app$s ?v0 ?v6) ?v7) ?v8) (fun_app$c (fun_app$h ?v3 ?v8) ?v9)) (or (exists ((?v10 Index$) (?v11 State2$)) (and (fun_app$b (fun_app$g (tranclp$b ?v4) ?v7) ?v11) (fun_app$c (fun_app$r (fun_app$s ?v0 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$c (fun_app$r (fun_app$s ?v0 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v5 ?v10) ?v6))))))) (backward_simulation_axioms$b ?v4 ?v3 ?v2 ?v1 ?v5 ?v0))) :named a155))
(assert (! (forall ((?v0 Index_state1_state1_bool_fun_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1_bool_fun$) (?v3 State1_state1_bool_fun_fun$) (?v4 State1_state1_bool_fun_fun$) (?v5 Index_index_bool_fun_fun$)) (=> (and (forall ((?v6 Index$) (?v7 State1$) (?v8 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$t ?v0 ?v6) ?v7) ?v8) (fun_app$c ?v1 ?v8)) (fun_app$c ?v2 ?v7))) (forall ((?v6 Index$) (?v7 State1$) (?v8 State1$) (?v9 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$t ?v0 ?v6) ?v7) ?v8) (fun_app$c (fun_app$h ?v3 ?v8) ?v9)) (or (exists ((?v10 Index$) (?v11 State1$)) (and (fun_app$c (fun_app$h (tranclp$ ?v4) ?v7) ?v11) (fun_app$c (fun_app$h (fun_app$t ?v0 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$c (fun_app$h (fun_app$t ?v0 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v5 ?v10) ?v6))))))) (backward_simulation_axioms$c ?v4 ?v3 ?v2 ?v1 ?v5 ?v0))) :named a156))
(assert (! (forall ((?v0 State1$)) (= (fun_app$c (safe$ step1$ final1$) ?v0) (forall ((?v1 State1$)) (=> (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v0) ?v1) (or (fun_app$c final1$ ?v1) (exists ((?v2 State1$)) (fun_app$c (fun_app$h step1$ ?v1) ?v2))))))) :named a157))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v0) ?v1) (fun_app$c (safe$ step1$ final1$) ?v0)) (fun_app$c (safe$ step1$ final1$) ?v1))) :named a158))
(assert (! (forall ((?v0 State1$)) (=> (fun_app$c final1$ ?v0) (fun_app$c (safe$ step1$ final1$) ?v0))) :named a159))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (=> (and (fun_app$c (fun_app$h step1$ ?v0) ?v1) (fun_app$c (safe$ step1$ final1$) ?v0)) (fun_app$c (safe$ step1$ final1$) ?v1))) :named a160))
(assert (! (semantics$ step1$ final1$) :named a161))
(assert (! (backward_simulation$ step1$ step2$ final1$ final2$ order$ match$) :named a162))
(assert (! (wfP$a uuc$) :named a163))
(assert (! (wfP$b uud$) :named a164))
(assert (! (wfP$c uue$) :named a165))
(assert (! (wfP$ uuf$) :named a166))
(assert (! (forall ((?v0 State2$)) (=> (fun_app$b (inf$a step2$) ?v0) (not (fun_app$b (finished$a step2$) ?v0)))) :named a167))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (! (= (well_founded$a ?v0) (wfP$a ?v0)) :pattern ((well_founded$a ?v0)))) :named a168))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (! (= (well_founded$b ?v0) (wfP$b ?v0)) :pattern ((well_founded$b ?v0)))) :named a169))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$)) (! (= (well_founded$c ?v0) (wfP$c ?v0)) :pattern ((well_founded$c ?v0)))) :named a170))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (! (= (well_founded$ ?v0) (wfP$ ?v0)) :pattern ((well_founded$ ?v0)))) :named a171))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (wfP$a ?v0) (well_founded$a ?v0))) :named a172))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (wfP$b ?v0) (well_founded$b ?v0))) :named a173))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$)) (=> (wfP$c ?v0) (well_founded$c ?v0))) :named a174))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (=> (wfP$ ?v0) (well_founded$ ?v0))) :named a175))
(assert (! (forall ((?v0 State2$) (?v1 State2$) (?v2 State2$)) (=> (and (forall ((?v3 State2$) (?v4 State2$) (?v5 State2$)) (=> (and (fun_app$b (fun_app$g step2$ ?v3) ?v4) (fun_app$b (fun_app$g step2$ ?v3) ?v5)) (= ?v4 ?v5))) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v0) ?v1) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v0) ?v2) (and (fun_app$b (finished$a step2$) ?v1) (fun_app$b (finished$a step2$) ?v2))))) (= ?v1 ?v2))) :named a176))
(assert (! (forall ((?v0 State2$)) (or (exists ((?v1 State2$)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v0) ?v1) (fun_app$b (finished$a step2$) ?v1))) (fun_app$b (inf$a step2$) ?v0))) :named a177))
(assert (! (forall ((?v0 State2$)) (=> (fun_app$b final2$ ?v0) (fun_app$b (finished$a step2$) ?v0))) :named a178))
(assert (! (forall ((?v0 Index$) (?v1 State1$) (?v2 State2$)) (=> (and (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) ?v2) (fun_app$b final2$ ?v2)) (fun_app$c final1$ ?v1))) :named a179))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (=> (and (semantics$ ?v0 ?v1) (fun_app$c ?v1 ?v2)) (fun_app$c (safe$ ?v0 ?v1) ?v2))) :named a180))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (=> (and (semantics$a ?v0 ?v1) (fun_app$b ?v1 ?v2)) (fun_app$b (safe$a ?v0 ?v1) ?v2))) :named a181))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1$)) (=> (and (semantics$ ?v0 ?v1) (and (fun_app$c (fun_app$h ?v0 ?v2) ?v3) (fun_app$c (safe$ ?v0 ?v1) ?v2))) (fun_app$c (safe$ ?v0 ?v1) ?v3))) :named a182))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2$)) (=> (and (semantics$a ?v0 ?v1) (and (fun_app$b (fun_app$g ?v0 ?v2) ?v3) (fun_app$b (safe$a ?v0 ?v1) ?v2))) (fun_app$b (safe$a ?v0 ?v1) ?v3))) :named a183))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$)) (! (= (safe$ ?v0 ?v1) (safe$ ?v0 ?v1)) :pattern ((safe$ ?v0 ?v1)))) :named a184))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$)) (! (= (safe$a ?v0 ?v1) (safe$a ?v0 ?v1)) :pattern ((safe$a ?v0 ?v1)))) :named a185))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$)) (=> (backward_simulation$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (semantics$a ?v1 ?v3))) :named a186))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$)) (=> (backward_simulation$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (semantics$ ?v1 ?v3))) :named a187))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$)) (=> (backward_simulation$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (semantics$ ?v1 ?v3))) :named a188))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$)) (=> (backward_simulation$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (semantics$a ?v1 ?v3))) :named a189))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$)) (=> (backward_simulation$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (semantics$a ?v0 ?v2))) :named a190))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$)) (=> (backward_simulation$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (semantics$a ?v0 ?v2))) :named a191))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$)) (=> (backward_simulation$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (semantics$ ?v0 ?v2))) :named a192))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$)) (=> (backward_simulation$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (semantics$ ?v0 ?v2))) :named a193))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$) (?v6 Index$) (?v7 State2$) (?v8 State2$)) (=> (and (backward_simulation$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (fun_app$b (fun_app$g (fun_app$q ?v5 ?v6) ?v7) ?v8) (fun_app$b ?v3 ?v8))) (fun_app$b ?v2 ?v7))) :named a194))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$) (?v6 Index$) (?v7 State2$) (?v8 State1$)) (=> (and (backward_simulation$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (fun_app$c (fun_app$r (fun_app$s ?v5 ?v6) ?v7) ?v8) (fun_app$c ?v3 ?v8))) (fun_app$b ?v2 ?v7))) :named a195))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$) (?v6 Index$) (?v7 State1$) (?v8 State1$)) (=> (and (backward_simulation$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (fun_app$c (fun_app$h (fun_app$t ?v5 ?v6) ?v7) ?v8) (fun_app$c ?v3 ?v8))) (fun_app$c ?v2 ?v7))) :named a196))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$) (?v6 Index$) (?v7 State1$) (?v8 State2$)) (=> (and (backward_simulation$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (fun_app$b (fun_app$n (fun_app$o ?v5 ?v6) ?v7) ?v8) (fun_app$b ?v3 ?v8))) (fun_app$c ?v2 ?v7))) :named a197))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$)) (=> (semantics$b ?v0 ?v1) (= (fun_app$d (safe$b ?v0 ?v1) ?v2) (forall ((?v3 Index$)) (=> (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3) (or (fun_app$d ?v1 ?v3) (exists ((?v4 Index$)) (fun_app$d (fun_app$i ?v0 ?v3) ?v4)))))))) :named a198))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (=> (semantics$ ?v0 ?v1) (= (fun_app$c (safe$ ?v0 ?v1) ?v2) (forall ((?v3 State1$)) (=> (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3) (or (fun_app$c ?v1 ?v3) (exists ((?v4 State1$)) (fun_app$c (fun_app$h ?v0 ?v3) ?v4)))))))) :named a199))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (=> (semantics$a ?v0 ?v1) (= (fun_app$b (safe$a ?v0 ?v1) ?v2) (forall ((?v3 State2$)) (=> (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3) (or (fun_app$b ?v1 ?v3) (exists ((?v4 State2$)) (fun_app$b (fun_app$g ?v0 ?v3) ?v4)))))))) :named a200))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$) (?v3 Index$)) (=> (and (semantics$b ?v0 ?v1) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3) (fun_app$d (safe$b ?v0 ?v1) ?v2))) (fun_app$d (safe$b ?v0 ?v1) ?v3))) :named a201))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1$)) (=> (and (semantics$ ?v0 ?v1) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3) (fun_app$c (safe$ ?v0 ?v1) ?v2))) (fun_app$c (safe$ ?v0 ?v1) ?v3))) :named a202))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2$)) (=> (and (semantics$a ?v0 ?v1) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3) (fun_app$b (safe$a ?v0 ?v1) ?v2))) (fun_app$b (safe$a ?v0 ?v1) ?v3))) :named a203))
(assert (! (forall ((?v0 State1_bool_fun$) (?v1 State1_state1_bool_fun_fun$)) (=> (forall ((?v2 State1$)) (=> (fun_app$c ?v0 ?v2) (fun_app$c (finished$ ?v1) ?v2))) (semantics$ ?v1 ?v0))) :named a204))
(assert (! (forall ((?v0 State2_bool_fun$) (?v1 State2_state2_bool_fun_fun$)) (=> (forall ((?v2 State2$)) (=> (fun_app$b ?v0 ?v2) (fun_app$b (finished$a ?v1) ?v2))) (semantics$a ?v1 ?v0))) :named a205))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1$)) (=> (and (semantics$ ?v0 ?v1) (fun_app$c (fun_app$h ?v0 ?v2) ?v3)) (not (fun_app$c (finished$ ?v0) ?v2)))) :named a206))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2$)) (=> (and (semantics$a ?v0 ?v1) (fun_app$b (fun_app$g ?v0 ?v2) ?v3)) (not (fun_app$b (finished$a ?v0) ?v2)))) :named a207))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (=> (and (semantics$ ?v0 ?v1) (fun_app$c ?v1 ?v2)) (fun_app$c (finished$ ?v0) ?v2))) :named a208))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (=> (and (semantics$a ?v0 ?v1) (fun_app$b ?v1 ?v2)) (fun_app$b (finished$a ?v0) ?v2))) :named a209))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$)) (= (semantics$ ?v0 ?v1) (forall ((?v2 State1$)) (=> (fun_app$c ?v1 ?v2) (fun_app$c (finished$ ?v0) ?v2))))) :named a210))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$)) (= (semantics$a ?v0 ?v1) (forall ((?v2 State2$)) (=> (fun_app$b ?v1 ?v2) (fun_app$b (finished$a ?v0) ?v2))))) :named a211))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1_state1_bool_fun_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_prod_index_index_prod_bool_fun_fun$) (?v5 Index_index_prod_state1_state1_bool_fun_fun_fun$)) (=> (and (semantics$ ?v0 ?v1) (and (semantics$ ?v2 ?v3) (and (well_founded$c ?v4) (backward_simulation_axioms$d ?v0 ?v2 ?v1 ?v3 ?v4 ?v5)))) (backward_simulation$d ?v0 ?v2 ?v1 ?v3 ?v4 ?v5))) :named a212))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State2_state2_bool_fun_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_prod_index_index_prod_bool_fun_fun$) (?v5 Index_index_prod_state1_state2_bool_fun_fun_fun$)) (=> (and (semantics$ ?v0 ?v1) (and (semantics$a ?v2 ?v3) (and (well_founded$c ?v4) (backward_simulation_axioms$e ?v0 ?v2 ?v1 ?v3 ?v4 ?v5)))) (backward_simulation$e ?v0 ?v2 ?v1 ?v3 ?v4 ?v5))) :named a213))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State1_state1_bool_fun_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_prod_index_index_prod_bool_fun_fun$) (?v5 Index_index_prod_state2_state1_bool_fun_fun_fun$)) (=> (and (semantics$a ?v0 ?v1) (and (semantics$ ?v2 ?v3) (and (well_founded$c ?v4) (backward_simulation_axioms$f ?v0 ?v2 ?v1 ?v3 ?v4 ?v5)))) (backward_simulation$f ?v0 ?v2 ?v1 ?v3 ?v4 ?v5))) :named a214))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2_state2_bool_fun_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_prod_index_index_prod_bool_fun_fun$) (?v5 Index_index_prod_state2_state2_bool_fun_fun_fun$)) (=> (and (semantics$a ?v0 ?v1) (and (semantics$a ?v2 ?v3) (and (well_founded$c ?v4) (backward_simulation_axioms$g ?v0 ?v2 ?v1 ?v3 ?v4 ?v5)))) (backward_simulation$g ?v0 ?v2 ?v1 ?v3 ?v4 ?v5))) :named a215))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1_state1_bool_fun_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$)) (=> (and (semantics$ ?v0 ?v1) (and (semantics$ ?v2 ?v3) (and (well_founded$ ?v4) (backward_simulation_axioms$c ?v0 ?v2 ?v1 ?v3 ?v4 ?v5)))) (backward_simulation$c ?v0 ?v2 ?v1 ?v3 ?v4 ?v5))) :named a216))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State1_state1_bool_fun_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$)) (=> (and (semantics$a ?v0 ?v1) (and (semantics$ ?v2 ?v3) (and (well_founded$ ?v4) (backward_simulation_axioms$b ?v0 ?v2 ?v1 ?v3 ?v4 ?v5)))) (backward_simulation$b ?v0 ?v2 ?v1 ?v3 ?v4 ?v5))) :named a217))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2_state2_bool_fun_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$)) (=> (and (semantics$a ?v0 ?v1) (and (semantics$a ?v2 ?v3) (and (well_founded$ ?v4) (backward_simulation_axioms$a ?v0 ?v2 ?v1 ?v3 ?v4 ?v5)))) (backward_simulation$a ?v0 ?v2 ?v1 ?v3 ?v4 ?v5))) :named a218))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State2_state2_bool_fun_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$)) (=> (and (semantics$ ?v0 ?v1) (and (semantics$a ?v2 ?v3) (and (well_founded$ ?v4) (backward_simulation_axioms$ ?v0 ?v2 ?v1 ?v3 ?v4 ?v5)))) (backward_simulation$ ?v0 ?v2 ?v1 ?v3 ?v4 ?v5))) :named a219))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_prod_index_index_prod_bool_fun_fun$) (?v5 Index_index_prod_state1_state1_bool_fun_fun_fun$)) (! (= (backward_simulation$d ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (and (semantics$ ?v0 ?v2) (semantics$ ?v1 ?v3)) (and (well_founded$c ?v4) (backward_simulation_axioms$d ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :pattern ((backward_simulation$d ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :named a220))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_prod_index_index_prod_bool_fun_fun$) (?v5 Index_index_prod_state1_state2_bool_fun_fun_fun$)) (! (= (backward_simulation$e ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (and (semantics$ ?v0 ?v2) (semantics$a ?v1 ?v3)) (and (well_founded$c ?v4) (backward_simulation_axioms$e ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :pattern ((backward_simulation$e ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :named a221))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_prod_index_index_prod_bool_fun_fun$) (?v5 Index_index_prod_state2_state1_bool_fun_fun_fun$)) (! (= (backward_simulation$f ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (and (semantics$a ?v0 ?v2) (semantics$ ?v1 ?v3)) (and (well_founded$c ?v4) (backward_simulation_axioms$f ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :pattern ((backward_simulation$f ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :named a222))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_prod_index_index_prod_bool_fun_fun$) (?v5 Index_index_prod_state2_state2_bool_fun_fun_fun$)) (! (= (backward_simulation$g ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (and (semantics$a ?v0 ?v2) (semantics$a ?v1 ?v3)) (and (well_founded$c ?v4) (backward_simulation_axioms$g ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :pattern ((backward_simulation$g ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :named a223))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$)) (! (= (backward_simulation$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (and (semantics$ ?v0 ?v2) (semantics$ ?v1 ?v3)) (and (well_founded$ ?v4) (backward_simulation_axioms$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :pattern ((backward_simulation$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :named a224))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$)) (! (= (backward_simulation$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (and (semantics$a ?v0 ?v2) (semantics$ ?v1 ?v3)) (and (well_founded$ ?v4) (backward_simulation_axioms$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :pattern ((backward_simulation$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :named a225))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$)) (! (= (backward_simulation$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (and (semantics$a ?v0 ?v2) (semantics$a ?v1 ?v3)) (and (well_founded$ ?v4) (backward_simulation_axioms$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :pattern ((backward_simulation$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :named a226))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$)) (! (= (backward_simulation$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (and (semantics$ ?v0 ?v2) (semantics$a ?v1 ?v3)) (and (well_founded$ ?v4) (backward_simulation_axioms$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :pattern ((backward_simulation$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5)))) :named a227))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$) (?v6 Index$) (?v7 State2$) (?v8 State2$) (?v9 State2$)) (=> (and (backward_simulation$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (fun_app$b (fun_app$g (fun_app$q ?v5 ?v6) ?v7) ?v8) (fun_app$b (fun_app$g ?v1 ?v8) ?v9))) (or (exists ((?v10 Index$) (?v11 State2$)) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v7) ?v11) (fun_app$b (fun_app$g (fun_app$q ?v5 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$b (fun_app$g (fun_app$q ?v5 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v4 ?v10) ?v6)))))) :named a228))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$) (?v6 Index$) (?v7 State2$) (?v8 State1$) (?v9 State1$)) (=> (and (backward_simulation$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (fun_app$c (fun_app$r (fun_app$s ?v5 ?v6) ?v7) ?v8) (fun_app$c (fun_app$h ?v1 ?v8) ?v9))) (or (exists ((?v10 Index$) (?v11 State2$)) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v7) ?v11) (fun_app$c (fun_app$r (fun_app$s ?v5 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$c (fun_app$r (fun_app$s ?v5 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v4 ?v10) ?v6)))))) :named a229))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$) (?v6 Index$) (?v7 State1$) (?v8 State1$) (?v9 State1$)) (=> (and (backward_simulation$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (fun_app$c (fun_app$h (fun_app$t ?v5 ?v6) ?v7) ?v8) (fun_app$c (fun_app$h ?v1 ?v8) ?v9))) (or (exists ((?v10 Index$) (?v11 State1$)) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v7) ?v11) (fun_app$c (fun_app$h (fun_app$t ?v5 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$c (fun_app$h (fun_app$t ?v5 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v4 ?v10) ?v6)))))) :named a230))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$) (?v6 Index$) (?v7 State1$) (?v8 State2$) (?v9 State2$)) (=> (and (backward_simulation$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (and (fun_app$b (fun_app$n (fun_app$o ?v5 ?v6) ?v7) ?v8) (fun_app$b (fun_app$g ?v1 ?v8) ?v9))) (or (exists ((?v10 Index$) (?v11 State1$)) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v7) ?v11) (fun_app$b (fun_app$n (fun_app$o ?v5 ?v10) ?v11) ?v9))) (exists ((?v10 Index$)) (and (fun_app$b (fun_app$n (fun_app$o ?v5 ?v10) ?v7) ?v9) (fun_app$d (fun_app$i ?v4 ?v10) ?v6)))))) :named a231))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$)) (=> (backward_simulation$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (well_founded$ ?v4))) :named a232))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$)) (=> (backward_simulation$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (well_founded$ ?v4))) :named a233))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$)) (=> (backward_simulation$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (well_founded$ ?v4))) :named a234))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$)) (=> (backward_simulation$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (well_founded$ ?v4))) :named a235))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$) (?v3 Index$) (?v4 Index$)) (=> (and (semantics$b ?v0 ?v1) (and (forall ((?v5 Index$) (?v6 Index$) (?v7 Index$)) (=> (and (fun_app$d (fun_app$i ?v0 ?v5) ?v6) (fun_app$d (fun_app$i ?v0 ?v5) ?v7)) (= ?v6 ?v7))) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v4) (and (fun_app$d (finished$b ?v0) ?v3) (fun_app$d (finished$b ?v0) ?v4)))))) (= ?v3 ?v4))) :named a236))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1$) (?v4 State1$)) (=> (and (semantics$ ?v0 ?v1) (and (forall ((?v5 State1$) (?v6 State1$) (?v7 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v5) ?v6) (fun_app$c (fun_app$h ?v0 ?v5) ?v7)) (= ?v6 ?v7))) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v4) (and (fun_app$c (finished$ ?v0) ?v3) (fun_app$c (finished$ ?v0) ?v4)))))) (= ?v3 ?v4))) :named a237))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2$) (?v4 State2$)) (=> (and (semantics$a ?v0 ?v1) (and (forall ((?v5 State2$) (?v6 State2$) (?v7 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v5) ?v6) (fun_app$b (fun_app$g ?v0 ?v5) ?v7)) (= ?v6 ?v7))) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v4) (and (fun_app$b (finished$a ?v0) ?v3) (fun_app$b (finished$a ?v0) ?v4)))))) (= ?v3 ?v4))) :named a238))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (=> (and (semantics$ ?v0 ?v1) (fun_app$c (inf$ ?v0) ?v2)) (not (fun_app$c (finished$ ?v0) ?v2)))) :named a239))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (=> (and (semantics$a ?v0 ?v1) (fun_app$b (inf$a ?v0) ?v2)) (not (fun_app$b (finished$a ?v0) ?v2)))) :named a240))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state2_bool_fun_fun_fun$)) (=> (backward_simulation$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (backward_simulation_axioms$a ?v0 ?v1 ?v2 ?v3 ?v4 ?v5))) :named a241))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State2_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state2_state1_bool_fun_fun_fun$)) (=> (backward_simulation$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (backward_simulation_axioms$b ?v0 ?v1 ?v2 ?v3 ?v4 ?v5))) :named a242))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State1_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state1_bool_fun_fun_fun$)) (=> (backward_simulation$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (backward_simulation_axioms$c ?v0 ?v1 ?v2 ?v3 ?v4 ?v5))) :named a243))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 State1_bool_fun$) (?v3 State2_bool_fun$) (?v4 Index_index_bool_fun_fun$) (?v5 Index_state1_state2_bool_fun_fun_fun$)) (=> (backward_simulation$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5) (backward_simulation_axioms$ ?v0 ?v1 ?v2 ?v3 ?v4 ?v5))) :named a244))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (forall ((?v1 State2_bool_fun$) (?v2 State2$)) (=> (forall ((?v3 State2$)) (=> (forall ((?v4 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v3) (fun_app$b ?v1 ?v4))) (fun_app$b ?v1 ?v3))) (fun_app$b ?v1 ?v2))) (wfP$a ?v0))) :named a245))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (forall ((?v1 State1_bool_fun$) (?v2 State1$)) (=> (forall ((?v3 State1$)) (=> (forall ((?v4 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v3) (fun_app$c ?v1 ?v4))) (fun_app$c ?v1 ?v3))) (fun_app$c ?v1 ?v2))) (wfP$b ?v0))) :named a246))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$)) (=> (forall ((?v1 Index_index_prod_bool_fun$) (?v2 Index_index_prod$)) (=> (forall ((?v3 Index_index_prod$)) (=> (forall ((?v4 Index_index_prod$)) (=> (fun_app$j (fun_app$k ?v0 ?v4) ?v3) (fun_app$j ?v1 ?v4))) (fun_app$j ?v1 ?v3))) (fun_app$j ?v1 ?v2))) (wfP$c ?v0))) :named a247))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (=> (forall ((?v1 Index_bool_fun$) (?v2 Index$)) (=> (forall ((?v3 Index$)) (=> (forall ((?v4 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v4) ?v3) (fun_app$d ?v1 ?v4))) (fun_app$d ?v1 ?v3))) (fun_app$d ?v1 ?v2))) (wfP$ ?v0))) :named a248))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (=> (and (wfP$a ?v0) (forall ((?v3 State2$)) (=> (forall ((?v4 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v3) (fun_app$b ?v1 ?v4))) (fun_app$b ?v1 ?v3)))) (fun_app$b ?v1 ?v2))) :named a249))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (=> (and (wfP$b ?v0) (forall ((?v3 State1$)) (=> (forall ((?v4 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v3) (fun_app$c ?v1 ?v4))) (fun_app$c ?v1 ?v3)))) (fun_app$c ?v1 ?v2))) :named a250))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$) (?v1 Index_index_prod_bool_fun$) (?v2 Index_index_prod$)) (=> (and (wfP$c ?v0) (forall ((?v3 Index_index_prod$)) (=> (forall ((?v4 Index_index_prod$)) (=> (fun_app$j (fun_app$k ?v0 ?v4) ?v3) (fun_app$j ?v1 ?v4))) (fun_app$j ?v1 ?v3)))) (fun_app$j ?v1 ?v2))) :named a251))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$)) (=> (and (wfP$ ?v0) (forall ((?v3 Index$)) (=> (forall ((?v4 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v4) ?v3) (fun_app$d ?v1 ?v4))) (fun_app$d ?v1 ?v3)))) (fun_app$d ?v1 ?v2))) :named a252))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (wfP$a ?v0) (forall ((?v1 State2_set$) (?v2 State2$)) (=> (member$ ?v2 ?v1) (exists ((?v3 State2$)) (and (member$ ?v3 ?v1) (forall ((?v4 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v3) (not (member$ ?v4 ?v1)))))))))) :named a253))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (wfP$b ?v0) (forall ((?v1 State1_set$) (?v2 State1$)) (=> (member$a ?v2 ?v1) (exists ((?v3 State1$)) (and (member$a ?v3 ?v1) (forall ((?v4 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v3) (not (member$a ?v4 ?v1)))))))))) :named a254))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$)) (= (wfP$c ?v0) (forall ((?v1 Index_index_prod_set$) (?v2 Index_index_prod$)) (=> (member$c ?v2 ?v1) (exists ((?v3 Index_index_prod$)) (and (member$c ?v3 ?v1) (forall ((?v4 Index_index_prod$)) (=> (fun_app$j (fun_app$k ?v0 ?v4) ?v3) (not (member$c ?v4 ?v1)))))))))) :named a255))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (= (wfP$ ?v0) (forall ((?v1 Index_set$) (?v2 Index$)) (=> (member$b ?v2 ?v1) (exists ((?v3 Index$)) (and (member$b ?v3 ?v1) (forall ((?v4 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v4) ?v3) (not (member$b ?v4 ?v1)))))))))) :named a256))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (=> (and (wfP$a ?v0) (forall ((?v3 State2$)) (=> (forall ((?v4 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v3) (fun_app$b ?v1 ?v4))) (fun_app$b ?v1 ?v3)))) (fun_app$b ?v1 ?v2))) :named a257))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (=> (and (wfP$b ?v0) (forall ((?v3 State1$)) (=> (forall ((?v4 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v3) (fun_app$c ?v1 ?v4))) (fun_app$c ?v1 ?v3)))) (fun_app$c ?v1 ?v2))) :named a258))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$) (?v1 Index_index_prod_bool_fun$) (?v2 Index_index_prod$)) (=> (and (wfP$c ?v0) (forall ((?v3 Index_index_prod$)) (=> (forall ((?v4 Index_index_prod$)) (=> (fun_app$j (fun_app$k ?v0 ?v4) ?v3) (fun_app$j ?v1 ?v4))) (fun_app$j ?v1 ?v3)))) (fun_app$j ?v1 ?v2))) :named a259))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$)) (=> (and (wfP$ ?v0) (forall ((?v3 Index$)) (=> (forall ((?v4 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v4) ?v3) (fun_app$d ?v1 ?v4))) (fun_app$d ?v1 ?v3)))) (fun_app$d ?v1 ?v2))) :named a260))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$)) (=> (semantics$b ?v0 ?v1) (or (exists ((?v3 Index$)) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3) (fun_app$d (finished$b ?v0) ?v3))) (fun_app$d (inf$b ?v0) ?v2)))) :named a261))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (=> (semantics$ ?v0 ?v1) (or (exists ((?v3 State1$)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3) (fun_app$c (finished$ ?v0) ?v3))) (fun_app$c (inf$ ?v0) ?v2)))) :named a262))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (=> (semantics$a ?v0 ?v1) (or (exists ((?v3 State2$)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3) (fun_app$b (finished$a ?v0) ?v3))) (fun_app$b (inf$a ?v0) ?v2)))) :named a263))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$)) (=> (wfP$c ?v0) (wfP$c (tranclp$c ?v0)))) :named a264))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (wfP$b ?v0) (wfP$b (tranclp$ ?v0)))) :named a265))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (=> (wfP$ ?v0) (wfP$ (tranclp$a ?v0)))) :named a266))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (wfP$a ?v0) (wfP$a (tranclp$b ?v0)))) :named a267))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (well_founded$a ?v0) (wfP$a ?v0))) :named a268))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (well_founded$b ?v0) (wfP$b ?v0))) :named a269))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$)) (=> (well_founded$c ?v0) (wfP$c ?v0))) :named a270))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (=> (well_founded$ ?v0) (wfP$ ?v0))) :named a271))
(assert (! (forall ((?v0 State2$)) (= (fun_app$b (safe$a step2$ final2$) ?v0) (forall ((?v1 State2$)) (=> (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v0) ?v1) (or (fun_app$b final2$ ?v1) (exists ((?v2 State2$)) (fun_app$b (fun_app$g step2$ ?v1) ?v2))))))) :named a272))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v0) ?v1) (fun_app$b (safe$a step2$ final2$) ?v0)) (fun_app$b (safe$a step2$ final2$) ?v1))) :named a273))
(assert (! (forall ((?v0 State2$)) (=> (fun_app$b final2$ ?v0) (fun_app$b (safe$a step2$ final2$) ?v0))) :named a274))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (=> (and (fun_app$b (fun_app$g step2$ ?v0) ?v1) (fun_app$b (safe$a step2$ final2$) ?v0)) (fun_app$b (safe$a step2$ final2$) ?v1))) :named a275))
(assert (! (semantics$a step2$ final2$) :named a276))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (! (= (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (or (= ?v1 ?v2) (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2))) :pattern ((fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2)))) :named a277))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (! (= (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (or (= ?v1 ?v2) (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2))) :pattern ((fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2)))) :named a278))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (! (= (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (or (= ?v1 ?v2) (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2))) :pattern ((fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2)))) :named a279))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v0) ?v1) (and (fun_app$c (finished$ step1$) ?v1) (not (fun_app$c final1$ ?v1)))) (fun_app$a (fun_app$v (state_behaves$ step1$ final1$) ?v0) (fun_app$w goes_wrong$ ?v1)))) :named a280))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (=> (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v0) ?v1) (and (fun_app$c (finished$ step1$) ?v1) (fun_app$c final1$ ?v1))) (fun_app$a (fun_app$v (state_behaves$ step1$ final1$) ?v0) (fun_app$w terminates$ ?v1)))) :named a281))
(assert (! (forall ((?v0 State1$) (?v1 State1_behaviour$)) (=> (and (fun_app$c (safe$ step1$ final1$) ?v0) (fun_app$a (fun_app$v (state_behaves$ step1$ final1$) ?v0) ?v1)) (not (fun_app$a is_wrong$ ?v1)))) :named a282))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$)) (! (= (state_behaves$ ?v0 ?v1) (state_behaves$ ?v0 ?v1)) :pattern ((state_behaves$ ?v0 ?v1)))) :named a283))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$)) (! (= (state_behaves$a ?v0 ?v1) (state_behaves$a ?v0 ?v1)) :pattern ((state_behaves$a ?v0 ?v1)))) :named a284))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1_behaviour$)) (=> (and (semantics$ ?v0 ?v1) (and (fun_app$c (safe$ ?v0 ?v1) ?v2) (fun_app$a (fun_app$v (state_behaves$ ?v0 ?v1) ?v2) ?v3))) (not (fun_app$a is_wrong$ ?v3)))) :named a285))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2_behaviour$)) (=> (and (semantics$a ?v0 ?v1) (and (fun_app$b (safe$a ?v0 ?v1) ?v2) (fun_app$ (fun_app$x (state_behaves$a ?v0 ?v1) ?v2) ?v3))) (not (fun_app$ is_wrong$a ?v3)))) :named a286))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$) (?v3 Index$)) (=> (and (semantics$b ?v0 ?v1) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3) (and (fun_app$d (finished$b ?v0) ?v3) (not (fun_app$d ?v1 ?v3))))) (fun_app$y (fun_app$z (state_behaves$b ?v0 ?v1) ?v2) (goes_wrong$a ?v3)))) :named a287))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1$)) (=> (and (semantics$ ?v0 ?v1) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3) (and (fun_app$c (finished$ ?v0) ?v3) (not (fun_app$c ?v1 ?v3))))) (fun_app$a (fun_app$v (state_behaves$ ?v0 ?v1) ?v2) (fun_app$w goes_wrong$ ?v3)))) :named a288))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2$)) (=> (and (semantics$a ?v0 ?v1) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3) (and (fun_app$b (finished$a ?v0) ?v3) (not (fun_app$b ?v1 ?v3))))) (fun_app$ (fun_app$x (state_behaves$a ?v0 ?v1) ?v2) (fun_app$aa goes_wrong$b ?v3)))) :named a289))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$) (?v3 Index$)) (=> (and (semantics$b ?v0 ?v1) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v2) ?v3) (and (fun_app$d (finished$b ?v0) ?v3) (fun_app$d ?v1 ?v3)))) (fun_app$y (fun_app$z (state_behaves$b ?v0 ?v1) ?v2) (terminates$a ?v3)))) :named a290))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1$)) (=> (and (semantics$ ?v0 ?v1) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v2) ?v3) (and (fun_app$c (finished$ ?v0) ?v3) (fun_app$c ?v1 ?v3)))) (fun_app$a (fun_app$v (state_behaves$ ?v0 ?v1) ?v2) (fun_app$w terminates$ ?v3)))) :named a291))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2$)) (=> (and (semantics$a ?v0 ?v1) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v2) ?v3) (and (fun_app$b (finished$a ?v0) ?v3) (fun_app$b ?v1 ?v3)))) (fun_app$ (fun_app$x (state_behaves$a ?v0 ?v1) ?v2) (fun_app$aa terminates$b ?v3)))) :named a292))
(assert (! (forall ((?v0 State1$) (?v1 State1_behaviour$)) (=> (and (fun_app$a (fun_app$v (state_behaves$ step1$ final1$) ?v0) ?v1) (and (forall ((?v2 State1$) (?v3 State1$)) (=> (and (= ?v0 ?v2) (and (= ?v1 (fun_app$w terminates$ ?v3)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v2) ?v3) (and (fun_app$c (finished$ step1$) ?v3) (fun_app$c final1$ ?v3))))) false)) (and (forall ((?v2 State1$)) (=> (and (= ?v0 ?v2) (and (= ?v1 diverges$a) (fun_app$c (inf$ step1$) ?v2))) false)) (forall ((?v2 State1$) (?v3 State1$)) (=> (and (= ?v0 ?v2) (and (= ?v1 (fun_app$w goes_wrong$ ?v3)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v2) ?v3) (and (fun_app$c (finished$ step1$) ?v3) (not (fun_app$c final1$ ?v3)))))) false))))) false)) :named a293))
(assert (! (forall ((?v0 State1$) (?v1 State1_behaviour$)) (= (fun_app$a (fun_app$v (state_behaves$ step1$ final1$) ?v0) ?v1) (or (exists ((?v2 State1$) (?v3 State1$)) (and (= ?v0 ?v2) (and (= ?v1 (fun_app$w terminates$ ?v3)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v2) ?v3) (and (fun_app$c (finished$ step1$) ?v3) (fun_app$c final1$ ?v3)))))) (or (exists ((?v2 State1$)) (and (= ?v0 ?v2) (and (= ?v1 diverges$a) (fun_app$c (inf$ step1$) ?v2)))) (exists ((?v2 State1$) (?v3 State1$)) (and (= ?v0 ?v2) (and (= ?v1 (fun_app$w goes_wrong$ ?v3)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ step1$) ?v2) ?v3) (and (fun_app$c (finished$ step1$) ?v3) (not (fun_app$c final1$ ?v3))))))))))) :named a294))
(assert (! (forall ((?v0 State1$)) (=> (fun_app$c (inf$ step1$) ?v0) (fun_app$a (fun_app$v (state_behaves$ step1$ final1$) ?v0) diverges$a))) :named a295))
(assert (! (fun_app$ab left_total$ (state_behaves$ step1$ final1$)) :named a296))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (= (= (fun_app$w terminates$ ?v0) (fun_app$w terminates$ ?v1)) (= ?v0 ?v1))) :named a297))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (= (= (fun_app$aa terminates$b ?v0) (fun_app$aa terminates$b ?v1)) (= ?v0 ?v1))) :named a298))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (= (= (fun_app$w goes_wrong$ ?v0) (fun_app$w goes_wrong$ ?v1)) (= ?v0 ?v1))) :named a299))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (= (= (fun_app$aa goes_wrong$b ?v0) (fun_app$aa goes_wrong$b ?v1)) (= ?v0 ?v1))) :named a300))
(assert (! (forall ((?v0 State2$) (?v1 State2_behaviour$)) (=> (and (fun_app$b (safe$a step2$ final2$) ?v0) (fun_app$ (fun_app$x (state_behaves$a step2$ final2$) ?v0) ?v1)) (not (fun_app$ is_wrong$a ?v1)))) :named a301))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v0) ?v1) (and (fun_app$b (finished$a step2$) ?v1) (not (fun_app$b final2$ ?v1)))) (fun_app$ (fun_app$x (state_behaves$a step2$ final2$) ?v0) (fun_app$aa goes_wrong$b ?v1)))) :named a302))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (=> (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v0) ?v1) (and (fun_app$b (finished$a step2$) ?v1) (fun_app$b final2$ ?v1))) (fun_app$ (fun_app$x (state_behaves$a step2$ final2$) ?v0) (fun_app$aa terminates$b ?v1)))) :named a303))
(assert (! (forall ((?v0 State1$)) (not (= diverges$a (fun_app$w goes_wrong$ ?v0)))) :named a304))
(assert (! (forall ((?v0 State2$)) (not (= diverges$ (fun_app$aa goes_wrong$b ?v0)))) :named a305))
(assert (! (forall ((?v0 State1$)) (not (= (fun_app$w terminates$ ?v0) diverges$a))) :named a306))
(assert (! (forall ((?v0 State2$)) (not (= (fun_app$aa terminates$b ?v0) diverges$))) :named a307))
(assert (! (not (fun_app$a is_wrong$ diverges$a)) :named a308))
(assert (! (not (fun_app$ is_wrong$a diverges$)) :named a309))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (fun_app$a is_wrong$ ?v0) (not (= ?v0 diverges$a)))) :named a310))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (fun_app$ is_wrong$a ?v0) (not (= ?v0 diverges$)))) :named a311))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (= ?v0 diverges$a) (not (fun_app$a is_wrong$ ?v0)))) :named a312))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (= ?v0 diverges$) (not (fun_app$ is_wrong$a ?v0)))) :named a313))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (and (forall ((?v1 State1$)) (=> (= ?v0 (fun_app$w terminates$ ?v1)) false)) (and (=> (= ?v0 diverges$a) false) (forall ((?v1 State1$)) (=> (= ?v0 (fun_app$w goes_wrong$ ?v1)) false)))) false)) :named a314))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (and (forall ((?v1 State2$)) (=> (= ?v0 (fun_app$aa terminates$b ?v1)) false)) (and (=> (= ?v0 diverges$) false) (forall ((?v1 State2$)) (=> (= ?v0 (fun_app$aa goes_wrong$b ?v1)) false)))) false)) :named a315))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_bool_fun_fun$) (?v1 State2_behaviour_bool_fun$)) (=> (semantics$c ?v0 ?v1) (left_total$a (state_behaves$c ?v0 ?v1)))) :named a316))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_bool_fun_fun$) (?v1 State1_behaviour_bool_fun$)) (=> (semantics$d ?v0 ?v1) (left_total$b (state_behaves$d ?v0 ?v1)))) :named a317))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$)) (=> (semantics$ ?v0 ?v1) (fun_app$ab left_total$ (state_behaves$ ?v0 ?v1)))) :named a318))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$)) (=> (semantics$a ?v0 ?v1) (fun_app$ac left_total$c (state_behaves$a ?v0 ?v1)))) :named a319))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$)) (=> (and (semantics$ ?v0 ?v1) (fun_app$c (inf$ ?v0) ?v2)) (fun_app$a (fun_app$v (state_behaves$ ?v0 ?v1) ?v2) diverges$a))) :named a320))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$)) (=> (and (semantics$a ?v0 ?v1) (fun_app$b (inf$a ?v0) ?v2)) (fun_app$ (fun_app$x (state_behaves$a ?v0 ?v1) ?v2) diverges$))) :named a321))
(assert (! (forall ((?v0 State1$) (?v1 State1$)) (not (= (fun_app$w terminates$ ?v0) (fun_app$w goes_wrong$ ?v1)))) :named a322))
(assert (! (forall ((?v0 State2$) (?v1 State2$)) (not (= (fun_app$aa terminates$b ?v0) (fun_app$aa goes_wrong$b ?v1)))) :named a323))
(assert (! (forall ((?v0 State1$)) (fun_app$a is_wrong$ (fun_app$w goes_wrong$ ?v0))) :named a324))
(assert (! (forall ((?v0 State2$)) (fun_app$ is_wrong$a (fun_app$aa goes_wrong$b ?v0))) :named a325))
(assert (! (forall ((?v0 State1$)) (not (fun_app$a is_wrong$ (fun_app$w terminates$ ?v0)))) :named a326))
(assert (! (forall ((?v0 State2$)) (not (fun_app$ is_wrong$a (fun_app$aa terminates$b ?v0)))) :named a327))
(assert (! (forall ((?v0 State1_behaviour$) (?v1 State1$)) (=> (= ?v0 (fun_app$w goes_wrong$ ?v1)) (fun_app$a is_wrong$ ?v0))) :named a328))
(assert (! (forall ((?v0 State2_behaviour$) (?v1 State2$)) (=> (= ?v0 (fun_app$aa goes_wrong$b ?v1)) (fun_app$ is_wrong$a ?v0))) :named a329))
(assert (! (forall ((?v0 State1_behaviour$)) (= (fun_app$a is_wrong$ ?v0) (exists ((?v1 State1$)) (= ?v0 (fun_app$w goes_wrong$ ?v1))))) :named a330))
(assert (! (forall ((?v0 State2_behaviour$)) (= (fun_app$ is_wrong$a ?v0) (exists ((?v1 State2$)) (= ?v0 (fun_app$aa goes_wrong$b ?v1))))) :named a331))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$) (?v3 Index_behaviour$)) (=> (semantics$b ?v0 ?v1) (= (fun_app$y (fun_app$z (state_behaves$b ?v0 ?v1) ?v2) ?v3) (or (exists ((?v4 Index$) (?v5 Index$)) (and (= ?v2 ?v4) (and (= ?v3 (terminates$a ?v5)) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v4) ?v5) (and (fun_app$d (finished$b ?v0) ?v5) (fun_app$d ?v1 ?v5)))))) (or (exists ((?v4 Index$)) (and (= ?v2 ?v4) (and (= ?v3 diverges$b) (fun_app$d (inf$b ?v0) ?v4)))) (exists ((?v4 Index$) (?v5 Index$)) (and (= ?v2 ?v4) (and (= ?v3 (goes_wrong$a ?v5)) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v4) ?v5) (and (fun_app$d (finished$b ?v0) ?v5) (not (fun_app$d ?v1 ?v5)))))))))))) :named a332))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1_behaviour$)) (=> (semantics$ ?v0 ?v1) (= (fun_app$a (fun_app$v (state_behaves$ ?v0 ?v1) ?v2) ?v3) (or (exists ((?v4 State1$) (?v5 State1$)) (and (= ?v2 ?v4) (and (= ?v3 (fun_app$w terminates$ ?v5)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v4) ?v5) (and (fun_app$c (finished$ ?v0) ?v5) (fun_app$c ?v1 ?v5)))))) (or (exists ((?v4 State1$)) (and (= ?v2 ?v4) (and (= ?v3 diverges$a) (fun_app$c (inf$ ?v0) ?v4)))) (exists ((?v4 State1$) (?v5 State1$)) (and (= ?v2 ?v4) (and (= ?v3 (fun_app$w goes_wrong$ ?v5)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v4) ?v5) (and (fun_app$c (finished$ ?v0) ?v5) (not (fun_app$c ?v1 ?v5)))))))))))) :named a333))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2_behaviour$)) (=> (semantics$a ?v0 ?v1) (= (fun_app$ (fun_app$x (state_behaves$a ?v0 ?v1) ?v2) ?v3) (or (exists ((?v4 State2$) (?v5 State2$)) (and (= ?v2 ?v4) (and (= ?v3 (fun_app$aa terminates$b ?v5)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v4) ?v5) (and (fun_app$b (finished$a ?v0) ?v5) (fun_app$b ?v1 ?v5)))))) (or (exists ((?v4 State2$)) (and (= ?v2 ?v4) (and (= ?v3 diverges$) (fun_app$b (inf$a ?v0) ?v4)))) (exists ((?v4 State2$) (?v5 State2$)) (and (= ?v2 ?v4) (and (= ?v3 (fun_app$aa goes_wrong$b ?v5)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v4) ?v5) (and (fun_app$b (finished$a ?v0) ?v5) (not (fun_app$b ?v1 ?v5)))))))))))) :named a334))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$) (?v2 Index$) (?v3 Index_behaviour$)) (=> (and (semantics$b ?v0 ?v1) (and (fun_app$y (fun_app$z (state_behaves$b ?v0 ?v1) ?v2) ?v3) (and (forall ((?v4 Index$) (?v5 Index$)) (=> (and (= ?v2 ?v4) (and (= ?v3 (terminates$a ?v5)) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v4) ?v5) (and (fun_app$d (finished$b ?v0) ?v5) (fun_app$d ?v1 ?v5))))) false)) (and (forall ((?v4 Index$)) (=> (and (= ?v2 ?v4) (and (= ?v3 diverges$b) (fun_app$d (inf$b ?v0) ?v4))) false)) (forall ((?v4 Index$) (?v5 Index$)) (=> (and (= ?v2 ?v4) (and (= ?v3 (goes_wrong$a ?v5)) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v4) ?v5) (and (fun_app$d (finished$b ?v0) ?v5) (not (fun_app$d ?v1 ?v5)))))) false)))))) false)) :named a335))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$) (?v2 State1$) (?v3 State1_behaviour$)) (=> (and (semantics$ ?v0 ?v1) (and (fun_app$a (fun_app$v (state_behaves$ ?v0 ?v1) ?v2) ?v3) (and (forall ((?v4 State1$) (?v5 State1$)) (=> (and (= ?v2 ?v4) (and (= ?v3 (fun_app$w terminates$ ?v5)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v4) ?v5) (and (fun_app$c (finished$ ?v0) ?v5) (fun_app$c ?v1 ?v5))))) false)) (and (forall ((?v4 State1$)) (=> (and (= ?v2 ?v4) (and (= ?v3 diverges$a) (fun_app$c (inf$ ?v0) ?v4))) false)) (forall ((?v4 State1$) (?v5 State1$)) (=> (and (= ?v2 ?v4) (and (= ?v3 (fun_app$w goes_wrong$ ?v5)) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v4) ?v5) (and (fun_app$c (finished$ ?v0) ?v5) (not (fun_app$c ?v1 ?v5)))))) false)))))) false)) :named a336))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$) (?v2 State2$) (?v3 State2_behaviour$)) (=> (and (semantics$a ?v0 ?v1) (and (fun_app$ (fun_app$x (state_behaves$a ?v0 ?v1) ?v2) ?v3) (and (forall ((?v4 State2$) (?v5 State2$)) (=> (and (= ?v2 ?v4) (and (= ?v3 (fun_app$aa terminates$b ?v5)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v4) ?v5) (and (fun_app$b (finished$a ?v0) ?v5) (fun_app$b ?v1 ?v5))))) false)) (and (forall ((?v4 State2$)) (=> (and (= ?v2 ?v4) (and (= ?v3 diverges$) (fun_app$b (inf$a ?v0) ?v4))) false)) (forall ((?v4 State2$) (?v5 State2$)) (=> (and (= ?v2 ?v4) (and (= ?v3 (fun_app$aa goes_wrong$b ?v5)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v4) ?v5) (and (fun_app$b (finished$a ?v0) ?v5) (not (fun_app$b ?v1 ?v5)))))) false)))))) false)) :named a337))
(assert (! (forall ((?v0 State2$) (?v1 State2_behaviour$)) (=> (and (fun_app$ (fun_app$x (state_behaves$a step2$ final2$) ?v0) ?v1) (and (forall ((?v2 State2$) (?v3 State2$)) (=> (and (= ?v0 ?v2) (and (= ?v1 (fun_app$aa terminates$b ?v3)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v2) ?v3) (and (fun_app$b (finished$a step2$) ?v3) (fun_app$b final2$ ?v3))))) false)) (and (forall ((?v2 State2$)) (=> (and (= ?v0 ?v2) (and (= ?v1 diverges$) (fun_app$b (inf$a step2$) ?v2))) false)) (forall ((?v2 State2$) (?v3 State2$)) (=> (and (= ?v0 ?v2) (and (= ?v1 (fun_app$aa goes_wrong$b ?v3)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v2) ?v3) (and (fun_app$b (finished$a step2$) ?v3) (not (fun_app$b final2$ ?v3)))))) false))))) false)) :named a338))
(assert (! (forall ((?v0 State2$) (?v1 State2_behaviour$)) (= (fun_app$ (fun_app$x (state_behaves$a step2$ final2$) ?v0) ?v1) (or (exists ((?v2 State2$) (?v3 State2$)) (and (= ?v0 ?v2) (and (= ?v1 (fun_app$aa terminates$b ?v3)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v2) ?v3) (and (fun_app$b (finished$a step2$) ?v3) (fun_app$b final2$ ?v3)))))) (or (exists ((?v2 State2$)) (and (= ?v0 ?v2) (and (= ?v1 diverges$) (fun_app$b (inf$a step2$) ?v2)))) (exists ((?v2 State2$) (?v3 State2$)) (and (= ?v0 ?v2) (and (= ?v1 (fun_app$aa goes_wrong$b ?v3)) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b step2$) ?v2) ?v3) (and (fun_app$b (finished$a step2$) ?v3) (not (fun_app$b final2$ ?v3))))))))))) :named a339))
(assert (! (forall ((?v0 State2$)) (=> (fun_app$b (inf$a step2$) ?v0) (fun_app$ (fun_app$x (state_behaves$a step2$ final2$) ?v0) diverges$))) :named a340))
(assert (! (fun_app$ac left_total$c (state_behaves$a step2$ final2$)) :named a341))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (fun_app$a is_wrong$ ?v0) (= (fun_app$w goes_wrong$ (un_Goes_wrong$ ?v0)) ?v0))) :named a342))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (fun_app$ is_wrong$a ?v0) (= (fun_app$aa goes_wrong$b (un_Goes_wrong$a ?v0)) ?v0))) :named a343))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$)) (=> (and (fun_app$c (inf$ ?v0) ?v1) (forall ((?v2 State1$) (?v3 State1$)) (=> (and (= ?v1 ?v2) (and (fun_app$c (fun_app$h ?v0 ?v2) ?v3) (fun_app$c (inf$ ?v0) ?v3))) false))) false)) :named a344))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$)) (=> (and (fun_app$b (inf$a ?v0) ?v1) (forall ((?v2 State2$) (?v3 State2$)) (=> (and (= ?v1 ?v2) (and (fun_app$b (fun_app$g ?v0 ?v2) ?v3) (fun_app$b (inf$a ?v0) ?v3))) false))) false)) :named a345))
(assert (! (forall ((?v0 State1$)) (! (= (un_Goes_wrong$ (fun_app$w goes_wrong$ ?v0)) ?v0) :pattern ((fun_app$w goes_wrong$ ?v0)))) :named a346))
(assert (! (forall ((?v0 State2$)) (! (= (un_Goes_wrong$a (fun_app$aa goes_wrong$b ?v0)) ?v0) :pattern ((fun_app$aa goes_wrong$b ?v0)))) :named a347))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (and (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$c (inf$ ?v0) ?v2)) (fun_app$c (inf$ ?v0) ?v1))) :named a348))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (and (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (inf$a ?v0) ?v2)) (fun_app$b (inf$a ?v0) ?v1))) :named a349))
(assert (! (forall ((?v0 State1_bool_fun$) (?v1 State1$) (?v2 State1_state1_bool_fun_fun$)) (=> (and (fun_app$c ?v0 ?v1) (forall ((?v3 State1$)) (=> (fun_app$c ?v0 ?v3) (exists ((?v4 State1$) (?v5 State1$)) (and (= ?v3 ?v4) (and (fun_app$c (fun_app$h ?v2 ?v4) ?v5) (or (fun_app$c ?v0 ?v5) (fun_app$c (inf$ ?v2) ?v5)))))))) (fun_app$c (inf$ ?v2) ?v1))) :named a350))
(assert (! (forall ((?v0 State2_bool_fun$) (?v1 State2$) (?v2 State2_state2_bool_fun_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 State2$)) (=> (fun_app$b ?v0 ?v3) (exists ((?v4 State2$) (?v5 State2$)) (and (= ?v3 ?v4) (and (fun_app$b (fun_app$g ?v2 ?v4) ?v5) (or (fun_app$b ?v0 ?v5) (fun_app$b (inf$a ?v2) ?v5)))))))) (fun_app$b (inf$a ?v2) ?v1))) :named a351))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$)) (= (fun_app$c (inf$ ?v0) ?v1) (exists ((?v2 State1$) (?v3 State1$)) (and (= ?v1 ?v2) (and (fun_app$c (fun_app$h ?v0 ?v2) ?v3) (fun_app$c (inf$ ?v0) ?v3)))))) :named a352))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$)) (= (fun_app$b (inf$a ?v0) ?v1) (exists ((?v2 State2$) (?v3 State2$)) (and (= ?v1 ?v2) (and (fun_app$b (fun_app$g ?v0 ?v2) ?v3) (fun_app$b (inf$a ?v0) ?v3)))))) :named a353))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (and (=> (= ?v0 (fun_app$w terminates$ (un_Terminates$ ?v0))) false) (and (=> (= ?v0 diverges$a) false) (=> (= ?v0 (fun_app$w goes_wrong$ (un_Goes_wrong$ ?v0))) false))) false)) :named a354))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (and (=> (= ?v0 (fun_app$aa terminates$b (un_Terminates$a ?v0))) false) (and (=> (= ?v0 diverges$) false) (=> (= ?v0 (fun_app$aa goes_wrong$b (un_Goes_wrong$a ?v0))) false))) false)) :named a355))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (left_total$d ?v0) (forall ((?v1 State1$)) (exists ((?v2 State1$)) (fun_app$c (fun_app$h ?v0 ?v1) ?v2))))) :named a356))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (left_total$e ?v0) (forall ((?v1 State2$)) (exists ((?v2 State2$)) (fun_app$b (fun_app$g ?v0 ?v1) ?v2))))) :named a357))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$)) (= (left_total$a ?v0) (forall ((?v1 State2_behaviour$)) (exists ((?v2 State2_behaviour_behaviour$)) (fun_app$ad (fun_app$ae ?v0 ?v1) ?v2))))) :named a358))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$)) (= (left_total$b ?v0) (forall ((?v1 State1_behaviour$)) (exists ((?v2 State1_behaviour_behaviour$)) (fun_app$af (fun_app$ag ?v0 ?v1) ?v2))))) :named a359))
(assert (! (forall ((?v0 State1_state1_behaviour_bool_fun_fun$)) (= (fun_app$ab left_total$ ?v0) (forall ((?v1 State1$)) (exists ((?v2 State1_behaviour$)) (fun_app$a (fun_app$v ?v0 ?v1) ?v2))))) :named a360))
(assert (! (forall ((?v0 State2_state2_behaviour_bool_fun_fun$)) (= (fun_app$ac left_total$c ?v0) (forall ((?v1 State2$)) (exists ((?v2 State2_behaviour$)) (fun_app$ (fun_app$x ?v0 ?v1) ?v2))))) :named a361))
(assert (! (left_total$d uug$) :named a362))
(assert (! (left_total$e uuh$) :named a363))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (forall ((?v1 State1$)) (exists ((?v2 State1$)) (fun_app$c (fun_app$h ?v0 ?v1) ?v2))) (left_total$d ?v0))) :named a364))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (forall ((?v1 State2$)) (exists ((?v2 State2$)) (fun_app$b (fun_app$g ?v0 ?v1) ?v2))) (left_total$e ?v0))) :named a365))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$)) (=> (forall ((?v1 State2_behaviour$)) (exists ((?v2 State2_behaviour_behaviour$)) (fun_app$ad (fun_app$ae ?v0 ?v1) ?v2))) (left_total$a ?v0))) :named a366))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$)) (=> (forall ((?v1 State1_behaviour$)) (exists ((?v2 State1_behaviour_behaviour$)) (fun_app$af (fun_app$ag ?v0 ?v1) ?v2))) (left_total$b ?v0))) :named a367))
(assert (! (forall ((?v0 State1_state1_behaviour_bool_fun_fun$)) (=> (forall ((?v1 State1$)) (exists ((?v2 State1_behaviour$)) (fun_app$a (fun_app$v ?v0 ?v1) ?v2))) (fun_app$ab left_total$ ?v0))) :named a368))
(assert (! (forall ((?v0 State2_state2_behaviour_bool_fun_fun$)) (=> (forall ((?v1 State2$)) (exists ((?v2 State2_behaviour$)) (fun_app$ (fun_app$x ?v0 ?v1) ?v2))) (fun_app$ac left_total$c ?v0))) :named a369))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (and (left_total$d ?v0) (=> (forall ((?v1 State1$)) (exists ((?v2 State1$)) (fun_app$c (fun_app$h ?v0 ?v1) ?v2))) false)) false)) :named a370))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (and (left_total$e ?v0) (=> (forall ((?v1 State2$)) (exists ((?v2 State2$)) (fun_app$b (fun_app$g ?v0 ?v1) ?v2))) false)) false)) :named a371))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$)) (=> (and (left_total$a ?v0) (=> (forall ((?v1 State2_behaviour$)) (exists ((?v2 State2_behaviour_behaviour$)) (fun_app$ad (fun_app$ae ?v0 ?v1) ?v2))) false)) false)) :named a372))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$)) (=> (and (left_total$b ?v0) (=> (forall ((?v1 State1_behaviour$)) (exists ((?v2 State1_behaviour_behaviour$)) (fun_app$af (fun_app$ag ?v0 ?v1) ?v2))) false)) false)) :named a373))
(assert (! (forall ((?v0 State1_state1_behaviour_bool_fun_fun$)) (=> (and (fun_app$ab left_total$ ?v0) (=> (forall ((?v1 State1$)) (exists ((?v2 State1_behaviour$)) (fun_app$a (fun_app$v ?v0 ?v1) ?v2))) false)) false)) :named a374))
(assert (! (forall ((?v0 State2_state2_behaviour_bool_fun_fun$)) (=> (and (fun_app$ac left_total$c ?v0) (=> (forall ((?v1 State2$)) (exists ((?v2 State2_behaviour$)) (fun_app$ (fun_app$x ?v0 ?v1) ?v2))) false)) false)) :named a375))
(assert (! (=> (right_unique$ step2$) (right_unique$a (state_behaves$a step2$ final2$))) :named a376))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_bool_fun$)) (=> (and (semantics$b ?v0 ?v1) (right_unique$b ?v0)) (right_unique$c (state_behaves$b ?v0 ?v1)))) :named a377))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_bool_fun_fun$) (?v1 State1_behaviour_bool_fun$)) (=> (and (semantics$d ?v0 ?v1) (right_unique$d ?v0)) (right_unique$e (state_behaves$d ?v0 ?v1)))) :named a378))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_bool_fun_fun$) (?v1 State2_behaviour_bool_fun$)) (=> (and (semantics$c ?v0 ?v1) (right_unique$f ?v0)) (right_unique$g (state_behaves$c ?v0 ?v1)))) :named a379))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_bool_fun$)) (=> (and (semantics$ ?v0 ?v1) (right_unique$h ?v0)) (right_unique$i (state_behaves$ ?v0 ?v1)))) :named a380))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_bool_fun$)) (=> (and (semantics$a ?v0 ?v1) (right_unique$ ?v0)) (right_unique$a (state_behaves$a ?v0 ?v1)))) :named a381))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (and (right_unique$b ?v0) (and (fun_app$d (fun_app$i ?v0 ?v1) ?v2) (fun_app$d (inf$b ?v0) ?v1))) (fun_app$d (inf$b ?v0) ?v2))) :named a382))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State1_behaviour$)) (=> (and (right_unique$d ?v0) (and (fun_app$a (fun_app$ah ?v0 ?v1) ?v2) (fun_app$a (inf$c ?v0) ?v1))) (fun_app$a (inf$c ?v0) ?v2))) :named a383))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State2_behaviour$)) (=> (and (right_unique$f ?v0) (and (fun_app$ (fun_app$ai ?v0 ?v1) ?v2) (fun_app$ (inf$d ?v0) ?v1))) (fun_app$ (inf$d ?v0) ?v2))) :named a384))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (and (right_unique$ ?v0) (and (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (inf$a ?v0) ?v1))) (fun_app$b (inf$a ?v0) ?v2))) :named a385))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (and (right_unique$h ?v0) (and (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$c (inf$ ?v0) ?v1))) (fun_app$c (inf$ ?v0) ?v2))) :named a386))
(assert (! (forall ((?v0 State1$)) (! (= (un_Terminates$ (fun_app$w terminates$ ?v0)) ?v0) :pattern ((fun_app$w terminates$ ?v0)))) :named a387))
(assert (! (forall ((?v0 State2$)) (! (= (un_Terminates$a (fun_app$aa terminates$b ?v0)) ?v0) :pattern ((fun_app$aa terminates$b ?v0)))) :named a388))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State1_behaviour$)) (=> (and (right_unique$d ?v0) (and (fun_app$a (fun_app$ah (rtranclp$c ?v0) ?v1) ?v2) (fun_app$a (inf$c ?v0) ?v1))) (fun_app$a (inf$c ?v0) ?v2))) :named a389))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State2_behaviour$)) (=> (and (right_unique$f ?v0) (and (fun_app$ (fun_app$ai (rtranclp$d ?v0) ?v1) ?v2) (fun_app$ (inf$d ?v0) ?v1))) (fun_app$ (inf$d ?v0) ?v2))) :named a390))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$)) (=> (and (right_unique$b ?v0) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (fun_app$d (inf$b ?v0) ?v1))) (fun_app$d (inf$b ?v0) ?v2))) :named a391))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (and (right_unique$h ?v0) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (fun_app$c (inf$ ?v0) ?v1))) (fun_app$c (inf$ ?v0) ?v2))) :named a392))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (and (right_unique$ ?v0) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (fun_app$b (inf$a ?v0) ?v1))) (fun_app$b (inf$a ?v0) ?v2))) :named a393))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 State2_bool_fun$) (?v2 Bool) (?v3 State2_bool_fun$) (?v4 State2_behaviour$)) (= (fun_app$e ?v0 (fun_app$ (case_behaviour$ ?v1 ?v2 ?v3) ?v4)) (not (or (and (= ?v4 (fun_app$aa terminates$b (un_Terminates$a ?v4))) (not (fun_app$e ?v0 (fun_app$b ?v1 (un_Terminates$a ?v4))))) (or (and (= ?v4 diverges$) (not (fun_app$e ?v0 ?v2))) (and (= ?v4 (fun_app$aa goes_wrong$b (un_Goes_wrong$a ?v4))) (not (fun_app$e ?v0 (fun_app$b ?v3 (un_Goes_wrong$a ?v4)))))))))) :named a394))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 State1_bool_fun$) (?v2 Bool) (?v3 State1_bool_fun$) (?v4 State1_behaviour$)) (= (fun_app$e ?v0 (fun_app$a (case_behaviour$a ?v1 ?v2 ?v3) ?v4)) (not (or (and (= ?v4 (fun_app$w terminates$ (un_Terminates$ ?v4))) (not (fun_app$e ?v0 (fun_app$c ?v1 (un_Terminates$ ?v4))))) (or (and (= ?v4 diverges$a) (not (fun_app$e ?v0 ?v2))) (and (= ?v4 (fun_app$w goes_wrong$ (un_Goes_wrong$ ?v4))) (not (fun_app$e ?v0 (fun_app$c ?v3 (un_Goes_wrong$ ?v4)))))))))) :named a395))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 State2_bool_fun$) (?v2 Bool) (?v3 State2_bool_fun$) (?v4 State2_behaviour$)) (= (fun_app$e ?v0 (fun_app$ (case_behaviour$ ?v1 ?v2 ?v3) ?v4)) (and (=> (= ?v4 (fun_app$aa terminates$b (un_Terminates$a ?v4))) (fun_app$e ?v0 (fun_app$b ?v1 (un_Terminates$a ?v4)))) (and (=> (= ?v4 diverges$) (fun_app$e ?v0 ?v2)) (=> (= ?v4 (fun_app$aa goes_wrong$b (un_Goes_wrong$a ?v4))) (fun_app$e ?v0 (fun_app$b ?v3 (un_Goes_wrong$a ?v4)))))))) :named a396))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 State1_bool_fun$) (?v2 Bool) (?v3 State1_bool_fun$) (?v4 State1_behaviour$)) (= (fun_app$e ?v0 (fun_app$a (case_behaviour$a ?v1 ?v2 ?v3) ?v4)) (and (=> (= ?v4 (fun_app$w terminates$ (un_Terminates$ ?v4))) (fun_app$e ?v0 (fun_app$c ?v1 (un_Terminates$ ?v4)))) (and (=> (= ?v4 diverges$a) (fun_app$e ?v0 ?v2)) (=> (= ?v4 (fun_app$w goes_wrong$ (un_Goes_wrong$ ?v4))) (fun_app$e ?v0 (fun_app$c ?v3 (un_Goes_wrong$ ?v4)))))))) :named a397))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (=> (and (right_unique$b ?v0) (left_total$f ?v0)) (forall ((?v1 Index$)) (exists ((?v2 Index$)) (and (fun_app$d (fun_app$i ?v0 ?v1) ?v2) (forall ((?v3 Index$)) (=> (fun_app$d (fun_app$i ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a398))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_behaviour_bool_fun_fun$)) (=> (and (right_unique$e ?v0) (left_total$b ?v0)) (forall ((?v1 State1_behaviour$)) (exists ((?v2 State1_behaviour_behaviour$)) (and (fun_app$af (fun_app$ag ?v0 ?v1) ?v2) (forall ((?v3 State1_behaviour_behaviour$)) (=> (fun_app$af (fun_app$ag ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a399))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_bool_fun_fun$)) (=> (and (right_unique$d ?v0) (left_total$g ?v0)) (forall ((?v1 State1_behaviour$)) (exists ((?v2 State1_behaviour$)) (and (fun_app$a (fun_app$ah ?v0 ?v1) ?v2) (forall ((?v3 State1_behaviour$)) (=> (fun_app$a (fun_app$ah ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a400))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_behaviour_bool_fun_fun$)) (=> (and (right_unique$g ?v0) (left_total$a ?v0)) (forall ((?v1 State2_behaviour$)) (exists ((?v2 State2_behaviour_behaviour$)) (and (fun_app$ad (fun_app$ae ?v0 ?v1) ?v2) (forall ((?v3 State2_behaviour_behaviour$)) (=> (fun_app$ad (fun_app$ae ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a401))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_bool_fun_fun$)) (=> (and (right_unique$f ?v0) (left_total$h ?v0)) (forall ((?v1 State2_behaviour$)) (exists ((?v2 State2_behaviour$)) (and (fun_app$ (fun_app$ai ?v0 ?v1) ?v2) (forall ((?v3 State2_behaviour$)) (=> (fun_app$ (fun_app$ai ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a402))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (and (right_unique$ ?v0) (left_total$e ?v0)) (forall ((?v1 State2$)) (exists ((?v2 State2$)) (and (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (forall ((?v3 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a403))
(assert (! (forall ((?v0 State2_state2_behaviour_bool_fun_fun$)) (=> (and (right_unique$a ?v0) (fun_app$ac left_total$c ?v0)) (forall ((?v1 State2$)) (exists ((?v2 State2_behaviour$)) (and (fun_app$ (fun_app$x ?v0 ?v1) ?v2) (forall ((?v3 State2_behaviour$)) (=> (fun_app$ (fun_app$x ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a404))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (and (right_unique$h ?v0) (left_total$d ?v0)) (forall ((?v1 State1$)) (exists ((?v2 State1$)) (and (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (forall ((?v3 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a405))
(assert (! (forall ((?v0 State1_state1_behaviour_bool_fun_fun$)) (=> (and (right_unique$i ?v0) (fun_app$ab left_total$ ?v0)) (forall ((?v1 State1$)) (exists ((?v2 State1_behaviour$)) (and (fun_app$a (fun_app$v ?v0 ?v1) ?v2) (forall ((?v3 State1_behaviour$)) (=> (fun_app$a (fun_app$v ?v0 ?v1) ?v3) (= ?v3 ?v2)))))))) :named a406))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State1_behaviour$) (?v3 State1_behaviour$)) (=> (and (right_unique$d ?v0) (and (fun_app$a (fun_app$ah (tranclp$d ?v0) ?v1) ?v2) (and (not (exists ((?v4 State1_behaviour$)) (fun_app$a (fun_app$ah ?v0 ?v2) ?v4))) (and (fun_app$a (fun_app$ah (tranclp$d ?v0) ?v1) ?v3) (not (exists ((?v4 State1_behaviour$)) (fun_app$a (fun_app$ah ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a407))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State2_behaviour$) (?v3 State2_behaviour$)) (=> (and (right_unique$f ?v0) (and (fun_app$ (fun_app$ai (tranclp$e ?v0) ?v1) ?v2) (and (not (exists ((?v4 State2_behaviour$)) (fun_app$ (fun_app$ai ?v0 ?v2) ?v4))) (and (fun_app$ (fun_app$ai (tranclp$e ?v0) ?v1) ?v3) (not (exists ((?v4 State2_behaviour$)) (fun_app$ (fun_app$ai ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a408))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (right_unique$h ?v0) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v2) (and (not (exists ((?v4 State1$)) (fun_app$c (fun_app$h ?v0 ?v2) ?v4))) (and (fun_app$c (fun_app$h (tranclp$ ?v0) ?v1) ?v3) (not (exists ((?v4 State1$)) (fun_app$c (fun_app$h ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a409))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (right_unique$b ?v0) (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v2) (and (not (exists ((?v4 Index$)) (fun_app$d (fun_app$i ?v0 ?v2) ?v4))) (and (fun_app$d (fun_app$i (tranclp$a ?v0) ?v1) ?v3) (not (exists ((?v4 Index$)) (fun_app$d (fun_app$i ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a410))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (right_unique$ ?v0) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v2) (and (not (exists ((?v4 State2$)) (fun_app$b (fun_app$g ?v0 ?v2) ?v4))) (and (fun_app$b (fun_app$g (tranclp$b ?v0) ?v1) ?v3) (not (exists ((?v4 State2$)) (fun_app$b (fun_app$g ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a411))
(assert (! (forall ((?v0 State1_behaviour_state1_behaviour_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State1_behaviour$) (?v3 State1_behaviour$)) (=> (and (right_unique$d ?v0) (and (fun_app$a (fun_app$ah (rtranclp$c ?v0) ?v1) ?v2) (and (not (exists ((?v4 State1_behaviour$)) (fun_app$a (fun_app$ah ?v0 ?v2) ?v4))) (and (fun_app$a (fun_app$ah (rtranclp$c ?v0) ?v1) ?v3) (not (exists ((?v4 State1_behaviour$)) (fun_app$a (fun_app$ah ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a412))
(assert (! (forall ((?v0 State2_behaviour_state2_behaviour_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State2_behaviour$) (?v3 State2_behaviour$)) (=> (and (right_unique$f ?v0) (and (fun_app$ (fun_app$ai (rtranclp$d ?v0) ?v1) ?v2) (and (not (exists ((?v4 State2_behaviour$)) (fun_app$ (fun_app$ai ?v0 ?v2) ?v4))) (and (fun_app$ (fun_app$ai (rtranclp$d ?v0) ?v1) ?v3) (not (exists ((?v4 State2_behaviour$)) (fun_app$ (fun_app$ai ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a413))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index$) (?v2 Index$) (?v3 Index$)) (=> (and (right_unique$b ?v0) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v2) (and (not (exists ((?v4 Index$)) (fun_app$d (fun_app$i ?v0 ?v2) ?v4))) (and (fun_app$d (fun_app$i (rtranclp$a ?v0) ?v1) ?v3) (not (exists ((?v4 Index$)) (fun_app$d (fun_app$i ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a414))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$) (?v3 State1$)) (=> (and (right_unique$h ?v0) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v2) (and (not (exists ((?v4 State1$)) (fun_app$c (fun_app$h ?v0 ?v2) ?v4))) (and (fun_app$c (fun_app$h (fun_app$p rtranclp$ ?v0) ?v1) ?v3) (not (exists ((?v4 State1$)) (fun_app$c (fun_app$h ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a415))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$) (?v3 State2$)) (=> (and (right_unique$ ?v0) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v2) (and (not (exists ((?v4 State2$)) (fun_app$b (fun_app$g ?v0 ?v2) ?v4))) (and (fun_app$b (fun_app$g (fun_app$u rtranclp$b ?v0) ?v1) ?v3) (not (exists ((?v4 State2$)) (fun_app$b (fun_app$g ?v0 ?v3) ?v4))))))) (= ?v2 ?v3))) :named a416))
(assert (! (forall ((?v0 State1_behaviour$) (?v1 State1_behaviour$)) (=> (and (= (fun_app$a is_Terminates$ ?v0) (fun_app$a is_Terminates$ ?v1)) (and (=> (and (fun_app$a is_Terminates$ ?v0) (fun_app$a is_Terminates$ ?v1)) (= (un_Terminates$ ?v0) (un_Terminates$ ?v1))) (and (= (= ?v0 diverges$a) (= ?v1 diverges$a)) (=> (and (fun_app$a is_wrong$ ?v0) (fun_app$a is_wrong$ ?v1)) (= (un_Goes_wrong$ ?v0) (un_Goes_wrong$ ?v1)))))) (= ?v0 ?v1))) :named a417))
(assert (! (forall ((?v0 State2_behaviour$) (?v1 State2_behaviour$)) (=> (and (= (fun_app$ is_Terminates$a ?v0) (fun_app$ is_Terminates$a ?v1)) (and (=> (and (fun_app$ is_Terminates$a ?v0) (fun_app$ is_Terminates$a ?v1)) (= (un_Terminates$a ?v0) (un_Terminates$a ?v1))) (and (= (= ?v0 diverges$) (= ?v1 diverges$)) (=> (and (fun_app$ is_wrong$a ?v0) (fun_app$ is_wrong$a ?v1)) (= (un_Goes_wrong$a ?v0) (un_Goes_wrong$a ?v1)))))) (= ?v0 ?v1))) :named a418))
(assert (! (=> (right_unique$h step1$) (right_unique$i (state_behaves$ step1$ final1$))) :named a419))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (fun_app$a is_Terminates$ ?v0) (= (fun_app$w terminates$ (un_Terminates$ ?v0)) ?v0))) :named a420))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (fun_app$ is_Terminates$a ?v0) (= (fun_app$aa terminates$b (un_Terminates$a ?v0)) ?v0))) :named a421))
(assert (! (forall ((?v0 State2_behaviour$)) (! (= (fun_app$ is_Terminates$a ?v0) (fun_app$ (case_behaviour$ uui$ false uuj$) ?v0)) :pattern ((fun_app$ is_Terminates$a ?v0)))) :named a422))
(assert (! (forall ((?v0 State1_behaviour$)) (! (= (fun_app$a is_Terminates$ ?v0) (fun_app$a (case_behaviour$a uuk$ false uul$) ?v0)) :pattern ((fun_app$a is_Terminates$ ?v0)))) :named a423))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 State2_bool_fun$) (?v2 Bool) (?v3 State2_bool_fun$) (?v4 State2_behaviour$)) (= (fun_app$e ?v0 (fun_app$ (case_behaviour$ ?v1 ?v2 ?v3) ?v4)) (fun_app$ (case_behaviour$ (uum$ ?v0 ?v1) (fun_app$e ?v0 ?v2) (uum$ ?v0 ?v3)) ?v4))) :named a424))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 State1_bool_fun$) (?v2 Bool) (?v3 State1_bool_fun$) (?v4 State1_behaviour$)) (= (fun_app$e ?v0 (fun_app$a (case_behaviour$a ?v1 ?v2 ?v3) ?v4)) (fun_app$a (case_behaviour$a (uun$ ?v0 ?v1) (fun_app$e ?v0 ?v2) (uun$ ?v0 ?v3)) ?v4))) :named a425))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (fun_app$a is_Terminates$ ?v0) (not (= ?v0 diverges$a)))) :named a426))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (fun_app$ is_Terminates$a ?v0) (not (= ?v0 diverges$)))) :named a427))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (= ?v0 diverges$a) (not (fun_app$a is_Terminates$ ?v0)))) :named a428))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (= ?v0 diverges$) (not (fun_app$ is_Terminates$a ?v0)))) :named a429))
(assert (! (not (fun_app$a is_Terminates$ diverges$a)) :named a430))
(assert (! (not (fun_app$ is_Terminates$a diverges$)) :named a431))
(assert (! (forall ((?v0 State1_behaviour$)) (= (fun_app$a is_Terminates$ ?v0) (exists ((?v1 State1$)) (= ?v0 (fun_app$w terminates$ ?v1))))) :named a432))
(assert (! (forall ((?v0 State2_behaviour$)) (= (fun_app$ is_Terminates$a ?v0) (exists ((?v1 State2$)) (= ?v0 (fun_app$aa terminates$b ?v1))))) :named a433))
(assert (! (forall ((?v0 State1_behaviour$) (?v1 State1$)) (=> (= ?v0 (fun_app$w terminates$ ?v1)) (fun_app$a is_Terminates$ ?v0))) :named a434))
(assert (! (forall ((?v0 State2_behaviour$) (?v1 State2$)) (=> (= ?v0 (fun_app$aa terminates$b ?v1)) (fun_app$ is_Terminates$a ?v0))) :named a435))
(assert (! (forall ((?v0 State1$)) (fun_app$a is_Terminates$ (fun_app$w terminates$ ?v0))) :named a436))
(assert (! (forall ((?v0 State2$)) (fun_app$ is_Terminates$a (fun_app$aa terminates$b ?v0))) :named a437))
(assert (! (forall ((?v0 State1$)) (not (fun_app$a is_Terminates$ (fun_app$w goes_wrong$ ?v0)))) :named a438))
(assert (! (forall ((?v0 State2$)) (not (fun_app$ is_Terminates$a (fun_app$aa goes_wrong$b ?v0)))) :named a439))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (fun_app$a is_Terminates$ ?v0) (not (fun_app$a is_wrong$ ?v0)))) :named a440))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (fun_app$ is_Terminates$a ?v0) (not (fun_app$ is_wrong$a ?v0)))) :named a441))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (fun_app$a is_wrong$ ?v0) (not (fun_app$a is_Terminates$ ?v0)))) :named a442))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (fun_app$ is_wrong$a ?v0) (not (fun_app$ is_Terminates$a ?v0)))) :named a443))
(assert (! (forall ((?v0 State2_bool_fun$) (?v1 Bool) (?v2 State2_bool_fun$)) (! (= (fun_app$ (case_behaviour$ ?v0 ?v1 ?v2) diverges$) ?v1) :pattern ((case_behaviour$ ?v0 ?v1 ?v2)))) :named a444))
(assert (! (forall ((?v0 State1_bool_fun$) (?v1 Bool) (?v2 State1_bool_fun$)) (! (= (fun_app$a (case_behaviour$a ?v0 ?v1 ?v2) diverges$a) ?v1) :pattern ((case_behaviour$a ?v0 ?v1 ?v2)))) :named a445))
(assert (! (forall ((?v0 State2_bool_fun$) (?v1 Bool) (?v2 State2_bool_fun$) (?v3 State2$)) (! (= (fun_app$ (case_behaviour$ ?v0 ?v1 ?v2) (fun_app$aa terminates$b ?v3)) (fun_app$b ?v0 ?v3)) :pattern ((fun_app$ (case_behaviour$ ?v0 ?v1 ?v2) (fun_app$aa terminates$b ?v3))))) :named a446))
(assert (! (forall ((?v0 State1_bool_fun$) (?v1 Bool) (?v2 State1_bool_fun$) (?v3 State1$)) (! (= (fun_app$a (case_behaviour$a ?v0 ?v1 ?v2) (fun_app$w terminates$ ?v3)) (fun_app$c ?v0 ?v3)) :pattern ((fun_app$a (case_behaviour$a ?v0 ?v1 ?v2) (fun_app$w terminates$ ?v3))))) :named a447))
(assert (! (forall ((?v0 State2_bool_fun$) (?v1 Bool) (?v2 State2_bool_fun$) (?v3 State2$)) (! (= (fun_app$ (case_behaviour$ ?v0 ?v1 ?v2) (fun_app$aa goes_wrong$b ?v3)) (fun_app$b ?v2 ?v3)) :pattern ((fun_app$ (case_behaviour$ ?v0 ?v1 ?v2) (fun_app$aa goes_wrong$b ?v3))))) :named a448))
(assert (! (forall ((?v0 State1_bool_fun$) (?v1 Bool) (?v2 State1_bool_fun$) (?v3 State1$)) (! (= (fun_app$a (case_behaviour$a ?v0 ?v1 ?v2) (fun_app$w goes_wrong$ ?v3)) (fun_app$c ?v2 ?v3)) :pattern ((fun_app$a (case_behaviour$a ?v0 ?v1 ?v2) (fun_app$w goes_wrong$ ?v3))))) :named a449))
(assert (! (forall ((?v0 State1_behaviour$)) (= (= ?v0 diverges$a) (fun_app$a (case_behaviour$a uul$ true uul$) ?v0))) :named a450))
(assert (! (forall ((?v0 State2_behaviour$)) (= (= ?v0 diverges$) (fun_app$ (case_behaviour$ uuj$ true uuj$) ?v0))) :named a451))
(assert (! (forall ((?v0 State1_behaviour$)) (! (= (fun_app$a is_wrong$ ?v0) (fun_app$a (case_behaviour$a uul$ false uuk$) ?v0)) :pattern ((fun_app$a is_wrong$ ?v0)))) :named a452))
(assert (! (forall ((?v0 State2_behaviour$)) (! (= (fun_app$ is_wrong$a ?v0) (fun_app$ (case_behaviour$ uuj$ false uui$) ?v0)) :pattern ((fun_app$ is_wrong$a ?v0)))) :named a453))
(assert (! (forall ((?v0 State2_bool_fun$) (?v1 Bool) (?v2 State2_bool_fun$) (?v3 State2_behaviour$)) (! (= (fun_app$ (case_behaviour$ ?v0 ?v1 ?v2) ?v3) (ite (fun_app$ is_Terminates$a ?v3) (fun_app$b ?v0 (un_Terminates$a ?v3)) (ite (= ?v3 diverges$) ?v1 (fun_app$b ?v2 (un_Goes_wrong$a ?v3))))) :pattern ((fun_app$ (case_behaviour$ ?v0 ?v1 ?v2) ?v3)))) :named a454))
(assert (! (forall ((?v0 State1_bool_fun$) (?v1 Bool) (?v2 State1_bool_fun$) (?v3 State1_behaviour$)) (! (= (fun_app$a (case_behaviour$a ?v0 ?v1 ?v2) ?v3) (ite (fun_app$a is_Terminates$ ?v3) (fun_app$c ?v0 (un_Terminates$ ?v3)) (ite (= ?v3 diverges$a) ?v1 (fun_app$c ?v2 (un_Goes_wrong$ ?v3))))) :pattern ((fun_app$a (case_behaviour$a ?v0 ?v1 ?v2) ?v3)))) :named a455))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (and (=> (fun_app$a is_Terminates$ ?v0) false) (and (=> (= ?v0 diverges$a) false) (=> (fun_app$a is_wrong$ ?v0) false))) false)) :named a456))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (and (=> (fun_app$ is_Terminates$a ?v0) false) (and (=> (= ?v0 diverges$) false) (=> (fun_app$ is_wrong$a ?v0) false))) false)) :named a457))
(assert (! (forall ((?v0 State1_state1_behaviour_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State1_behaviour_behaviour$)) (! (= (fun_app$af (fun_app$ag (rel_behaviour$ ?v0) ?v1) ?v2) (and (= (fun_app$a is_Terminates$ ?v1) (is_Terminates$b ?v2)) (and (=> (and (fun_app$a is_Terminates$ ?v1) (is_Terminates$b ?v2)) (fun_app$a (fun_app$v ?v0 (un_Terminates$ ?v1)) (un_Terminates$b ?v2))) (and (= (= ?v1 diverges$a) (= ?v2 diverges$c)) (=> (and (fun_app$a is_wrong$ ?v1) (is_wrong$b ?v2)) (fun_app$a (fun_app$v ?v0 (un_Goes_wrong$ ?v1)) (un_Goes_wrong$b ?v2))))))) :pattern ((fun_app$af (fun_app$ag (rel_behaviour$ ?v0) ?v1) ?v2)))) :named a458))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State1_behaviour$)) (! (= (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) ?v1) ?v2) (and (= (fun_app$a is_Terminates$ ?v1) (fun_app$a is_Terminates$ ?v2)) (and (=> (and (fun_app$a is_Terminates$ ?v1) (fun_app$a is_Terminates$ ?v2)) (fun_app$c (fun_app$h ?v0 (un_Terminates$ ?v1)) (un_Terminates$ ?v2))) (and (= (= ?v1 diverges$a) (= ?v2 diverges$a)) (=> (and (fun_app$a is_wrong$ ?v1) (fun_app$a is_wrong$ ?v2)) (fun_app$c (fun_app$h ?v0 (un_Goes_wrong$ ?v1)) (un_Goes_wrong$ ?v2))))))) :pattern ((fun_app$a (fun_app$ah (rel_behaviour$a ?v0) ?v1) ?v2)))) :named a459))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State2_behaviour$)) (! (= (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) ?v1) ?v2) (and (= (fun_app$a is_Terminates$ ?v1) (fun_app$ is_Terminates$a ?v2)) (and (=> (and (fun_app$a is_Terminates$ ?v1) (fun_app$ is_Terminates$a ?v2)) (fun_app$b (fun_app$n ?v0 (un_Terminates$ ?v1)) (un_Terminates$a ?v2))) (and (= (= ?v1 diverges$a) (= ?v2 diverges$)) (=> (and (fun_app$a is_wrong$ ?v1) (fun_app$ is_wrong$a ?v2)) (fun_app$b (fun_app$n ?v0 (un_Goes_wrong$ ?v1)) (un_Goes_wrong$a ?v2))))))) :pattern ((fun_app$ (fun_app$aj (rel_behaviour$b ?v0) ?v1) ?v2)))) :named a460))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State1_behaviour$)) (! (= (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) ?v1) ?v2) (and (= (fun_app$ is_Terminates$a ?v1) (fun_app$a is_Terminates$ ?v2)) (and (=> (and (fun_app$ is_Terminates$a ?v1) (fun_app$a is_Terminates$ ?v2)) (fun_app$c (fun_app$r ?v0 (un_Terminates$a ?v1)) (un_Terminates$ ?v2))) (and (= (= ?v1 diverges$) (= ?v2 diverges$a)) (=> (and (fun_app$ is_wrong$a ?v1) (fun_app$a is_wrong$ ?v2)) (fun_app$c (fun_app$r ?v0 (un_Goes_wrong$a ?v1)) (un_Goes_wrong$ ?v2))))))) :pattern ((fun_app$a (fun_app$ak (rel_behaviour$c ?v0) ?v1) ?v2)))) :named a461))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State2_behaviour$)) (! (= (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) ?v1) ?v2) (and (= (fun_app$ is_Terminates$a ?v1) (fun_app$ is_Terminates$a ?v2)) (and (=> (and (fun_app$ is_Terminates$a ?v1) (fun_app$ is_Terminates$a ?v2)) (fun_app$b (fun_app$g ?v0 (un_Terminates$a ?v1)) (un_Terminates$a ?v2))) (and (= (= ?v1 diverges$) (= ?v2 diverges$)) (=> (and (fun_app$ is_wrong$a ?v1) (fun_app$ is_wrong$a ?v2)) (fun_app$b (fun_app$g ?v0 (un_Goes_wrong$a ?v1)) (un_Goes_wrong$a ?v2))))))) :pattern ((fun_app$ (fun_app$ai (rel_behaviour$d ?v0) ?v1) ?v2)))) :named a462))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_index_prod_index_index_prod_bool_fun_fun$)) (=> (and (well_founded$ ?v0) (well_founded$c ?v1)) (well_founded$d (lex_prodp$ ?v0 ?v1)))) :named a463))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$) (?v1 Index_index_bool_fun_fun$)) (=> (and (well_founded$c ?v0) (well_founded$ ?v1)) (well_founded$e (lex_prodp$a ?v0 ?v1)))) :named a464))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$) (?v1 Index_index_prod_index_index_prod_bool_fun_fun$)) (=> (and (well_founded$c ?v0) (well_founded$c ?v1)) (well_founded$f (lex_prodp$b ?v0 ?v1)))) :named a465))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_index_bool_fun_fun$)) (=> (and (well_founded$ ?v0) (well_founded$ ?v1)) (well_founded$c (lex_prodp$c ?v0 ?v1)))) :named a466))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 Index_index_prod$) (?v3 State1$)) (=> (and (well_founded$c ?v0) (fun_app$c (inf_wf$ ?v1 ?v0 ?v2) ?v3)) (fun_app$c (inf$ ?v1) ?v3))) :named a467))
(assert (! (forall ((?v0 Index_index_prod_index_index_prod_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 Index_index_prod$) (?v3 State2$)) (=> (and (well_founded$c ?v0) (fun_app$b (inf_wf$a ?v1 ?v0 ?v2) ?v3)) (fun_app$b (inf$a ?v1) ?v3))) :named a468))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$) (?v2 Index$) (?v3 State1$)) (=> (and (well_founded$ ?v0) (fun_app$c (inf_wf$b ?v1 ?v0 ?v2) ?v3)) (fun_app$c (inf$ ?v1) ?v3))) :named a469))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$) (?v2 Index$) (?v3 State2$)) (=> (and (well_founded$ ?v0) (fun_app$b (inf_wf$c ?v1 ?v0 ?v2) ?v3)) (fun_app$b (inf$a ?v1) ?v3))) :named a470))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_index_bool_fun_fun$)) (=> (and (wfP$ ?v0) (wfP$ ?v1)) (wfP$c (lex_prodp$c ?v0 ?v1)))) :named a471))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$)) (=> (and (wfP$ ?v0) (wfP$a ?v1)) (wfP$d (lex_prodp$d ?v0 ?v1)))) :named a472))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$)) (=> (and (wfP$ ?v0) (wfP$b ?v1)) (wfP$e (lex_prodp$e ?v0 ?v1)))) :named a473))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 Index_index_bool_fun_fun$)) (=> (and (wfP$a ?v0) (wfP$ ?v1)) (wfP$f (lex_prodp$f ?v0 ?v1)))) :named a474))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$)) (=> (and (wfP$a ?v0) (wfP$a ?v1)) (wfP$g (lex_prodp$g ?v0 ?v1)))) :named a475))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$)) (=> (and (wfP$a ?v0) (wfP$b ?v1)) (wfP$h (lex_prodp$h ?v0 ?v1)))) :named a476))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 Index_index_bool_fun_fun$)) (=> (and (wfP$b ?v0) (wfP$ ?v1)) (wfP$i (lex_prodp$i ?v0 ?v1)))) :named a477))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$)) (=> (and (wfP$b ?v0) (wfP$a ?v1)) (wfP$j (lex_prodp$j ?v0 ?v1)))) :named a478))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$)) (=> (and (wfP$b ?v0) (wfP$b ?v1)) (wfP$k (lex_prodp$k ?v0 ?v1)))) :named a479))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_index_prod_index_index_prod_bool_fun_fun$)) (=> (and (wfP$ ?v0) (wfP$c ?v1)) (wfP$l (lex_prodp$ ?v0 ?v1)))) :named a480))
(assert (! (forall ((?v0 State2_behaviour$)) (= (un_Goes_wrong$a ?v0) (case_behaviour$b uuo$ undefined$ uup$ ?v0))) :named a481))
(assert (! (forall ((?v0 State1_behaviour$)) (= (un_Goes_wrong$ ?v0) (case_behaviour$c uuq$ undefined$a uur$ ?v0))) :named a482))
(assert (! (forall ((?v0 State2_behaviour$)) (= (un_Terminates$a ?v0) (case_behaviour$b uup$ undefined$ uuo$ ?v0))) :named a483))
(assert (! (forall ((?v0 State1_behaviour$)) (= (un_Terminates$ ?v0) (case_behaviour$c uur$ undefined$a uuq$ ?v0))) :named a484))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (right_unique$ ?v0) (right_unique$f (rel_behaviour$d ?v0)))) :named a485))
(assert (! (forall ((?v0 State2_state2_behaviour_bool_fun_fun$)) (=> (right_unique$a ?v0) (right_unique$g (rel_behaviour$e ?v0)))) :named a486))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (right_unique$h ?v0) (right_unique$d (rel_behaviour$a ?v0)))) :named a487))
(assert (! (forall ((?v0 State1_state1_behaviour_bool_fun_fun$)) (=> (right_unique$i ?v0) (right_unique$e (rel_behaviour$ ?v0)))) :named a488))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) diverges$a) diverges$a)) :named a489))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$)) (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) diverges$a) diverges$)) :named a490))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$)) (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) diverges$) diverges$a)) :named a491))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) diverges$) diverges$)) :named a492))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w terminates$ ?v1)) (fun_app$w terminates$ ?v2)))) :named a493))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1$) (?v2 State2$)) (=> (fun_app$b (fun_app$n ?v0 ?v1) ?v2) (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w terminates$ ?v1)) (fun_app$aa terminates$b ?v2)))) :named a494))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2$) (?v2 State1$)) (=> (fun_app$c (fun_app$r ?v0 ?v1) ?v2) (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$w terminates$ ?v2)))) :named a495))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$aa terminates$b ?v2)))) :named a496))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v1) ?v2) (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$w goes_wrong$ ?v2)))) :named a497))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1$) (?v2 State2$)) (=> (fun_app$b (fun_app$n ?v0 ?v1) ?v2) (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$aa goes_wrong$b ?v2)))) :named a498))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2$) (?v2 State1$)) (=> (fun_app$c (fun_app$r ?v0 ?v1) ?v2) (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$w goes_wrong$ ?v2)))) :named a499))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v1) ?v2) (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$aa goes_wrong$b ?v2)))) :named a500))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (! (= (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w terminates$ ?v1)) (fun_app$w terminates$ ?v2)) (fun_app$c (fun_app$h ?v0 ?v1) ?v2)) :pattern ((fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w terminates$ ?v1)) (fun_app$w terminates$ ?v2))))) :named a501))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1$) (?v2 State2$)) (! (= (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w terminates$ ?v1)) (fun_app$aa terminates$b ?v2)) (fun_app$b (fun_app$n ?v0 ?v1) ?v2)) :pattern ((fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w terminates$ ?v1)) (fun_app$aa terminates$b ?v2))))) :named a502))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2$) (?v2 State1$)) (! (= (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$w terminates$ ?v2)) (fun_app$c (fun_app$r ?v0 ?v1) ?v2)) :pattern ((fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$w terminates$ ?v2))))) :named a503))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (! (= (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$aa terminates$b ?v2)) (fun_app$b (fun_app$g ?v0 ?v1) ?v2)) :pattern ((fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$aa terminates$b ?v2))))) :named a504))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (! (= (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$w goes_wrong$ ?v2)) (fun_app$c (fun_app$h ?v0 ?v1) ?v2)) :pattern ((fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$w goes_wrong$ ?v2))))) :named a505))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1$) (?v2 State2$)) (! (= (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$aa goes_wrong$b ?v2)) (fun_app$b (fun_app$n ?v0 ?v1) ?v2)) :pattern ((fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$aa goes_wrong$b ?v2))))) :named a506))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2$) (?v2 State1$)) (! (= (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$w goes_wrong$ ?v2)) (fun_app$c (fun_app$r ?v0 ?v1) ?v2)) :pattern ((fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$w goes_wrong$ ?v2))))) :named a507))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (! (= (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$aa goes_wrong$b ?v2)) (fun_app$b (fun_app$g ?v0 ?v1) ?v2)) :pattern ((fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$aa goes_wrong$b ?v2))))) :named a508))
(assert (! (forall ((?v0 State1_state1_behaviour_bool_fun_fun$)) (=> (fun_app$ab left_total$ ?v0) (left_total$b (rel_behaviour$ ?v0)))) :named a509))
(assert (! (forall ((?v0 State2_state2_behaviour_bool_fun_fun$)) (=> (fun_app$ac left_total$c ?v0) (left_total$a (rel_behaviour$e ?v0)))) :named a510))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$)) (not (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w terminates$ ?v1)) diverges$a))) :named a511))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1$)) (not (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w terminates$ ?v1)) diverges$))) :named a512))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2$)) (not (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa terminates$b ?v1)) diverges$a))) :named a513))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$)) (not (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa terminates$b ?v1)) diverges$))) :named a514))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$)) (not (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) diverges$a) (fun_app$w terminates$ ?v1)))) :named a515))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State1$)) (not (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) diverges$) (fun_app$w terminates$ ?v1)))) :named a516))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State2$)) (not (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) diverges$a) (fun_app$aa terminates$b ?v1)))) :named a517))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$)) (not (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) diverges$) (fun_app$aa terminates$b ?v1)))) :named a518))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$)) (not (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) diverges$a) (fun_app$w goes_wrong$ ?v1)))) :named a519))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State1$)) (not (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) diverges$) (fun_app$w goes_wrong$ ?v1)))) :named a520))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State2$)) (not (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) diverges$a) (fun_app$aa goes_wrong$b ?v1)))) :named a521))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$)) (not (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) diverges$) (fun_app$aa goes_wrong$b ?v1)))) :named a522))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$)) (not (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w goes_wrong$ ?v1)) diverges$a))) :named a523))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1$)) (not (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w goes_wrong$ ?v1)) diverges$))) :named a524))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2$)) (not (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa goes_wrong$b ?v1)) diverges$a))) :named a525))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$)) (not (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa goes_wrong$b ?v1)) diverges$))) :named a526))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (not (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$w terminates$ ?v2)))) :named a527))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2$) (?v2 State1$)) (not (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$w terminates$ ?v2)))) :named a528))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1$) (?v2 State2$)) (not (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$aa terminates$b ?v2)))) :named a529))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (not (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$aa terminates$b ?v2)))) :named a530))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1$) (?v2 State1$)) (not (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) (fun_app$w terminates$ ?v1)) (fun_app$w goes_wrong$ ?v2)))) :named a531))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1$) (?v2 State2$)) (not (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) (fun_app$w terminates$ ?v1)) (fun_app$aa goes_wrong$b ?v2)))) :named a532))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2$) (?v2 State1$)) (not (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$w goes_wrong$ ?v2)))) :named a533))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2$) (?v2 State2$)) (not (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$aa goes_wrong$b ?v2)))) :named a534))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State1_behaviour$)) (=> (and (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) ?v1) ?v2) (and (forall ((?v3 State1$) (?v4 State1$)) (=> (and (= ?v1 (fun_app$w terminates$ ?v3)) (and (= ?v2 (fun_app$w terminates$ ?v4)) (fun_app$c (fun_app$h ?v0 ?v3) ?v4))) false)) (and (=> (and (= ?v1 diverges$a) (= ?v2 diverges$a)) false) (forall ((?v3 State1$) (?v4 State1$)) (=> (and (= ?v1 (fun_app$w goes_wrong$ ?v3)) (and (= ?v2 (fun_app$w goes_wrong$ ?v4)) (fun_app$c (fun_app$h ?v0 ?v3) ?v4))) false))))) false)) :named a535))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State2_behaviour$)) (=> (and (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) ?v1) ?v2) (and (forall ((?v3 State1$) (?v4 State2$)) (=> (and (= ?v1 (fun_app$w terminates$ ?v3)) (and (= ?v2 (fun_app$aa terminates$b ?v4)) (fun_app$b (fun_app$n ?v0 ?v3) ?v4))) false)) (and (=> (and (= ?v1 diverges$a) (= ?v2 diverges$)) false) (forall ((?v3 State1$) (?v4 State2$)) (=> (and (= ?v1 (fun_app$w goes_wrong$ ?v3)) (and (= ?v2 (fun_app$aa goes_wrong$b ?v4)) (fun_app$b (fun_app$n ?v0 ?v3) ?v4))) false))))) false)) :named a536))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State1_behaviour$)) (=> (and (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) ?v1) ?v2) (and (forall ((?v3 State2$) (?v4 State1$)) (=> (and (= ?v1 (fun_app$aa terminates$b ?v3)) (and (= ?v2 (fun_app$w terminates$ ?v4)) (fun_app$c (fun_app$r ?v0 ?v3) ?v4))) false)) (and (=> (and (= ?v1 diverges$) (= ?v2 diverges$a)) false) (forall ((?v3 State2$) (?v4 State1$)) (=> (and (= ?v1 (fun_app$aa goes_wrong$b ?v3)) (and (= ?v2 (fun_app$w goes_wrong$ ?v4)) (fun_app$c (fun_app$r ?v0 ?v3) ?v4))) false))))) false)) :named a537))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State2_behaviour$)) (=> (and (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) ?v1) ?v2) (and (forall ((?v3 State2$) (?v4 State2$)) (=> (and (= ?v1 (fun_app$aa terminates$b ?v3)) (and (= ?v2 (fun_app$aa terminates$b ?v4)) (fun_app$b (fun_app$g ?v0 ?v3) ?v4))) false)) (and (=> (and (= ?v1 diverges$) (= ?v2 diverges$)) false) (forall ((?v3 State2$) (?v4 State2$)) (=> (and (= ?v1 (fun_app$aa goes_wrong$b ?v3)) (and (= ?v2 (fun_app$aa goes_wrong$b ?v4)) (fun_app$b (fun_app$g ?v0 ?v3) ?v4))) false))))) false)) :named a538))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State1_behaviour$) (?v3 State1_behaviour_state1_behaviour_bool_fun_fun$)) (=> (and (fun_app$a (fun_app$ah (rel_behaviour$a ?v0) ?v1) ?v2) (and (forall ((?v4 State1$) (?v5 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v5) (fun_app$a (fun_app$ah ?v3 (fun_app$w terminates$ ?v4)) (fun_app$w terminates$ ?v5)))) (and (fun_app$a (fun_app$ah ?v3 diverges$a) diverges$a) (forall ((?v4 State1$) (?v5 State1$)) (=> (fun_app$c (fun_app$h ?v0 ?v4) ?v5) (fun_app$a (fun_app$ah ?v3 (fun_app$w goes_wrong$ ?v4)) (fun_app$w goes_wrong$ ?v5))))))) (fun_app$a (fun_app$ah ?v3 ?v1) ?v2))) :named a539))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1_behaviour$) (?v2 State2_behaviour$) (?v3 State1_behaviour_state2_behaviour_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$aj (rel_behaviour$b ?v0) ?v1) ?v2) (and (forall ((?v4 State1$) (?v5 State2$)) (=> (fun_app$b (fun_app$n ?v0 ?v4) ?v5) (fun_app$ (fun_app$aj ?v3 (fun_app$w terminates$ ?v4)) (fun_app$aa terminates$b ?v5)))) (and (fun_app$ (fun_app$aj ?v3 diverges$a) diverges$) (forall ((?v4 State1$) (?v5 State2$)) (=> (fun_app$b (fun_app$n ?v0 ?v4) ?v5) (fun_app$ (fun_app$aj ?v3 (fun_app$w goes_wrong$ ?v4)) (fun_app$aa goes_wrong$b ?v5))))))) (fun_app$ (fun_app$aj ?v3 ?v1) ?v2))) :named a540))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State1_behaviour$) (?v3 State2_behaviour_state1_behaviour_bool_fun_fun$)) (=> (and (fun_app$a (fun_app$ak (rel_behaviour$c ?v0) ?v1) ?v2) (and (forall ((?v4 State2$) (?v5 State1$)) (=> (fun_app$c (fun_app$r ?v0 ?v4) ?v5) (fun_app$a (fun_app$ak ?v3 (fun_app$aa terminates$b ?v4)) (fun_app$w terminates$ ?v5)))) (and (fun_app$a (fun_app$ak ?v3 diverges$) diverges$a) (forall ((?v4 State2$) (?v5 State1$)) (=> (fun_app$c (fun_app$r ?v0 ?v4) ?v5) (fun_app$a (fun_app$ak ?v3 (fun_app$aa goes_wrong$b ?v4)) (fun_app$w goes_wrong$ ?v5))))))) (fun_app$a (fun_app$ak ?v3 ?v1) ?v2))) :named a541))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_behaviour$) (?v2 State2_behaviour$) (?v3 State2_behaviour_state2_behaviour_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$ai (rel_behaviour$d ?v0) ?v1) ?v2) (and (forall ((?v4 State2$) (?v5 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v5) (fun_app$ (fun_app$ai ?v3 (fun_app$aa terminates$b ?v4)) (fun_app$aa terminates$b ?v5)))) (and (fun_app$ (fun_app$ai ?v3 diverges$) diverges$) (forall ((?v4 State2$) (?v5 State2$)) (=> (fun_app$b (fun_app$g ?v0 ?v4) ?v5) (fun_app$ (fun_app$ai ?v3 (fun_app$aa goes_wrong$b ?v4)) (fun_app$aa goes_wrong$b ?v5))))))) (fun_app$ (fun_app$ai ?v3 ?v1) ?v2))) :named a542))
(assert (! (forall ((?v0 State1_behaviour$)) (=> (fun_app$a is_wrong$ ?v0) (member$a (un_Goes_wrong$ ?v0) (set_behaviour$ ?v0)))) :named a543))
(assert (! (forall ((?v0 State2_behaviour$)) (=> (fun_app$ is_wrong$a ?v0) (member$ (un_Goes_wrong$a ?v0) (set_behaviour$a ?v0)))) :named a544))
(assert (! (forall ((?v0 State1$) (?v1 State1_behaviour$)) (=> (and (member$a ?v0 (set_behaviour$ ?v1)) (and (=> (= ?v1 (fun_app$w terminates$ ?v0)) false) (=> (= ?v1 (fun_app$w goes_wrong$ ?v0)) false))) false)) :named a545))
(assert (! (forall ((?v0 State2$) (?v1 State2_behaviour$)) (=> (and (member$ ?v0 (set_behaviour$a ?v1)) (and (=> (= ?v1 (fun_app$aa terminates$b ?v0)) false) (=> (= ?v1 (fun_app$aa goes_wrong$b ?v0)) false))) false)) :named a546))
(assert (! (forall ((?v0 State1_state1_fun$) (?v1 State1_behaviour$)) (= (= (fun_app$al (map_behaviour$ ?v0) ?v1) diverges$a) (= ?v1 diverges$a))) :named a547))
(assert (! (forall ((?v0 State2_state1_fun$) (?v1 State2_behaviour$)) (= (= (fun_app$am (map_behaviour$a ?v0) ?v1) diverges$a) (= ?v1 diverges$))) :named a548))
(assert (! (forall ((?v0 State1_state2_fun$) (?v1 State1_behaviour$)) (= (= (fun_app$an (map_behaviour$b ?v0) ?v1) diverges$) (= ?v1 diverges$a))) :named a549))
(assert (! (forall ((?v0 State2_state2_fun$) (?v1 State2_behaviour$)) (= (= (fun_app$ao (map_behaviour$c ?v0) ?v1) diverges$) (= ?v1 diverges$))) :named a550))
(assert (! (forall ((?v0 State1_state1_fun$) (?v1 State1_behaviour$)) (= (fun_app$a is_wrong$ (fun_app$al (map_behaviour$ ?v0) ?v1)) (fun_app$a is_wrong$ ?v1))) :named a551))
(assert (! (forall ((?v0 State2_state1_fun$) (?v1 State2_behaviour$)) (= (fun_app$a is_wrong$ (fun_app$am (map_behaviour$a ?v0) ?v1)) (fun_app$ is_wrong$a ?v1))) :named a552))
(assert (! (forall ((?v0 State1_state2_fun$) (?v1 State1_behaviour$)) (= (fun_app$ is_wrong$a (fun_app$an (map_behaviour$b ?v0) ?v1)) (fun_app$a is_wrong$ ?v1))) :named a553))
(assert (! (forall ((?v0 State2_state2_fun$) (?v1 State2_behaviour$)) (= (fun_app$ is_wrong$a (fun_app$ao (map_behaviour$c ?v0) ?v1)) (fun_app$ is_wrong$a ?v1))) :named a554))
(assert (! (forall ((?v0 State1_state1_fun$)) (! (= (fun_app$al (map_behaviour$ ?v0) diverges$a) diverges$a) :pattern ((map_behaviour$ ?v0)))) :named a555))
(assert (! (forall ((?v0 State1_state2_fun$)) (! (= (fun_app$an (map_behaviour$b ?v0) diverges$a) diverges$) :pattern ((map_behaviour$b ?v0)))) :named a556))
(assert (! (forall ((?v0 State2_state1_fun$)) (! (= (fun_app$am (map_behaviour$a ?v0) diverges$) diverges$a) :pattern ((map_behaviour$a ?v0)))) :named a557))
(assert (! (forall ((?v0 State2_state2_fun$)) (! (= (fun_app$ao (map_behaviour$c ?v0) diverges$) diverges$) :pattern ((map_behaviour$c ?v0)))) :named a558))
(assert (! (forall ((?v0 State1_state1_fun$) (?v1 State1$)) (! (= (fun_app$al (map_behaviour$ ?v0) (fun_app$w terminates$ ?v1)) (fun_app$w terminates$ (fun_app$m ?v0 ?v1))) :pattern ((fun_app$al (map_behaviour$ ?v0) (fun_app$w terminates$ ?v1))))) :named a559))
(assert (! (forall ((?v0 State1_state2_fun$) (?v1 State1$)) (! (= (fun_app$an (map_behaviour$b ?v0) (fun_app$w terminates$ ?v1)) (fun_app$aa terminates$b (fun_app$ap ?v0 ?v1))) :pattern ((fun_app$an (map_behaviour$b ?v0) (fun_app$w terminates$ ?v1))))) :named a560))
(assert (! (forall ((?v0 State2_state1_fun$) (?v1 State2$)) (! (= (fun_app$am (map_behaviour$a ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$w terminates$ (fun_app$aq ?v0 ?v1))) :pattern ((fun_app$am (map_behaviour$a ?v0) (fun_app$aa terminates$b ?v1))))) :named a561))
(assert (! (forall ((?v0 State2_state2_fun$) (?v1 State2$)) (! (= (fun_app$ao (map_behaviour$c ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$aa terminates$b (fun_app$l ?v0 ?v1))) :pattern ((fun_app$ao (map_behaviour$c ?v0) (fun_app$aa terminates$b ?v1))))) :named a562))
(assert (! (forall ((?v0 State1_state1_fun$) (?v1 State1$)) (! (= (fun_app$al (map_behaviour$ ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$w goes_wrong$ (fun_app$m ?v0 ?v1))) :pattern ((fun_app$al (map_behaviour$ ?v0) (fun_app$w goes_wrong$ ?v1))))) :named a563))
(assert (! (forall ((?v0 State1_state2_fun$) (?v1 State1$)) (! (= (fun_app$an (map_behaviour$b ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$aa goes_wrong$b (fun_app$ap ?v0 ?v1))) :pattern ((fun_app$an (map_behaviour$b ?v0) (fun_app$w goes_wrong$ ?v1))))) :named a564))
(assert (! (forall ((?v0 State2_state1_fun$) (?v1 State2$)) (! (= (fun_app$am (map_behaviour$a ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$w goes_wrong$ (fun_app$aq ?v0 ?v1))) :pattern ((fun_app$am (map_behaviour$a ?v0) (fun_app$aa goes_wrong$b ?v1))))) :named a565))
(assert (! (forall ((?v0 State2_state2_fun$) (?v1 State2$)) (! (= (fun_app$ao (map_behaviour$c ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$aa goes_wrong$b (fun_app$l ?v0 ?v1))) :pattern ((fun_app$ao (map_behaviour$c ?v0) (fun_app$aa goes_wrong$b ?v1))))) :named a566))
(assert (! (forall ((?v0 State1$)) (member$a ?v0 (set_behaviour$ (fun_app$w terminates$ ?v0)))) :named a567))
(assert (! (forall ((?v0 State2$)) (member$ ?v0 (set_behaviour$a (fun_app$aa terminates$b ?v0)))) :named a568))
(assert (! (forall ((?v0 State1$)) (member$a ?v0 (set_behaviour$ (fun_app$w goes_wrong$ ?v0)))) :named a569))
(assert (! (forall ((?v0 State2$)) (member$ ?v0 (set_behaviour$a (fun_app$aa goes_wrong$b ?v0)))) :named a570))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (=> (wfP$ ?v0) (irreflp$ ?v0))) :named a571))
(assert (! (= (set_behaviour$ diverges$a) bot$) :named a572))
(assert (! (= (set_behaviour$a diverges$) bot$a) :named a573))
(assert (! (forall ((?v0 State1$)) (! (= (set_behaviour$ (fun_app$w goes_wrong$ ?v0)) (insert$ ?v0 bot$)) :pattern ((fun_app$w goes_wrong$ ?v0)))) :named a574))
(assert (! (forall ((?v0 State2$)) (! (= (set_behaviour$a (fun_app$aa goes_wrong$b ?v0)) (insert$a ?v0 bot$a)) :pattern ((fun_app$aa goes_wrong$b ?v0)))) :named a575))
(assert (! (forall ((?v0 State1$)) (! (= (set_behaviour$ (fun_app$w terminates$ ?v0)) (insert$ ?v0 bot$)) :pattern ((fun_app$w terminates$ ?v0)))) :named a576))
(assert (! (forall ((?v0 State2$)) (! (= (set_behaviour$a (fun_app$aa terminates$b ?v0)) (insert$a ?v0 bot$a)) :pattern ((fun_app$aa terminates$b ?v0)))) :named a577))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (right_unique$ ?v0) (forall ((?v1 State2$)) (uniq$ (fun_app$g ?v0 ?v1))))) :named a578))
(assert (! (forall ((?v0 State2_state2_behaviour_bool_fun_fun$)) (= (right_unique$a ?v0) (forall ((?v1 State2$)) (uniq$a (fun_app$x ?v0 ?v1))))) :named a579))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (right_unique$h ?v0) (forall ((?v1 State1$)) (uniq$b (fun_app$h ?v0 ?v1))))) :named a580))
(assert (! (forall ((?v0 State1_state1_behaviour_bool_fun_fun$)) (= (right_unique$i ?v0) (forall ((?v1 State1$)) (uniq$c (fun_app$v ?v0 ?v1))))) :named a581))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (fun_app$ar (fun_app$as (rel_fun$ (rel_behaviour$a ?v0) uus$) uut$) uut$)) :named a582))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$)) (fun_app$at (fun_app$au (rel_fun$a (rel_behaviour$b ?v0) uus$) uut$) uuu$)) :named a583))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$)) (fun_app$ar (fun_app$av (rel_fun$b (rel_behaviour$c ?v0) uus$) uuu$) uut$)) :named a584))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (fun_app$at (fun_app$aw (rel_fun$c (rel_behaviour$d ?v0) uus$) uuu$) uuu$)) :named a585))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (= (sup$ (tranclp$a ?v0) uuv$) (rtranclp$a ?v0))) :named a586))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (sup$a (tranclp$ ?v0) uug$) (fun_app$p rtranclp$ ?v0))) :named a587))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (sup$b (tranclp$b ?v0) uuh$) (fun_app$u rtranclp$b ?v0))) :named a588))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$)) (=> (wfP$ ?v0) (asymp$ ?v0))) :named a589))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (sup$a (fun_app$p rtranclp$ ?v0) uug$) (fun_app$p rtranclp$ ?v0))) :named a590))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (sup$b (fun_app$u rtranclp$b ?v0) uuh$) (fun_app$u rtranclp$b ?v0))) :named a591))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (= (fun_app$p rtranclp$ (sup$a ?v0 uug$)) (fun_app$p rtranclp$ ?v0))) :named a592))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (= (fun_app$u rtranclp$b (sup$b ?v0 uuh$)) (fun_app$u rtranclp$b ?v0))) :named a593))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$)) (= (fun_app$p rtranclp$ (sup$a (fun_app$p rtranclp$ ?v0) (fun_app$p rtranclp$ ?v1))) (fun_app$p rtranclp$ (sup$a ?v0 ?v1)))) :named a594))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$)) (= (fun_app$u rtranclp$b (sup$b (fun_app$u rtranclp$b ?v0) (fun_app$u rtranclp$b ?v1))) (fun_app$u rtranclp$b (sup$b ?v0 ?v1)))) :named a595))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (fun_app$ar (fun_app$as (rel_fun$ (rel_behaviour$a ?v0) uus$) is_wrong$) is_wrong$)) :named a596))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$)) (fun_app$at (fun_app$au (rel_fun$a (rel_behaviour$b ?v0) uus$) is_wrong$) is_wrong$a)) :named a597))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$)) (fun_app$ar (fun_app$av (rel_fun$b (rel_behaviour$c ?v0) uus$) is_wrong$a) is_wrong$)) :named a598))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (fun_app$at (fun_app$aw (rel_fun$c (rel_behaviour$d ?v0) uus$) is_wrong$a) is_wrong$a)) :named a599))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (rel_fun$d ?v0 (rel_behaviour$a ?v0) terminates$ terminates$)) :named a600))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$)) (rel_fun$e ?v0 (rel_behaviour$b ?v0) terminates$ terminates$b)) :named a601))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$)) (rel_fun$f ?v0 (rel_behaviour$c ?v0) terminates$b terminates$)) :named a602))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (rel_fun$g ?v0 (rel_behaviour$d ?v0) terminates$b terminates$b)) :named a603))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (rel_fun$d ?v0 (rel_behaviour$a ?v0) goes_wrong$ goes_wrong$)) :named a604))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$)) (rel_fun$e ?v0 (rel_behaviour$b ?v0) goes_wrong$ goes_wrong$b)) :named a605))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$)) (rel_fun$f ?v0 (rel_behaviour$c ?v0) goes_wrong$b goes_wrong$)) :named a606))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (rel_fun$g ?v0 (rel_behaviour$d ?v0) goes_wrong$b goes_wrong$b)) :named a607))
(assert (! (forall ((?v0 State1_bool_fun$) (?v1 State1$)) (! (= (fun_app$a (pred_behaviour$ ?v0) (fun_app$w terminates$ ?v1)) (fun_app$c ?v0 ?v1)) :pattern ((fun_app$a (pred_behaviour$ ?v0) (fun_app$w terminates$ ?v1))))) :named a608))
(assert (! (forall ((?v0 State2_bool_fun$) (?v1 State2$)) (! (= (fun_app$ (pred_behaviour$a ?v0) (fun_app$aa terminates$b ?v1)) (fun_app$b ?v0 ?v1)) :pattern ((fun_app$ (pred_behaviour$a ?v0) (fun_app$aa terminates$b ?v1))))) :named a609))
(assert (! (forall ((?v0 State1_bool_fun$) (?v1 State1$)) (! (= (fun_app$a (pred_behaviour$ ?v0) (fun_app$w goes_wrong$ ?v1)) (fun_app$c ?v0 ?v1)) :pattern ((fun_app$a (pred_behaviour$ ?v0) (fun_app$w goes_wrong$ ?v1))))) :named a610))
(assert (! (forall ((?v0 State2_bool_fun$) (?v1 State2$)) (! (= (fun_app$ (pred_behaviour$a ?v0) (fun_app$aa goes_wrong$b ?v1)) (fun_app$b ?v0 ?v1)) :pattern ((fun_app$ (pred_behaviour$a ?v0) (fun_app$aa goes_wrong$b ?v1))))) :named a611))
(assert (! (forall ((?v0 State1_bool_fun$)) (fun_app$a (pred_behaviour$ ?v0) diverges$a)) :named a612))
(assert (! (forall ((?v0 State2_bool_fun$)) (fun_app$ (pred_behaviour$a ?v0) diverges$)) :named a613))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_behaviour_state1_behaviour_bool_fun_fun$)) (=> (and (bi_total$ ?v0) (bi_total$a ?v1)) (rel_fun$h (rel_fun$i ?v0 (rel_fun$ ?v1 uus$)) uus$ left_total$ left_total$))) :named a614))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$) (?v1 State1_behaviour_state2_behaviour_bool_fun_fun$)) (=> (and (bi_total$b ?v0) (bi_total$c ?v1)) (rel_fun$j (rel_fun$k ?v0 (rel_fun$a ?v1 uus$)) uus$ left_total$ left_total$c))) :named a615))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$) (?v1 State2_behaviour_state1_behaviour_bool_fun_fun$)) (=> (and (bi_total$d ?v0) (bi_total$e ?v1)) (rel_fun$l (rel_fun$m ?v0 (rel_fun$b ?v1 uus$)) uus$ left_total$c left_total$))) :named a616))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_behaviour_state2_behaviour_bool_fun_fun$)) (=> (and (bi_total$f ?v0) (bi_total$g ?v1)) (rel_fun$n (rel_fun$o ?v0 (rel_fun$c ?v1 uus$)) uus$ left_total$c left_total$c))) :named a617))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$)) (=> (and (bi_unique$ ?v0) (bi_total$ ?v0)) (rel_fun$p (rel_fun$q ?v0 (rel_fun$r ?v0 uus$)) (rel_fun$q ?v0 (rel_fun$r ?v0 uus$)) rtranclp$ rtranclp$))) :named a618))
(assert (! (forall ((?v0 State1_state2_bool_fun_fun$)) (=> (and (bi_unique$a ?v0) (bi_total$b ?v0)) (rel_fun$s (rel_fun$t ?v0 (rel_fun$u ?v0 uus$)) (rel_fun$t ?v0 (rel_fun$u ?v0 uus$)) rtranclp$ rtranclp$b))) :named a619))
(assert (! (forall ((?v0 State2_state1_bool_fun_fun$)) (=> (and (bi_unique$b ?v0) (bi_total$d ?v0)) (rel_fun$v (rel_fun$w ?v0 (rel_fun$x ?v0 uus$)) (rel_fun$w ?v0 (rel_fun$x ?v0 uus$)) rtranclp$b rtranclp$))) :named a620))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$)) (=> (and (bi_unique$c ?v0) (bi_total$f ?v0)) (rel_fun$y (rel_fun$z ?v0 (rel_fun$aa ?v0 uus$)) (rel_fun$z ?v0 (rel_fun$aa ?v0 uus$)) rtranclp$b rtranclp$b))) :named a621))
(assert (! (forall ((?v0 Index_index_bool_fun_fun$) (?v1 Index_index_bool_fun_fun$)) (=> (and (wfP$ ?v0) (less_eq$ ?v1 ?v0)) (wfP$ ?v1))) :named a622))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 (fun_app$p rtranclp$ ?v0))) (= (fun_app$p rtranclp$ ?v1) (fun_app$p rtranclp$ ?v0)))) :named a623))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 (fun_app$u rtranclp$b ?v0))) (= (fun_app$u rtranclp$b ?v1) (fun_app$u rtranclp$b ?v0)))) :named a624))
(assert (! (forall ((?v0 State1_state1_bool_fun_fun$) (?v1 State1_state1_bool_fun_fun$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a (fun_app$p rtranclp$ ?v0) (fun_app$p rtranclp$ ?v1)))) :named a625))
(assert (! (forall ((?v0 State2_state2_bool_fun_fun$) (?v1 State2_state2_bool_fun_fun$)) (=> (less_eq$b ?v0 ?v1) (less_eq$b (fun_app$u rtranclp$b ?v0) (fun_app$u rtranclp$b ?v1)))) :named a626))
(check-sat)
