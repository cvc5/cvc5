; EXPECT: unsat
(set-logic AUFLIA)
(declare-sort State2_behaviour$ 0)
(declare-sort State2$ 0)
(declare-sort State1$ 0)
(declare-sort State1_state2_bool_fun_fun$ 0)
(declare-sort Index$ 0)
(declare-sort State2_bool_fun$ 0)
(declare-sort Index_state1_state2_bool_fun_fun_fun$ 0)
(declare-sort State1_state1_bool_fun_fun$ 0)
(declare-sort State1_bool_fun$ 0)
(declare-sort State1_set$ 0)
(declare-sort State1_behaviour$ 0)
(declare-sort State2_set$ 0)
(declare-const thesis$ Bool)
(declare-const s2$ State2$)
(declare-const step1$ State1_state1_bool_fun_fun$)
(declare-const diverges$ State2_behaviour$)
(declare-const match$ Index_state1_state2_bool_fun_fun_fun$)
(declare-const s1$ State1$)
(declare-const bot$ State1_set$)
(declare-const bot$a State2_set$)
(declare-const diverges$a State1_behaviour$)
(declare-fun set_behaviour$ (State1_behaviour$) State1_set$)
(declare-fun fun_app$o (Index_state1_state2_bool_fun_fun_fun$ Index$) State1_state2_bool_fun_fun$)
(declare-fun fun_app$b (State2_bool_fun$ State2$) Bool)
(declare-fun fun_app$n (State1_state2_bool_fun_fun$ State1$) State2_bool_fun$)
(declare-fun tranclp$ (State1_state1_bool_fun_fun$) State1_state1_bool_fun_fun$)
(declare-fun fun_app$c (State1_bool_fun$ State1$) Bool)
(declare-fun fun_app$h (State1_state1_bool_fun_fun$ State1$) State1_bool_fun$)
(declare-fun set_behaviour$a (State2_behaviour$) State2_set$)
(assert (not thesis$))
(assert (forall ((?v0 State1$) (?v1 Index$)) (=> (and (fun_app$c (fun_app$h (tranclp$ step1$) s1$) ?v0) (fun_app$b (fun_app$n (fun_app$o match$ ?v1) ?v0) s2$)) thesis$)))
(assert (exists ((?v0 Index$) (?v1 State1$)) (and (fun_app$c (fun_app$h (tranclp$ step1$) s1$) ?v1) (fun_app$b (fun_app$n (fun_app$o match$ ?v0) ?v1) s2$))))
(assert (= (set_behaviour$ diverges$a) bot$))
(assert (= (set_behaviour$a diverges$) bot$a))
(check-sat)
