(set-logic HO_ALL)
(set-info :status sat)
(set-option :uf-lazy-ll true)
(declare-const A (Set (Tuple Int)))
(declare-const B (Set (Tuple Int)))
(declare-const C (Set (Tuple Int)))
(declare-const n (Set (Tuple Int Int)))
(declare-const M (Set (Tuple Int Int)))
(assert (distinct (rel.product A n) (as set.empty (Set (Tuple Int Int Int)))))
(assert (= (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_2 (Tuple Int))) (= (as set.empty (Set (Tuple Int Int))) (set.filter (lambda ((tuple_3 (Tuple Int Int))) (distinct (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_4 (Tuple Int))) true) B))) n))) A)))
(assert (= (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_12 (Tuple Int))) (= (as set.empty (Set (Tuple Int Int))) (set.filter (lambda ((tuple_13 (Tuple Int Int))) (and (= ((_ tuple.select 0) tuple_12) ((_ tuple.select 0) tuple_13)) (distinct (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_14 (Tuple Int))) (> ((_ tuple.select 0) tuple_14) ((_ tuple.select 0) tuple_12))) C)))) M))) B)))
(assert (= (as set.empty (Set (Tuple Int))) (set.filter (lambda ((tuple_35 (Tuple Int))) (= (as set.empty (Set (Tuple Int Int))) (set.filter (lambda ((tuple_36 (Tuple Int Int))) (and (= ((_ tuple.select 0) tuple_35) ((_ tuple.select 0) tuple_36)) (distinct (as set.empty (Set (Tuple Int Int))) (set.filter (lambda ((tuple_38 (Tuple Int Int))) (= ((_ tuple.select 0) tuple_38) ((_ tuple.select 0) tuple_35))) n)))) M))) A)))
(assert (= (as set.empty (Set (Tuple Int Int Int))) (set.filter (lambda ((tuple_62 (Tuple Int Int Int))) (< ((_ tuple.select 1) tuple_62) ((_ tuple.select 0) tuple_62))) (rel.product C n))))
(check-sat)
