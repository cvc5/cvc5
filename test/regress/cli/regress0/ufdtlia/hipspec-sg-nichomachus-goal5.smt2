; COMMAND-LINE: --dt-stc-ind
; EXPECT: unsat
(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Leon, converted to v2.6 by CVC4
Application: Inductive theorem proving
Target solver: CVC4, Z3
Publications: "Induction for SMT Solvers" by Andrew Reynolds, and Viktor Kuncak, VMCAI 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat 0)) (((succ (pred Nat)) (zero))
))
(declare-fun plus (Nat Nat) Nat)
(assert (forall ((n Nat)) (= (plus zero n) n) ))
(assert (forall ((n Nat) (m Nat)) (= (plus (succ n) m) (succ (plus n m))) ))
(declare-fun mult (Nat Nat) Nat)
(assert (forall ((n Nat)) (= (mult zero n) zero) ))
(assert (forall ((n Nat) (m Nat)) (= (mult (succ n) m) (plus (mult n m) m)) ))
(declare-fun tri (Nat) Nat)
(assert (= (tri zero) zero))
(assert (forall ((n Nat)) (= (tri (succ n)) (plus (tri n) (succ n))) ))
(declare-fun cubes (Nat) Nat)
(assert (= (cubes zero) zero))
(assert (forall ((n Nat)) (= (cubes (succ n)) (plus (cubes n) (mult (succ n) (mult (succ n) (succ n))))) ))
(declare-fun nat-to-int (Nat) Int)
(assert (forall ((x Nat)) (>= (nat-to-int x) 0) ))
(assert (forall ((x Nat) (y Nat)) (=> (= (nat-to-int x) (nat-to-int y)) (= x y)) ))
(assert (= (nat-to-int zero) 0))
(assert (forall ((x Nat)) (= (nat-to-int (succ x)) (+ 1 (nat-to-int x))) ))
(assert (forall ((x Nat) (y Nat)) (= (nat-to-int (plus x y)) (+ (nat-to-int x) (nat-to-int y))) ))
(assert (forall ((n Nat) (m Nat)) (= (plus n m) (plus m n)) ))
(assert (forall ((x Nat) (y Nat) (z Nat)) (= (plus x (plus y z)) (plus (plus y x) z)) ))
(assert (forall ((n Nat) (m Nat)) (= (mult n m) (mult m n)) ))
(assert (forall ((x Nat) (y Nat) (z Nat)) (= (mult x (mult y z)) (mult (mult y x) z)) ))
(assert (not (forall ((x Nat) (y Nat)) (= (mult x (plus y y)) (mult y (plus x x))) )))
(check-sat)
(exit)

