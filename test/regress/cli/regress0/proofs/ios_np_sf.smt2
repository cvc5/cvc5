; EXPECT: unsat
(set-info :smt-lib-version 2.6)
(set-logic QF_ALIA)
(set-info :status unsat)
(declare-fun earray_12 () (Array Int Int))
(declare-fun earray_14 () (Array Int Int))
(declare-fun earray_16 () (Array Int Int))
(declare-fun earray_3 () (Array Int Int))
(declare-fun earray_6 () (Array Int Int))
(declare-fun earray_9 () (Array Int Int))
(declare-fun elem_0 () Int)
(declare-fun elem_1 () Int)
(declare-fun elem_10 () Int)
(declare-fun elem_11 () Int)
(declare-fun elem_13 () Int)
(declare-fun elem_15 () Int)
(declare-fun elem_2 () Int)
(declare-fun elem_4 () Int)
(declare-fun elem_5 () Int)
(declare-fun elem_7 () Int)
(declare-fun elem_8 () Int)
(declare-fun a () (Array Int Int))
(declare-fun i () Int)
(assert (= earray_12 (store a elem_4 elem_11)))
(assert (= earray_14 (store earray_12 elem_0 elem_13)))
(assert (= earray_16 (store earray_14 i elem_15)))
(assert (= earray_3 (store a elem_0 elem_2)))
(assert (= earray_6 (store earray_3 elem_4 elem_5)))
(assert (= earray_9 (store earray_6 elem_7 elem_8)))
(assert (= elem_0 (+ i 1)))
(assert (= elem_1 (select a i)))
(assert (= elem_10 (select a elem_7)))
(assert (= elem_11 (- elem_10 1)))
(assert (= elem_13 (- elem_11 1)))
(assert (= elem_15 (- elem_13 1)))
(assert (= elem_2 (+ elem_1 1)))
(assert (= elem_4 (+ elem_0 1)))
(assert (= elem_5 (+ elem_2 1)))
(assert (= elem_7 (+ elem_4 1)))
(assert (= elem_8 (+ elem_5 1)))
(assert (= earray_9 earray_16))
(assert (not (= elem_8 elem_10)))
(check-sat)
(exit)
