; DISABLE-TESTER: dump
; COMMAND-LINE: --finite-model-find
; EXPECT: sat
; EXPECT: (((_ fmf.card (to_ nat_ term_) 1) false) ((_ fmf.card (to_ nat_ term_) 2) true))
; EXPECT: ((as |@(to_ nat_ term_)_1| (to_ nat_ term_)) (as |@(to_ nat_ term_)_0| (to_ nat_ term_)))
; EXPECT: ((as |@(to_ nat_ term_)_1| (to_ nat_ term_)) (as |@(to_ nat_ term_)_0| (to_ nat_ term_)))
; EXPECT: (error "Parse Error: get-model-domain-elements.smt2:42.13: Symbol '@(to_ nat_ term_)_0' not declared as a variable")
; EXIT: 1
; generated by Nunchaku
(set-option :produce-models true)
(set-option :interactive-mode true)
(set-option :finite-model-find true)

(set-logic UFCDT)

(declare-datatypes ((nat_ 0)) (((S_ (_select_S__0 nat_)) (Z_ ))))
(declare-datatypes ((term_ 0))
   (((App_ (_select_App__0 term_) (_select_App__1 term_))
     (Lam_ (_select_Lam__0 term_)) (Var_ (_select_Var__0 nat_)))))

(declare-sort to_ 2)
(declare-fun app_0_ ((to_ nat_ term_) nat_) term_)
(declare-fun __nun_card_witness_0_ () (to_ nat_ term_))

(declare-fun __nun_card_witness_1_ () (to_ nat_ term_))
(assert (distinct __nun_card_witness_0_ __nun_card_witness_1_))

(define-sort to_nat_term_ () (to_ nat_ term_))
(assert (_ fmf.card to_nat_term_ 2))

; TODO: this should cause a contradiction. Otherwise,
; 'fmf.card' should be converted into a command.
(define-sort |(to_ nat_ term_)| () (to_ nat_ term_))
(assert (_ fmf.card |(to_ nat_ term_)| 3))

(check-sat)

(get-value ((_ fmf.card |(to_ nat_ term_)| 1) (_ fmf.card to_nat_term_ 2)))
(get-model-domain-elements (to_ nat_ term_))
(get-model-domain-elements to_nat_term_)
; TODO: this should work!
(get-value (|@(to_ nat_ term_)_0|))
